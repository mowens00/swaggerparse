{
  "swagger": "2.0",
  "info": {
    "version": "All",
    "title": "Monscierge API"
  },
  "host": "api-test.monscierge.com:443",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/Places/{placeId}/AdBoards/{id}": {
      "get": {
        "tags": [
          "AdBoards"
        ],
        "summary": "Gets an adboard",
        "operationId": "AdBoard_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of adboard",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AdBoards"
        ],
        "summary": "Updates an adboard",
        "operationId": "AdBoard_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "AdBoardModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AdBoards"
        ],
        "summary": "Deletes a specific adboard",
        "operationId": "AdBoard_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID for adboard",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/AdBoards": {
      "get": {
        "tags": [
          "AdBoards"
        ],
        "summary": "Gets all adboards for place",
        "operationId": "AdBoard_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AdBoards"
        ],
        "summary": "Adds a new adboard",
        "operationId": "AdBoard_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "AdBoardModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.AdBoards.Models.AdBoardModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/admindivisions": {
      "get": {
        "tags": [
          "Administrative Divisions"
        ],
        "summary": "Get a list of Administrative Divisions.",
        "description": "Get a list of available Administrative Divisions (e.g. States, Provinces, etc.).",
        "operationId": "AdminDivision_GetAdminDivisions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.AdminDivision.AdminDivisionCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/admindivisions/{id}": {
      "get": {
        "tags": [
          "Administrative Divisions"
        ],
        "summary": "Find an Administrative Division.",
        "description": "Find an Administrative Division (e.g. State, Province, etc) by it's resource id.",
        "operationId": "AdminDivision_GetAdminDivision",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Administrative Division resource.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.AdminDivision.AdminDivisionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/admindivisions/country/{countryId}": {
      "get": {
        "tags": [
          "Administrative Divisions"
        ],
        "summary": "Get a list of Administrative Divisions by country.",
        "description": "Get a list of Administrative Divisions (e.g. States, Provinces, etc.) by country.",
        "operationId": "AdminDivision_GetAdminDivisionsForCountry",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "The id of the country. See /v1/countries for a list of available country ids.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.AdminDivision.AdminDivisionCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Devices/{deviceId}/Ads": {
      "get": {
        "tags": [
          "Advertising Sponsorship Banners"
        ],
        "summary": "Get all ads.",
        "operationId": "Ad_GetAds",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of the Device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of data to load, 1 indexed",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of record to load",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Ads.Models.AdListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Advertising Sponsorship Banners"
        ],
        "summary": "Add or Update an ad.",
        "operationId": "Ad_PutAd",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of the Device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Ad properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Ads.Models.AdModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Devices/{deviceId}/Ads/{adId}": {
      "get": {
        "tags": [
          "Advertising Sponsorship Banners"
        ],
        "summary": "Get ad.",
        "operationId": "Ad_GetAd",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of the Device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Id of the Ad",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Ads.Models.AdModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Advertising Sponsorship Banners"
        ],
        "summary": "Delete an ad.",
        "operationId": "Ad_DeleteAd",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of the Device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Id of the Ad",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Ads": {
      "get": {
        "tags": [
          "Advertising Sponsorship Banners"
        ],
        "summary": "Gets all sponsorship ads for a place",
        "operationId": "PlaceAd_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Preferred culture",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of records",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of records",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Features": {
      "get": {
        "tags": [
          "Amenities"
        ],
        "summary": "Gets list of features for a place",
        "operationId": "Amenities_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "Filter by offer status",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Amenities"
        ],
        "summary": "Updates a feature",
        "operationId": "Amenities_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Feature to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Amenities"
        ],
        "summary": "Adds a new Feature",
        "operationId": "Amenities_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Feature to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Features/{id}": {
      "get": {
        "tags": [
          "Amenities"
        ],
        "summary": "Get single feature",
        "operationId": "Amenities_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id for feature",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Amenities"
        ],
        "summary": "Deletes a Feature",
        "operationId": "Amenities_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id for feature",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Features/Sorted": {
      "get": {
        "tags": [
          "Amenities"
        ],
        "summary": "Gets a sorted list of features and categories without children",
        "operationId": "Amenities_GetSorted",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceSortedModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Features/{id}/Children": {
      "get": {
        "tags": [
          "Amenities"
        ],
        "summary": "Gets child amenities for a specific amenity.",
        "operationId": "Amenities_GetChildren",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id for amenity.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Features.Models.AmenityListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Features/Order": {
      "put": {
        "tags": [
          "Amenities"
        ],
        "summary": "Updates the order of features",
        "operationId": "Amenities_UpdateOrder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Feature to shift range of other feature ordinals",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Features.Models.AmenityModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v3/Places/{placeId}/Features/Categories": {
      "get": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_QueryCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_UpdateCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_AddCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v3/Places/{placeId}/Features/Categories/{id}": {
      "get": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_GetCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_DeleteCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v3/Places/{placeId}/Features/Categories/{id}/Children": {
      "get": {
        "tags": [
          "AmenityCategories"
        ],
        "operationId": "AmenityCategories_QueryChildren",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffer",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenities.V2.AmenityResourceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Amenity/{amenityId}": {
      "get": {
        "tags": [
          "Amenity"
        ],
        "summary": "Gets an amenity.",
        "operationId": "Amenity_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "path",
            "description": "ID for Amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Anonymous": {
      "put": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Add anonymous user request",
        "operationId": "AnonymousRequest_PutRequestAnonymous",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Token for device",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "DeviceId for anonymous requests",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "ID for request template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "Array of options and their selected values",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of the guest user",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the guest user",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalDesc",
            "in": "query",
            "description": "Additional description",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "Check out time",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number",
            "required": false,
            "type": "string"
          },
          {
            "name": "room",
            "in": "query",
            "description": "Room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "etaSecondsFromNow",
            "in": "query",
            "description": "Seconds from now to set requests eta.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "returnRequestId",
            "in": "query",
            "description": "Indicates returning request id instead of action id",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Anonymous/Places/{placeId}/Requests": {
      "get": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Gets requests for an anonymous user",
        "operationId": "AnonymousRequest_GetAnonymousUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique token for the device",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "[Optional] Request status",
            "required": false,
            "type": "string",
            "enum": [
              "NEW",
              "ACK",
              "CLOSED",
              "ARCHIVED",
              "DELETED",
              "PENDING_APPROVAL"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Add anonymous user request",
        "operationId": "AnonymousRequest_PutRequestAnonymous",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Token for device",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "DeviceId for anonymous requests",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "ID for request template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "Array of options and their selected values",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of the guest user",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the guest user",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalDesc",
            "in": "query",
            "description": "Additional description",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "Check out time",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number",
            "required": false,
            "type": "string"
          },
          {
            "name": "room",
            "in": "query",
            "description": "Room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "etaSecondsFromNow",
            "in": "query",
            "description": "Seconds from now to set requests eta.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "returnRequestId",
            "in": "query",
            "description": "Indicates returning request id instead of action id",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Anonymous/Requests": {
      "get": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Gets requests for an anonymous user",
        "operationId": "AnonymousRequest_GetAnonymousUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique token for the device",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "[Optional] Request status",
            "required": false,
            "type": "string",
            "enum": [
              "NEW",
              "ACK",
              "CLOSED",
              "ARCHIVED",
              "DELETED",
              "PENDING_APPROVAL"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Anonymous/Places/{placeId}/Requests/{requestId}": {
      "get": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Gets an anonymous users' request",
        "operationId": "AnonymousRequest_GetAnonymousUserRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique id for a user's device",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Anonymous/Requests/{requestId}": {
      "get": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Gets an anonymous users' request",
        "operationId": "AnonymousRequest_GetAnonymousUserRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique id for a user's device",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Anonymous/PersonalDevices/{deviceId}/Requests": {
      "get": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Gets a list of requests for a specific device",
        "operationId": "AnonymousRequest_GetDeviceRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Device Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "modelType",
            "in": "query",
            "description": "Specific model type to respond with",
            "required": false,
            "type": "string",
            "default": "Default",
            "enum": [
              "Default",
              "Mercy"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Anonymous/PersonalDevices/{deviceId}/Requests/{requestId}": {
      "put": {
        "tags": [
          "Anonymous Requests"
        ],
        "summary": "Changes the request status from a user initiated action",
        "operationId": "AnonymousRequest_ChangeRequestStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Unique id of the device",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Token for the device",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request being managed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Request status that request will be changed to",
            "required": true,
            "type": "string",
            "enum": [
              "NEW",
              "ACK",
              "CLOSED",
              "ARCHIVED",
              "DELETED",
              "PENDING_APPROVAL"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}/Tokens/{tokenId}": {
      "get": {
        "tags": [
          "Application Tokens"
        ],
        "summary": "Get application token.",
        "operationId": "ApplicationToken_GetApplicationToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "Id of the application token.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationTokenModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Tokens"
        ],
        "summary": "Delete application token.",
        "operationId": "ApplicationToken_DeleteApplicationToken",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "Id of the application token.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}/Tokens": {
      "get": {
        "tags": [
          "Application Tokens"
        ],
        "summary": "List application tokens.",
        "operationId": "ApplicationToken_GetApplicationTokens",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationTokenModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Application Tokens"
        ],
        "summary": "Add or update application token.",
        "operationId": "ApplicationToken_PutApplicationToken",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "token",
            "in": "body",
            "description": "Application token to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationTokenModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}/Webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Application Webhooks"
        ],
        "summary": "Get Webhook",
        "operationId": "Webhook_GetWebhook",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of applicaion",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of webhook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.Webhook.WebhookModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Webhooks"
        ],
        "summary": "Delete webhook.",
        "operationId": "Webhook_DeleteWebhook",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the webhook.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}/Webhooks": {
      "get": {
        "tags": [
          "Application Webhooks"
        ],
        "summary": "List Webhooks",
        "operationId": "Webhook_GetWebhooks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of application",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Application.Webhook.WebhookModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Application Webhooks"
        ],
        "summary": "Add or update a webhook.",
        "operationId": "Webhook_PutWebhook",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webhook",
            "in": "body",
            "description": "Webhook to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.Webhook.WebhookModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}/config": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get config setting for an application.",
        "operationId": "ApplicationConfig_GetApplicationConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/System.Object"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/me/config": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get config setting for an application.",
        "operationId": "ApplicationConfig_GetApplicationConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/System.Object"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications/{applicationId}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application.",
        "operationId": "Application_GetApplication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete application.",
        "operationId": "Application_DeleteApplication",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List applications.",
        "operationId": "Application_GetApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Add or update an application.",
        "operationId": "Application_PutApplication",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "body",
            "description": "Application to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Beacons/{beaconId}/Users/Nearby": {
      "get": {
        "tags": [
          "Beacons"
        ],
        "summary": "Lists users near beacon.",
        "operationId": "Beacon_GetBeaconNearbyUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "beaconId",
            "in": "path",
            "description": "The id of the beacon.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sinceMs",
            "in": "query",
            "description": "Filter by entered after value as milliseconds since the Epoch (no filter: 0, default: 0)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "untilMs",
            "in": "query",
            "description": "Filter by entered before value as milliseconds since the Epoch (no filter: 0, default: 0)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of results. ( no limit: 0, default: 0)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "range",
            "in": "query",
            "description": "Filter by a specific range. ( no filter: null, default: null)",
            "required": false,
            "type": "string",
            "enum": [
              "Unknown",
              "Far",
              "Near",
              "Immediate"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconUserNearbyModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Beacons/{identifier}/Users/{userId}": {
      "put": {
        "tags": [
          "Beacons"
        ],
        "summary": "Add or extend a user in a beacon.",
        "operationId": "Beacon_PutBeaconNearbyUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of beacon",
            "required": true,
            "type": "string"
          },
          {
            "name": "major",
            "in": "query",
            "description": "Major of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minor",
            "in": "query",
            "description": "Minor of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "range",
            "in": "query",
            "description": "Range of the user to the beacon",
            "required": false,
            "type": "string",
            "default": "Far",
            "enum": [
              "Unknown",
              "Far",
              "Near",
              "Immediate"
            ]
          },
          {
            "name": "trigger",
            "in": "query",
            "description": "Trigger type",
            "required": false,
            "type": "string",
            "default": "Enter",
            "enum": [
              "Enter",
              "Leave",
              "StayFor",
              "LeaveAfter",
              "EnterFrom"
            ]
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "The unique token of the device",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          },
          {
            "name": "isAnonymous",
            "in": "query",
            "description": "Is request anonymous",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Beacons"
        ],
        "summary": "Remove a user from a beacon.",
        "operationId": "Beacon_DeleteBeaconNearbyUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of beacon",
            "required": true,
            "type": "string"
          },
          {
            "name": "major",
            "in": "query",
            "description": "Major of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minor",
            "in": "query",
            "description": "Minor of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Beacons/{identifier}/Users/Me": {
      "put": {
        "tags": [
          "Beacons"
        ],
        "summary": "Notify after finding beacon.",
        "operationId": "Beacon_PutBeaconDiscovery",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of beacon",
            "required": true,
            "type": "string"
          },
          {
            "name": "major",
            "in": "query",
            "description": "Major of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minor",
            "in": "query",
            "description": "Minor of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "range",
            "in": "query",
            "description": "Range of the user to the beacon",
            "required": false,
            "type": "string",
            "default": "Unknown",
            "enum": [
              "Unknown",
              "Far",
              "Near",
              "Immediate"
            ]
          },
          {
            "name": "trigger",
            "in": "query",
            "description": "Trigger type of the beacon",
            "required": false,
            "type": "string",
            "default": "Enter",
            "enum": [
              "Enter",
              "Leave",
              "StayFor",
              "LeaveAfter",
              "EnterFrom"
            ]
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "The unique token of the device",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          },
          {
            "name": "isAnonymous",
            "in": "query",
            "description": "Flag indicating if guest is anonymous user",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Brands/{brandId}/Booking/Destinations/Predictions": {
      "get": {
        "tags": [
          "Brand Booking"
        ],
        "summary": "List booking destination predictions.",
        "operationId": "Booking_GetBookingDestinationPredictions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Id of the brand.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "List brands.",
        "operationId": "Brand_GetBrands",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Brand.BrandBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Brands/{brandId}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get brand.",
        "operationId": "Brand_GetBrand",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Id of the brand.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Brand.BrandModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Buggy/Stops": {
      "get": {
        "tags": [
          "Buggy Integration Service"
        ],
        "summary": "Get Buggy Stops",
        "operationId": "Buggy_GetBuggyStops",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Buggy/Request": {
      "post": {
        "tags": [
          "Buggy Integration Service"
        ],
        "summary": "Post Buggy Request",
        "operationId": "Buggy_PostBuggyRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customername",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "source",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "destination",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pickuptime",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "numpbx",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerid",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Account/Forgot": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Creates token for membership",
        "operationId": "Cendyn_PostAccountForgotLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountForgotRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.PasswordRecoverResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Account/AuthenticateWifi": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Return member type and level information",
        "operationId": "Cendyn_PostAccountAuthenticateWifiLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "authenticate",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountAuthenticateWifiAuthRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.AuthenticateWifiResult"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Account/Activate": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Activate new membership after creation",
        "operationId": "Cendyn_PostAccountActivateLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountActivateRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ActivateMembershipResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/eConciergeRegister": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Login method for eConcierge",
        "operationId": "Cendyn_PostAccountEConciergeRegisterLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "registration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccounteConciergeRegisterRegistrationRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileTokenResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Account/Login": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Login method",
        "operationId": "Cendyn_PostAccountLoginLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "authentication",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountLoginRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Account/UpdatePassword": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Update password for user",
        "operationId": "Cendyn_PostAccountUpdatePasswordLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountUpdatePasswordRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.UpdatingResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Awards/{profile_id}": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get awards",
        "operationId": "Cendyn_GetAwardsLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "request_date_from",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "request_date_to",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "request_max_rows",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.AwardsResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile/Search": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Lookup member",
        "operationId": "Cendyn_PostMemberProfileSearchLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileSearchRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileLookUpSearchResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Create member profile",
        "operationId": "Cendyn_PostMemberProfileLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "registration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileRegistrationRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile/{profile_id}/Stay": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get list of stays",
        "operationId": "Cendyn_GetMemberProfileStayLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestDateFrom",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestDateTo",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileStayResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile/{profile_id}": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get member profile",
        "operationId": "Cendyn_GetMemberProfileLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile/{profile_id}/Update": {
      "patch": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Update member profile",
        "operationId": "Cendyn_PatchMemberProfileUpdateLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updateProfile",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.JsonPatchRequest"
              }
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.UpdateProfileModel"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Newsletter/Subscriptions": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get all available newsletter subscriptions",
        "operationId": "Cendyn_GetNewsletterSubscriptionsLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.NewsletterResponseUnit"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Newsletter/{profile_id}": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get member's newsletter subscriptions",
        "operationId": "Cendyn_GetSubscriptionsLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.NewsletterResponseUnit"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Newsletter/{id}": {
      "put": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Update member's newsletter subscriptions",
        "operationId": "Cendyn_PutSubscriptionsLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "setups",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynSubscription"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Survey/{profile_id}": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get survey answers for member",
        "operationId": "Cendyn_GetSurveyByIdLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.SurveyGetResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Update survey answers for member",
        "operationId": "Cendyn_PutSurveyAnswerLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "request_question_id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "request_answer_id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ResponseBase"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Survey": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get all survey questions",
        "operationId": "Cendyn_GetSurveyLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynSurveyResponseModel"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Voucher/RedeemVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Redeem a voucher",
        "operationId": "Cendyn_PostRedeemVoucherLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.VoucherResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Voucher/ReinstateVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Reinstate a voucher",
        "operationId": "Cendyn_PostReinstateVoucherLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ReinstateVoucherResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/Voucher/ValidateVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Validate a voucher",
        "operationId": "Cendyn_PostValidateVoucherLegacy",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.VoucherResponse"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/WhisperScreen/Retrieve": {
      "get": {
        "tags": [
          "Cendyn Integration Service (DEPRECATED)"
        ],
        "summary": "Get whisper screen data",
        "operationId": "Cendyn_GetWhisperScreenRetrieveLegacy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "pms_property_code",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.WhisperScreenResult"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile/Stays": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get list of stays",
        "operationId": "Cendyn_GetMemberProfileStay",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "MM-DD-YYYY",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "MM-DD-YYYY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get member profile",
        "operationId": "Cendyn_GetMemberProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Update member profile",
        "operationId": "Cendyn_PatchMemberProfileUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "updateProfile",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Create member profile",
        "operationId": "Cendyn_PostMemberProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "registration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Subscriptions": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get available newsletter subscriptions",
        "operationId": "Cendyn_GetAvailableSubscriptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile/Subscriptions": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get member's newsletter subscriptions",
        "operationId": "Cendyn_GetMySubscriptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Update member's newsletter subscriptions",
        "operationId": "Cendyn_UpdateMySubcriptions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subscriptions",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile/Surveys/{surveyId}": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get specific survey with member answers",
        "operationId": "Cendyn_GetSurvey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Update survey for member",
        "operationId": "Cendyn_UpdateSurvey",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "surveyModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Surveys": {
      "get": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Get available surveys",
        "operationId": "Cendyn_GetAvailableSurveys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile/Surveys/{surveyId}/Questions/{questionId}": {
      "put": {
        "tags": [
          "Cendyn Integration Service (NORMALIZED)"
        ],
        "summary": "Update survey answer for member",
        "operationId": "Cendyn_UpdateSurveyQuestion",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "responseModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyResponseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/company/{crm_property_code}/MemberProfile/{profile_id}/Notify": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Webhook for Cendyn to send update notifications",
        "operationId": "Cendyn_Notify",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "crm_property_code",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "notification",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileNotification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Account/Forgot": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Creates token for membership",
        "operationId": "Cendyn_PostAccountForgot",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountForgotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.PasswordRecoverResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Account/AuthenticateWifi": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Return member type and level information",
        "operationId": "Cendyn_PostAccountAuthenticateWifi",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "authenticate",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountAuthenticateWifiAuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.AuthenticateWifiResult"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Account/Activate": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Activate new membership after creation.",
        "operationId": "Cendyn_PostAccountActivate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountActivateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ActivateMembershipResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/eConciergeRegister": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Login method for eConcierge",
        "operationId": "Cendyn_PostAccountEConciergeRegister",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "registration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccounteConciergeRegisterRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileTokenResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Account/UpdatePassword": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Update password for user",
        "operationId": "Cendyn_PostAccountUpdatePassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.AccountUpdatePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.UpdatingResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Awards": {
      "get": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Get awards",
        "operationId": "Cendyn_GetAwards",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request_date_from",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "request_date_to",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "request_max_rows",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.AwardsResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/MemberProfile/Search": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Lookup member",
        "operationId": "Cendyn_PostMemberProfileSearch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileLookUpSearchResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Ping": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Ping Cendyn",
        "operationId": "Cendyn_PostPing",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.PingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.PingResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Voucher/RedeemVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Redeem a voucher",
        "operationId": "Cendyn_PostRedeemVoucher",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.VoucherResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Voucher/ReinstateVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Reinstate a voucher",
        "operationId": "Cendyn_PostReinstateVoucher",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.ReinstateVoucherResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/Voucher/ValidateVoucher": {
      "post": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Validate a voucher",
        "operationId": "Cendyn_PostValidateVoucher",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "voucher",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.VoucherResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Cendyn/WhisperScreen/Retrieve": {
      "get": {
        "tags": [
          "Cendyn Integration Service"
        ],
        "summary": "Get whisper screen data",
        "operationId": "Cendyn_GetWhisperScreenRetrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "last_name",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "pms_property_code",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.WhisperScreenResult"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Channel": {
      "get": {
        "tags": [
          "Channel"
        ],
        "operationId": "ChannelConfig_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Channel"
        ],
        "operationId": "ChannelConfig_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Channel"
        ],
        "operationId": "ChannelConfig_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Channel/{channelId}": {
      "get": {
        "tags": [
          "Channel"
        ],
        "operationId": "ChannelConfig_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "operationId": "ChannelConfig_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Analytics/Clicks": {
      "post": {
        "tags": [
          "Click Analytics"
        ],
        "summary": "Get click analytics for place.",
        "operationId": "ClickAnalytic_GetClicks",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.ClickRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.DeviceClickSection"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Analytics/Clicks/Histograms": {
      "post": {
        "tags": [
          "Click Analytics"
        ],
        "summary": "Get click analytics for place.",
        "operationId": "ClickAnalytic_GetClickHistograms",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.ClickHistogramRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.DeviceHistogramSection"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Clicktrack": {
      "post": {
        "tags": [
          "Click Tracking"
        ],
        "summary": "Post a click tracking event",
        "operationId": "ClickTrack_PostClicktrack",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clicks",
            "in": "body",
            "description": "Array of click event models",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ClickTrack.ClickTrackResourceModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Configs/{id}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "Get all configs",
        "operationId": "Config_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Configuration type",
            "required": true,
            "type": "string",
            "enum": [
              "Application",
              "Brand",
              "Device",
              "Hotel",
              "Platform",
              "Theme",
              "System",
              "User"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier for the configuration type: eg: Application Id, Place Id, etc",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Get a list of Countries.",
        "description": "Get a list of available Countries.",
        "operationId": "Countries_GetCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Country.CountryCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/countries/{id}": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Find a Country",
        "operationId": "Countries_GetCountry",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Country resource.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Country.CountryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms/{roomId}/Curtain/{deviceId}": {
      "get": {
        "tags": [
          "Curtain"
        ],
        "operationId": "IoT_GetCurtain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTCurtainDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTCurtainDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Curtain"
        ],
        "operationId": "IoT_ConfigureCurtain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTCurtainDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTCurtainDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/DeviceConfigs/{deviceId}": {
      "get": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Gets a device's configs",
        "operationId": "DeviceConfig_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Updates all device configs sent.",
        "operationId": "DeviceConfig_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceConfigs",
            "in": "body",
            "description": "Configs sent from front end",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/DeviceConfigs/KeyValueList": {
      "get": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Gets all distinct device config keys and their values",
        "operationId": "DeviceConfig_GetKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/DeviceConfigs/{deviceConfigId}/Device/{deviceId}": {
      "put": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Updates a device config",
        "operationId": "DeviceConfig_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceConfigId",
            "in": "path",
            "description": "ID for device config",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceConfig",
            "in": "body",
            "description": "DeviceConfigModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Adds a new device config",
        "operationId": "DeviceConfig_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceConfigId",
            "in": "path",
            "description": "ID for device config",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceConfig",
            "in": "body",
            "description": "DeviceConfigModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/DeviceConfigs/{deviceConfigId}": {
      "delete": {
        "tags": [
          "Device Configs"
        ],
        "summary": "Deletes a specific device config",
        "operationId": "DeviceConfig_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceConfigId",
            "in": "path",
            "description": "ID for device config",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets all devices by device id",
        "operationId": "ExternalDevices_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "device_id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Create a device object",
        "operationId": "ExternalDevices_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "menu object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/devices/{deviceId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a device object",
        "operationId": "ExternalDevices_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Create a menu object",
        "operationId": "ExternalDevices_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "device object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete a menu object",
        "operationId": "ExternalDevices_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Devices/{deviceId}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Gets a device",
        "operationId": "Device_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Device"
        ],
        "summary": "Updates a device",
        "operationId": "Device_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "device",
            "in": "body",
            "description": "DeviceModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Adds a new device",
        "operationId": "Device_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "device",
            "in": "body",
            "description": "DeviceModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "summary": "Deletes a specific device",
        "operationId": "Device_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Device"
        ],
        "summary": "Patches device",
        "operationId": "Device_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID for device",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "devicePatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.Device.Models.DeviceModel]"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Devices": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get all devices",
        "operationId": "Device_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Device.Models.DeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDevices/{subDeviceId}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Gets a subdevice",
        "operationId": "SubDevice_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID of subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Device"
        ],
        "summary": "Updates a subdevice",
        "operationId": "SubDevice_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID for subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDevice",
            "in": "body",
            "description": "SubDeviceModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Adds a new subdevice",
        "operationId": "SubDevice_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID for subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDevice",
            "in": "body",
            "description": "SubDeviceModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Device"
        ],
        "summary": "Deletes a specific subdevice",
        "operationId": "SubDevice_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID for subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Device"
        ],
        "summary": "Patches subdevice",
        "operationId": "SubDevice_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID for subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDevicePatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.SubDevice.Models.SubDeviceModel]"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDevices": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get all subdevices for device",
        "operationId": "SubDevice_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.SubDevice.Models.SubDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/CreateEndpoint": {
      "get": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_CreateEndpoint",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/DeleteEndpoint/{endpoint}": {
      "delete": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_DeleteEndpoint",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/GetAvailableDoors": {
      "get": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_GetAvailableDoors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/DeleteCard/{cardId}": {
      "delete": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_DeleteKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/Key": {
      "get": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_CreateKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/CreateKey": {
      "post": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_CreateKeyForEndpoint",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endpoint",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "doorId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "expireMilliseconds",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/EndpointStatus/{endpoint}": {
      "get": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_GetEndpointStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/doorlock/{placeId}/assaabloy/DeleteEndpoint": {
      "delete": {
        "tags": [
          "Door Lock"
        ],
        "operationId": "AssaAbloyDoorLocks_DeleteEndpointForUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/doorlocks/doors": {
      "get": {
        "tags": [
          "Doorlocks"
        ],
        "summary": "Get all doors at a property",
        "operationId": "Doorlock_GetDoors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "doorType",
            "in": "query",
            "description": "Optional type of the door",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/doorlocks/register": {
      "post": {
        "tags": [
          "Doorlocks"
        ],
        "operationId": "Doorlock_RegisterDevice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Doorlock.DoorLockRegisterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/doorlocks/keys": {
      "get": {
        "tags": [
          "Doorlocks"
        ],
        "operationId": "Doorlock_GetKeysForPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/doorlocks/keys/{keyId}": {
      "get": {
        "tags": [
          "Doorlocks"
        ],
        "operationId": "Doorlock_GetKeyDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/doorlocks/user/keys": {
      "get": {
        "tags": [
          "Doorlocks"
        ],
        "operationId": "Doorlock_GetUserKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EventBoard/Register/{name}": {
      "post": {
        "tags": [
          "Event Board"
        ],
        "summary": "Register event board (sub)device",
        "operationId": "EventBoard_RegisterEventBoard",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name for subdevice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EventBoard/{eventBoardId}/Locations/{eventLocationId}/Events": {
      "get": {
        "tags": [
          "Event Board"
        ],
        "summary": "Get events for event board",
        "operationId": "EventBoard_GetEventsForEventBoard",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventBoardId",
            "in": "path",
            "description": "Refid for event board",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventLocationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EventBoard/{eventBoardId}/Location/{eventLocationId}": {
      "post": {
        "tags": [
          "Event Board"
        ],
        "summary": "Register event location to event board",
        "operationId": "EventBoard_RegisterEventBoardLocations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventBoardId",
            "in": "path",
            "description": "Regid for event board",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventLocationId",
            "in": "path",
            "description": "ID for event location",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EventBoard/Register/{name}/Location/{eventLocationId}": {
      "post": {
        "tags": [
          "Event Board"
        ],
        "summary": "Registers or confirms event board with event location.",
        "operationId": "EventBoard_RegisterEventBoardWithLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Proposed Device Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventLocationId",
            "in": "path",
            "description": "ID for event location",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/eventgroups": {
      "get": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Get Event Groups",
        "operationId": "EventGroup_GetEventGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Add a new Event Group.",
        "operationId": "EventGroup_PostEventGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventGroup",
            "in": "body",
            "description": "Event Group properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/eventgroups/{id}": {
      "get": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Find an Event Group.",
        "operationId": "EventGroup_GetEventGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Update an Event Group.",
        "operationId": "EventGroup_PutEventGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventGroup",
            "in": "body",
            "description": "Event Group properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Delete an Event Group.",
        "operationId": "EventGroup_DeleteEventGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/eventgroups/actions/validate": {
      "post": {
        "tags": [
          "Event Groups"
        ],
        "summary": "Validate an EventGroup Guid.",
        "operationId": "EventGroup_PostValidateEventGroupGuid",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guid",
            "in": "body",
            "description": "A unique identifier for an Event Group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/eventlocations": {
      "get": {
        "tags": [
          "Event Locations"
        ],
        "summary": "Get Event Locations for a Place",
        "operationId": "EventLocation_GetEventLocations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Locations"
        ],
        "summary": "Add a new Event Location",
        "operationId": "EventLocation_PostEventLocation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventLocation",
            "in": "body",
            "description": "Event Location properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/eventlocations/{id}": {
      "get": {
        "tags": [
          "Event Locations"
        ],
        "summary": "Find an Event Location",
        "operationId": "EventLocation_GetEventLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Event Locations"
        ],
        "summary": "Update an Event Location",
        "operationId": "EventLocation_PutEventLocation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventLocation",
            "in": "body",
            "description": "Event Location properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Locations"
        ],
        "summary": "Delete an Event Location",
        "operationId": "EventLocation_DeleteEventLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event Location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Event Section Attachments"
        ],
        "summary": "Gets an individual attachment for a section",
        "operationId": "EventSectionAttachment_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "ID for attachment",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Section Attachments"
        ],
        "summary": "Deletes an existing attachment",
        "operationId": "EventSectionAttachment_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "ID for attachment",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Event Section Attachments"
        ],
        "summary": "Patches section attachment",
        "operationId": "EventSectionAttachment_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "ID for attachment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentPatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Attachments": {
      "put": {
        "tags": [
          "Event Section Attachments"
        ],
        "summary": "Updates an existing attachment section",
        "operationId": "EventSectionAttachment_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachment",
            "in": "body",
            "description": "EventSectionAttachmentModel object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Section Attachments"
        ],
        "summary": "Adds a new attachment to an event section",
        "operationId": "EventSectionAttachment_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachment",
            "in": "body",
            "description": "EventSectionAttachmentModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Images/{imageId}": {
      "get": {
        "tags": [
          "Event Section Images"
        ],
        "summary": "Gets a specific section image map",
        "operationId": "EventSectionImage_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "ID for image map",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Section Images"
        ],
        "summary": "Deletes an image map id",
        "operationId": "EventSectionImage_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "ID for image map",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Event Section Images"
        ],
        "summary": "Patches image map",
        "operationId": "EventSectionImage_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "ID for image",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imagePatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Images": {
      "put": {
        "tags": [
          "Event Section Images"
        ],
        "summary": "Updates an existing section image map",
        "operationId": "EventSectionImage_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageMap",
            "in": "body",
            "description": "EventSectionImageModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Section Images"
        ],
        "summary": "Adds a new section image model",
        "operationId": "EventSectionImage_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageMap",
            "in": "body",
            "description": "EventSectionImageModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Sponsorships/{sponsorshipId}": {
      "get": {
        "tags": [
          "Event Section Sponsorships"
        ],
        "summary": "Gets an individual sponsorship",
        "operationId": "EventSectionSponsorship_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "ID for sponsorship",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Section Sponsorships"
        ],
        "summary": "Deletes a sponsorship",
        "operationId": "EventSectionSponsorship_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "ID for sponsorship",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Event Section Sponsorships"
        ],
        "summary": "Patches a sponsorship",
        "operationId": "EventSectionSponsorship_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "ID for sponsorship",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorshipPatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}/Sponsorships": {
      "put": {
        "tags": [
          "Event Section Sponsorships"
        ],
        "summary": "Updates existing sponsorship",
        "operationId": "EventSectionSponsorship_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorship",
            "in": "body",
            "description": "EventSectionSponsorshipModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Section Sponsorships"
        ],
        "summary": "Adds new sponsorship model",
        "operationId": "EventSectionSponsorship_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sponsorship",
            "in": "body",
            "description": "EventSectionSponsorModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections/{sectionId}": {
      "get": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Gets a specific section for an event",
        "operationId": "EventSection_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of parent event record",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID of section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Deletes a specific event section",
        "operationId": "EventSection_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Patches event section",
        "operationId": "EventSection_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionPatch",
            "in": "body",
            "description": "Patch object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel]"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}/Sections": {
      "get": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Get all sections for an event",
        "operationId": "EventSection_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Updates an event section",
        "operationId": "EventSection_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "section",
            "in": "body",
            "description": "EventSectionModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Event Sections"
        ],
        "summary": "Adds a new event section to an event",
        "operationId": "EventSection_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID for event",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "section",
            "in": "body",
            "description": "EventSectionModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/places/{placeId}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get Events for a Place.",
        "operationId": "Events_GetEventsByPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dateStart",
            "in": "query",
            "description": "Date range start (ISO 8601 date format).",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateEnd",
            "in": "query",
            "description": "Date range end (ISO 8601 date format).",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\".",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessCodes",
            "in": "query",
            "description": "Client cached access codes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create a new Event for a Place.",
        "operationId": "Events_PostEvent",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventResource",
            "in": "body",
            "description": "Event properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/places/{placeId}/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Find an Event.",
        "operationId": "Events_GetEvent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "occurrenceId",
            "in": "query",
            "description": "Id of the occurrence (if event is recurring).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\".",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessCodes",
            "in": "query",
            "description": "Client cached access codes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Update an Event.",
        "description": "For a recurring event, specify the occurrenceId if you want to update the properties of only a single occurrence.\r\n            Otherwise, all events in the series will be updated.",
        "operationId": "Events_PutEvent",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventResource",
            "in": "body",
            "description": "Event properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel"
            }
          },
          {
            "name": "occurrenceId",
            "in": "query",
            "description": "Id of the occurrence (if event is recurring).",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Delete an Event.",
        "description": "For a recurring event, specify the occurrenceId if you only wish to delete a single occurrence. Otherwise,\r\n            the entire event series will be deleted.",
        "operationId": "Events_DeleteEvent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Event.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "occurrenceId",
            "in": "query",
            "description": "Id of the occurrence (if event is recurring).",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/places/{placeId}/events/actions/validate": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Validate an Event access code.",
        "operationId": "Events_PostValidateEventGroupAccessCode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accessCode",
            "in": "query",
            "description": "The AccessCode to validate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Events/LivingStages": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Gets a list of all properties that have living stages attached",
        "operationId": "Events_GetLivingStageProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Events/LivingStages": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "Events_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/{featureId}/Cart": {
      "get": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Get cart for a feature.",
        "operationId": "Cart_GetFeatureCart",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Delete a feature cart.",
        "operationId": "Cart_DeleteFeatureCart",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/RoomService/Cart": {
      "get": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Get cart for Room Service.",
        "operationId": "Cart_GetRoomServiceCart",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Delete a room service cart item.",
        "operationId": "Cart_DeleteRoomServiceCart",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/{featureId}/Cart/Items": {
      "post": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Add an item to a cart.",
        "operationId": "Cart_PostFeatureCartItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cartItem",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/RoomService/Cart/Items": {
      "post": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Add an item to a cart.",
        "operationId": "Cart_PostRoomServiceCartItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cartItem",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/{featureId}/Cart/Items/{id}": {
      "put": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Update an item in the cart.",
        "operationId": "Cart_PutFeatureCartItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartItem",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Delete a feature cart item.",
        "operationId": "Cart_DeleteFeatureCartItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Cart Item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/RoomService/Cart/Items/{id}": {
      "put": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Update an item in the room service cart.",
        "operationId": "Cart_PutRoomServiceCartItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartItem",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Delete a room service cart item.",
        "operationId": "Cart_DeleteRoomServiceCartItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Cart Item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/{featureId}/Cart/Checkout": {
      "post": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Checkout a feature cart.",
        "operationId": "Cart_CheckoutFeatureCart",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "optionValues",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestOptionValue"
              }
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalInfo",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliverTo",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliverOnMs",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Features/RoomService/Cart/Checkout": {
      "post": {
        "tags": [
          "Feature Carts"
        ],
        "summary": "Checkout a room service cart.",
        "operationId": "Cart_CheckoutRoomServiceCart",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "optionValues",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestOptionValue"
              }
            }
          },
          {
            "name": "deliverOnMs",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalInfo",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliverTo",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": "USD",
            "enum": [
              "USD",
              "GBP",
              "JPY",
              "EUR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get File.",
        "operationId": "Blob_GetFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filePath",
            "in": "query",
            "description": "File path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "Default file name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload a File.",
        "operationId": "Blob_PostFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "description": "A file to upload.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/Reservations/FoodBeverage/{resId}": {
      "get": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Get a single food and beverage reservation",
        "operationId": "FoodBeverageReservation_GetFbReservationWithResId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resId",
            "in": "path",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          },
          {
            "name": "amenityId",
            "in": "query",
            "description": "Depracated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/FoodBeverage/Reservations/{resId}": {
      "get": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Get a single food and beverage reservation",
        "operationId": "FoodBeverageReservation_GetFbReservationWithResId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resId",
            "in": "path",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          },
          {
            "name": "amenityId",
            "in": "query",
            "description": "Depracated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/FoodBeverage/Availability": {
      "get": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Get the availabilty of an amenity",
        "operationId": "FoodBeverageReservation_GetFbAvailability",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Amenity Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "String formatted date eg \"20160928\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "String time in military format eg \"1900\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "String time in military format eg \"2100\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "partySize",
            "in": "query",
            "description": "Int for party size",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pimToken",
            "in": "query",
            "description": "Proxce's device token, required if anonymous",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/FoodBeverage/Reservations/Availability": {
      "get": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Get the availabilty of an amenity",
        "operationId": "FoodBeverageReservation_GetFbAvailability",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Amenity Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "String formatted date eg \"20160928\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "String time in military format eg \"1900\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "String time in military format eg \"2100\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "partySize",
            "in": "query",
            "description": "Int for party size",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pimToken",
            "in": "query",
            "description": "Proxce's device token, required if anonymous",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/FoodBeverage": {
      "put": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Updates an existing food and beverage reservation",
        "operationId": "FoodBeverageReservation_UpdateFbReservation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Create a food and beverage reservation with generic reservation model",
        "operationId": "FoodBeverageReservation_CreateFbReservationForUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model wrapper",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "if true return dummy data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Delete an existing food and beverage reservation",
        "operationId": "FoodBeverageReservation_CancelFbReservation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Id of the amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/FoodBeverage/Reservations": {
      "put": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Updates an existing food and beverage reservation",
        "operationId": "FoodBeverageReservation_UpdateFbReservation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Create a food and beverage reservation with generic reservation model",
        "operationId": "FoodBeverageReservation_CreateFbReservationForUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model wrapper",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "if true return dummy data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Food and Beverage Reservations"
        ],
        "summary": "Delete an existing food and beverage reservation",
        "operationId": "FoodBeverageReservation_CancelFbReservation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Id of the amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/member-authentication": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Authenticate as a loyalty member using a login ID (username, profile ID, etc.) and a password",
        "operationId": "HeBSLoyalty_GetMemberAuthentication",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/profile/{profileId}": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Personal information (first name, last name, address, etc.)",
        "operationId": "HeBSLoyalty_GetProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Update a specific profile",
        "operationId": "HeBSLoyalty_UpdateProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "body",
            "description": "Profile object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltyProfileObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/stays/{profileId}": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "List stays associated with a profile ID",
        "operationId": "HeBSLoyalty_GetStaysByProfileId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Filter out any stays before this date.",
            "required": false,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "ilter out any stays after this date.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Which field to sort by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/rewards/{profileId}": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "List rewards and benefits associated with a profile ID",
        "operationId": "HeBSLoyalty_GetRewardsByProfileId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Which field to sort by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to retrieve.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/subscriptions/{profileId}": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Access and update information regarding newsletter subscriptions associated with a profile",
        "operationId": "HeBSLoyalty_GetSubscriptionsByProfileId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Update (resets) all of the newsletters that a profile is subscribed to",
        "operationId": "HeBSLoyalty_UpdateSubscriptionsByProfileId",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "description": "Id of the member profile.",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription",
            "in": "body",
            "description": "Subscription object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltySubscriptionObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/subscriptions": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Access information regarding newsletter subscriptions",
        "operationId": "HeBSLoyalty_GetSubscriptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/HeBS/Loyalty/member-survey": {
      "get": {
        "tags": [
          "HeBS Loyalty Integration Service"
        ],
        "summary": "Access and update the guest preference survey",
        "operationId": "HeBSLoyalty_GetMemberSurvey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Images/MarketingCards": {
      "get": {
        "tags": [
          "Hello Rewards Marketing Cards"
        ],
        "summary": "Get marketing card images for Hello Rewards",
        "operationId": "MarketingCard_GetMarketingCards",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MarketingCards.Models.MarketingCardResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/HotelAirport": {
      "get": {
        "tags": [
          "Hotel Airports"
        ],
        "operationId": "HotelAirport_GetHotelAirports",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.HotelAirportModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Hotel Airports"
        ],
        "operationId": "HotelAirport_AddHotelAirport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "airportModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.HotelAirportModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/HotelAirport/{airportHotelId}": {
      "put": {
        "tags": [
          "Hotel Airports"
        ],
        "operationId": "HotelAirport_UpdateHotelAirport",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "airportHotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "airportModel",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.HotelAirportModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Hotel Airports"
        ],
        "operationId": "HotelAirport_DeleteHotelAirport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "airportHotelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Config": {
      "get": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Gets the hotel configs for a place",
        "operationId": "HotelConfig_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/System.Object"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Adds or updates config options for a place",
        "operationId": "HotelConfig_AddUpdateConfigs",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "models",
            "in": "body",
            "description": "Config model",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Configs.Models.BaseConfigModel"
              }
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Config/Single": {
      "get": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Gets a hotel config option for a place",
        "operationId": "HotelConfig_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Key for config",
            "required": true,
            "type": "string",
            "enum": [
              "Cab",
              "CheckedInNotifications",
              "BeaconCampaigns",
              "Wayfinding",
              "ISACEvents",
              "Limo",
              "Shuttle",
              "Taxi",
              "Buggy",
              "AnonUser",
              "Meridian",
              "Pms",
              "GeographyFence",
              "EventDrivenCheckIn",
              "DoorLock",
              "AssaAbloy",
              "RequestQueue",
              "RequestTemplate",
              "Hours",
              "MobileMore",
              "TermsConditions",
              "Postcard",
              "Channel",
              "LivingStage",
              "HotSOS",
              "Anonymous",
              "Recommendations",
              "HomeKit",
              "StayCard",
              "DoorLocks",
              "IoT",
              "SaltoConnection",
              "TelkonetConnection"
            ]
          },
          {
            "name": "option",
            "in": "query",
            "description": "Option for config",
            "required": true,
            "type": "string",
            "enum": [
              "Operating",
              "Enabled",
              "Url",
              "Username",
              "Password",
              "PropertyKey",
              "NumberOfDaysToPull",
              "IsPublic",
              "PreferBookingName",
              "DefaultMap",
              "Map",
              "Type",
              "SecondaryUsername",
              "SecondaryPassword",
              "SecondaryUrl",
              "Domain",
              "Default",
              "OriginEntityID",
              "OriginSystemType",
              "DestinationEntityID",
              "DestinationSystemType",
              "Debug",
              "ETA",
              "GroupId",
              "Image",
              "Stage",
              "ChannelConfig",
              "Frames",
              "Group",
              "Location",
              "SyncMessages",
              "SearchNearby",
              "DefaultImage",
              "PortNumber",
              "HostAddress",
              "Vendor"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Hotels.Models.HotelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Updates a single config option for a place",
        "operationId": "HotelConfig_UpdateSingle",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "HotelConfig object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Hotels.Models.HotelConfigModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Hotels.Models.HotelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Adds a new config option for a place",
        "operationId": "HotelConfig_AddSingle",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "HotelConfig object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Hotels.Models.HotelConfigModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Hotels.Models.HotelConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Config/{configId}": {
      "delete": {
        "tags": [
          "Hotel Configs"
        ],
        "summary": "Delete config option for place",
        "operationId": "HotelConfig_DeleteConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "configId",
            "in": "path",
            "description": "Config ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Transportation": {
      "get": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Gets the hotels transportations",
        "operationId": "HotelTransportation_GetHotelTransportation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.HotelTransportationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Updates Hotel transportation data",
        "operationId": "HotelTransportation_UpdateHotelTransportation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "transportation",
            "in": "body",
            "description": "Transportation Model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.HotelTransportationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Ask for transportation",
        "operationId": "HotelTransportation_PostHotelTransportation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestedTime",
            "in": "query",
            "description": "Requested time",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transportationType",
            "in": "query",
            "description": "Specific type of transportation",
            "required": true,
            "type": "string",
            "enum": [
              "Cab",
              "Limo",
              "Shuttle",
              "Valet"
            ]
          },
          {
            "name": "additionalNotes",
            "in": "query",
            "description": "Additional notes",
            "required": false,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "[NOT SUPPORTED]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Transportation": {
      "get": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Gets Transportation for Hotel",
        "operationId": "HotelTransportation_GetTransportation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Transportation.TransportationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Create Transportation for Hotel",
        "operationId": "HotelTransportation_PostTransportation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Transportation/Valet": {
      "post": {
        "tags": [
          "Hotel Transportation"
        ],
        "summary": "Asks for valet",
        "operationId": "HotelTransportation_PostValetTransportation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minutes",
            "in": "query",
            "description": "Minutes",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ticket",
            "in": "query",
            "description": "Ticket",
            "required": true,
            "type": "string"
          },
          {
            "name": "who",
            "in": "query",
            "description": "User making request",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "additionalNotes",
            "in": "query",
            "description": "Notes",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "culture",
            "in": "query",
            "description": "[NOT SUPPORTED]",
            "required": false,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get image.",
        "operationId": "Image_GetImage",
        "consumes": [],
        "produces": [
          "image/*"
        ],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "description": "Image path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "Indicates image as attachment with supplied suggested fileName",
            "required": false,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Image mode",
            "required": false,
            "type": "string",
            "default": "UNIFORM",
            "enum": [
              "UNIFORM",
              "PAD",
              "ZOOM"
            ]
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "Prefered format of image",
            "required": false,
            "type": "string",
            "default": "Auto",
            "enum": [
              "Auto",
              "Png",
              "Jpeg"
            ]
          },
          {
            "name": "width",
            "in": "query",
            "description": "Desired width (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "height",
            "in": "query",
            "description": "Desired height (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "maxWidth",
            "in": "query",
            "description": "Max width (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "maxHeight",
            "in": "query",
            "description": "Max height (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "fillArgb",
            "in": "query",
            "description": "ARGB for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillAlpha",
            "in": "query",
            "description": "Alpha for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillRed",
            "in": "query",
            "description": "Red for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillGreen",
            "in": "query",
            "description": "Green for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillBlue",
            "in": "query",
            "description": "Blue for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cropAnchorV",
            "in": "query",
            "description": "Vertical crop anchor position (optional)",
            "required": false,
            "type": "string",
            "default": "Center",
            "enum": [
              "Center",
              "Top",
              "Bottom"
            ]
          },
          {
            "name": "cropAnchorH",
            "in": "query",
            "description": "Horizontal crop anchor position (optional)",
            "required": false,
            "type": "string",
            "default": "Center",
            "enum": [
              "Center",
              "Left",
              "Right"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Images"
        ],
        "summary": "DEPRECATED - Upload an image.",
        "description": "This method has been deprecated. Use: POST /v2/images",
        "operationId": "Image_PutImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "description": "A file to upload.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get image using REFID.",
        "operationId": "Image_GetImageByRefId",
        "consumes": [],
        "produces": [
          "image/*"
        ],
        "parameters": [
          {
            "name": "imageId",
            "in": "query",
            "description": "Image REFID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "Indicates image as attachment with supplied suggested fileName",
            "required": false,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Image mode",
            "required": false,
            "type": "string",
            "default": "UNIFORM",
            "enum": [
              "UNIFORM",
              "PAD",
              "ZOOM"
            ]
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "Prefered format of image",
            "required": false,
            "type": "string",
            "default": "Auto",
            "enum": [
              "Auto",
              "Png",
              "Jpeg"
            ]
          },
          {
            "name": "width",
            "in": "query",
            "description": "Desired width (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "height",
            "in": "query",
            "description": "Desired height (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "maxWidth",
            "in": "query",
            "description": "Max width (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "maxHeight",
            "in": "query",
            "description": "Max height (optional)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "fillArgb",
            "in": "query",
            "description": "ARGB for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillAlpha",
            "in": "query",
            "description": "Alpha for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillRed",
            "in": "query",
            "description": "Red for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillGreen",
            "in": "query",
            "description": "Green for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fillBlue",
            "in": "query",
            "description": "Blue for image fill (optional)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cropAnchorV",
            "in": "query",
            "description": "Vertical crop anchor position (optional)",
            "required": false,
            "type": "string",
            "default": "Center",
            "enum": [
              "Center",
              "Top",
              "Bottom"
            ]
          },
          {
            "name": "cropAnchorH",
            "in": "query",
            "description": "Horizontal crop anchor position (optional)",
            "required": false,
            "type": "string",
            "default": "Center",
            "enum": [
              "Center",
              "Left",
              "Right"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload an image.",
        "operationId": "Image_PostImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "description": "A file to upload.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageCreateResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Images/Thumbnail": {
      "get": {
        "tags": [
          "Images"
        ],
        "operationId": "Image_GetImageThumbnail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "imagePath",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/images/online": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads an image to our database and blob store from a url",
        "operationId": "Image_PostImageFromUrl",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "URL of image",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageCreateResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Integrations": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Gets a list of place specific integration mappings",
        "operationId": "PlaceIntegration_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Integrations"
        ],
        "summary": "Updates an existing integration mapping",
        "operationId": "PlaceIntegration_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "integrationMap",
            "in": "body",
            "description": "Mapping responsible for mapping pieces of the monscierge data to the integration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Adds a new integration mapping",
        "operationId": "PlaceIntegration_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "integrationMap",
            "in": "body",
            "description": "Mapping that is responsible for mapping pieces of the monscierge data to integration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Integrations/{id}": {
      "delete": {
        "tags": [
          "Integrations"
        ],
        "summary": "Deletes an integration mapping",
        "operationId": "PlaceIntegration_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id for integration map record",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/TopSail": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Gets the top sail url for a place",
        "operationId": "PlaceIntegration_GetTopSail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkIn",
            "in": "query",
            "description": "Check in date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "checkOut",
            "in": "query",
            "description": "Check in date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "adults",
            "in": "query",
            "description": "Number of adults",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "children",
            "in": "query",
            "description": "Number of children",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "rooms",
            "in": "query",
            "description": "Number of rooms",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "bed",
            "in": "query",
            "description": "Bed type",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonSmoking",
            "in": "query",
            "description": "Non smoking preferred",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "promo",
            "in": "query",
            "description": "Promo code",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "Group code",
            "required": false,
            "type": "string"
          },
          {
            "name": "rate",
            "in": "query",
            "description": "Rate code",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "query",
            "description": "Package Id",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/CMS/{integrationType}": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Calls the CMS integration",
        "operationId": "Integration_Integration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "integrationType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Integrations"
        ],
        "operationId": "Integration_DeleteIntegration",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "integrationType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performances/{performanceId}": {
      "get": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Gets a specific performance record",
        "operationId": "Performance_GetLivingStagePerformance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "performanceId",
            "in": "path",
            "description": "Id of performance",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performances/DateRange": {
      "get": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Method to search performances within a given time frame",
        "operationId": "Performance_QueryRecent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "startDateTime",
            "in": "query",
            "description": "Time to begin search",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "description": "Time to end search",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localized parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Performances/DateRange": {
      "get": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Method to search performances within a given time frame for a place",
        "operationId": "Performance_QueryRecentForPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDateTime",
            "in": "query",
            "description": "Time to begin search",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "description": "Time to end search",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localized parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Performances": {
      "get": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Finds all performances for a specific location",
        "operationId": "Performance_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localized parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Updates a PerformanceModel",
        "operationId": "Performance_PutPerformance",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "PerformanceModel object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Adds a new PerformanceModel",
        "operationId": "Performance_PostPerformance",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "PerformanceModel object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Performances/{performanceId}": {
      "delete": {
        "tags": [
          "Living Stage Performances"
        ],
        "summary": "Delete PerformanceModel",
        "operationId": "Performance_DeletePerformance",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for Place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "performanceId",
            "in": "path",
            "description": "Id for PerformanceModel",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "occurenceId",
            "in": "query",
            "description": "Optional Occurence Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/{performerId}": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Gets a specific event host's information",
        "operationId": "Performer_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "performerId",
            "in": "path",
            "description": "id for the event host / performer",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localized culture param",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Delete an event host",
        "operationId": "Performer_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "performerId",
            "in": "path",
            "description": "id for the event host / performer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/{performerId}/Links": {
      "post": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Delete event host URL(s)",
        "operationId": "Performer_DeleteLinks",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "performerId",
            "in": "path",
            "description": "id for the event host / performer",
            "required": true,
            "type": "string"
          },
          {
            "name": "links",
            "in": "body",
            "description": "array of links to be removed",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventHostLinkMapModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/{performerId}/Performances": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Gets performances for a specific performer",
        "operationId": "Performer_GetPerformances",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "performerId",
            "in": "path",
            "description": "Id for performer",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/LinkTypes": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Get Link Type Enum",
        "operationId": "Performer_GetLinkTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Enums.DescriptiveEnumModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/Performances": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Gets all events for all performers",
        "operationId": "Performer_QueryPerformerPerformances",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Gets all performers",
        "operationId": "Performer_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Performers/List": {
      "get": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Gets list models of all performers",
        "operationId": "Performer_QueryAsList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.PerformerListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Performers": {
      "put": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Updates a PerformanceModel",
        "operationId": "Performer_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Performer object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Living Stage Performers"
        ],
        "summary": "Adds a new PerformanceModel",
        "operationId": "Performer_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Performer object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Performer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Stages/{id}": {
      "delete": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Delete a stage",
        "operationId": "Stage_DeleteEventLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the stage.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Stages": {
      "get": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Gets all living stages",
        "operationId": "Stage_GetStages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Stages/{stageId}/Performances": {
      "get": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Gets all living stage events for a specific property",
        "operationId": "Stage_GetLivingStagePerformances",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stageId",
            "in": "path",
            "description": "ID for a stage (place)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Stages": {
      "get": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Gets stages for a specific property",
        "operationId": "Stage_GetPropertyStages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Updates a stage",
        "operationId": "Stage_PutStage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Stage object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Adds a new stage",
        "operationId": "Stage_PostStage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Stage object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/LivingStage/Stages/{stageId}": {
      "get": {
        "tags": [
          "Living Stage Stages"
        ],
        "summary": "Gets a single living stage object",
        "operationId": "Stage_GetStage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place that owns stage",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stageId",
            "in": "path",
            "description": "Id for stage",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Localize culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.StageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/UIConfig": {
      "get": {
        "tags": [
          "Living Stage"
        ],
        "summary": "Gets the ui config for the living stage app",
        "operationId": "LivingStage_GetUiConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.LivingStageConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/LivingStage/Search": {
      "get": {
        "tags": [
          "Living Stage"
        ],
        "operationId": "LivingStage_Search",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get Locations by query.",
        "operationId": "Location_GetLocationByQuery",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Location.LocationCollectionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get Location by id.",
        "operationId": "Location_GetLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource Id of location",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Location.LocationResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/locations/{id}/verify": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get Location by Google place id.",
        "operationId": "Location_GetLocationByPlaceId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Google Place Id of location",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Location.LocationResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/{menuId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a top level menu object",
        "operationId": "Menu_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/{menuId}/Sections": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a list of sections owned by a menu",
        "operationId": "Menu_GetSections",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/Items/{menuItemId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a specific menu item",
        "operationId": "MenuItem_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuItemId",
            "in": "path",
            "description": "ID for menu item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/Items/{menuItemId}/Pairings": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets the item pairings for a specific item",
        "operationId": "MenuItem_GetPairings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuItemId",
            "in": "path",
            "description": "ID for menu item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/Items/{menuItemId}/Upsells": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Get the item upsells for a specific item",
        "operationId": "MenuItem_GetUpsells",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuItemId",
            "in": "path",
            "description": "ID for menu item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/{parentType}/{parentId}/menu_sections": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets all menu section objects",
        "operationId": "ExternalMenuSections_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu section object",
        "operationId": "ExternalMenuSections_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu section object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/{parentType}/{parentId}/menu_sections/{menuSectionId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu section object",
        "operationId": "ExternalMenuSections_GetFromParent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu section object",
        "operationId": "ExternalMenuSections_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu section object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Menus"
        ],
        "summary": "Delete a menu section object",
        "operationId": "ExternalMenuSections_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/menu_sections/{menuSectionId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu section object",
        "operationId": "ExternalMenuSections_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/menu_sections/{menuSectionId}/menu_section_items": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets all menu section item object",
        "operationId": "ExternalMenuSectionItems_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu section item object",
        "operationId": "ExternalMenuSectionItems_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu section item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/menu_sections/{menuSectionId}/menu_section_items/{menuSectionItemId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu section item object",
        "operationId": "ExternalMenuSectionItems_GetFromParent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionItemId",
            "in": "path",
            "description": "ID for menu section item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu section item object",
        "operationId": "ExternalMenuSectionItems_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionItemId",
            "in": "path",
            "description": "ID for menu section item",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu section item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Menus"
        ],
        "summary": "Delete a menu section item object",
        "operationId": "ExternalMenuSectionItems_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuSectionItemId",
            "in": "path",
            "description": "ID for menu section item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/menu_section_items/{menuSectionItemId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu section item object",
        "operationId": "ExternalMenuSectionItems_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuSectionItemId",
            "in": "path",
            "description": "ID for menu item section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/{parentType}/{parentId}/menus": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets all menu objects",
        "operationId": "ExternalMenus_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu object",
        "operationId": "ExternalMenus_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/{parentType}/{parentId}/menus/{menuId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu object",
        "operationId": "ExternalMenus_GetFromParent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Menus"
        ],
        "summary": "Create a menu object",
        "operationId": "ExternalMenus_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "menu object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Menus"
        ],
        "summary": "Delete a menu object",
        "operationId": "ExternalMenus_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "description": "ID for parent",
            "required": true,
            "type": "string"
          },
          {
            "name": "parentType",
            "in": "path",
            "description": "Parent type",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/menus/{menuId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu object",
        "operationId": "ExternalMenus_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/{sectionId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a menu section",
        "operationId": "MenuSection_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/{sectionId}/Items": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a list of items that belong to the section",
        "operationId": "MenuSection_GetItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Menus/Sections/{sectionId}/SubSections": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Gets a list of menu sections",
        "operationId": "MenuSection_GetChildrenSections",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sectionId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Themes/VisibilityTypes": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Gets a theme's visibility types",
        "operationId": "MobileHomeScreenMenu_GetVisibilityTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Themes/ScreenTypes": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Gets a theme's screen types",
        "operationId": "MobileHomeScreenMenu_GetScreenTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Themes/ButtonTypes": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Gets a properties enabled button types",
        "operationId": "MobileHomeScreenMenu_GetButtonTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Themes/LinkTypes": {
      "get": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_GetLinkTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMenu": {
      "get": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MobileMenu.Models.MobileHomeScreenButtonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "button",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.MobileMenu.Models.MobileHomeScreenLinkModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMenu/Enabled": {
      "get": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_GetEnabled",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MobileMenu.Models.MobileHomeScreenLinkModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMenu/Platforms": {
      "get": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_GetEnabledThemeButtons",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.MobileMenu.Models.MobileHomeScreenLinkModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMenu/{linkId}": {
      "delete": {
        "tags": [
          "Menu"
        ],
        "operationId": "MobileHomeScreenMenu_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "linkId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMore/{moreId}": {
      "get": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Get a single more item for a place.",
        "operationId": "MobileMore_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moreId",
            "in": "path",
            "description": "ID for more item",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Local culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Delete a new more item from a place.",
        "operationId": "MobileMore_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moreId",
            "in": "path",
            "description": "ID for more item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/MobileMore": {
      "get": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Get all more items for a place, as well as whether they are enabled or not",
        "operationId": "MobileMore_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Local culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMore": {
      "get": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Gets all mobile more buttons",
        "operationId": "MobileMore_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.MobileMore.MobileMoreBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Update a more item for a place.",
        "operationId": "MobileMore_PutMoreItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "More item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.MobileMore.MobileMoreBaseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Create a new more item for a place.",
        "operationId": "MobileMore_PostMoreItem",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "More item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.MobileMore.MobileMoreBaseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/MobileMore/{moreId}/{ordinal}": {
      "put": {
        "tags": [
          "Mobile More"
        ],
        "summary": "Update a more item's ordinal for a place.",
        "operationId": "MobileMore_PutMoreItemOrdinal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moreId",
            "in": "path",
            "description": "ID for more item",
            "required": true,
            "type": "string"
          },
          {
            "name": "ordinal",
            "in": "path",
            "description": "New ordinal value for more item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/Condition/Status": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets condition statuses",
        "operationId": "Nav_GetConditionStatusType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Enums.DescriptiveEnumModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/Menu/Type": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets nav menu types",
        "operationId": "Nav_GetNavMenuType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Enums.DescriptiveEnumModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/Condition/Operators": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets conditional operators",
        "operationId": "Nav_GetConditionOperatorsType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Enums.DescriptiveEnumModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/Mobile": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets nav menus for mobile",
        "operationId": "Nav_QueryMobile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavItemPlatformModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/Mobile/Type": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets nav menus for mobile by nav menu type",
        "operationId": "Nav_GetByNavMenuType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Nav Menu Type",
            "required": true,
            "type": "string",
            "enum": [
              "Explore",
              "HowCanIHelp",
              "Home",
              "TabBar",
              "More",
              "Brand"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavItemPlatformModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets all nav menus for a place",
        "operationId": "Nav_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavMenuModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Navigation"
        ],
        "summary": "Update Nav Menu for a place",
        "operationId": "Nav_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Nav Menu Model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavMenuModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavMenuModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Navigation"
        ],
        "summary": "Adds new Nav Menu",
        "operationId": "Nav_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Nav Menu Model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavMenuModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavMenuModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/GetEnabled": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Gets enabled nav items for a place",
        "operationId": "Nav_GetEnabledNavItems",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Enums.DescriptiveEnumModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Navigation/{navMenuId}": {
      "delete": {
        "tags": [
          "Navigation"
        ],
        "summary": "Deletes entire nav menu",
        "operationId": "Nav_DeleteConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "navMenuId",
            "in": "path",
            "description": "Nav Menu REFID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms/{roomId}/Outlet/{deviceId}": {
      "get": {
        "tags": [
          "Outlet"
        ],
        "operationId": "IoT_GetOutlet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Outlet"
        ],
        "operationId": "IoT_ConfigureOutlet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/pmsEnabled": {
      "get": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Does property have a PMS integration enabled?",
        "operationId": "OwsCheckin_ExternalPmsEnabled",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true endpoint returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/place/{placeId}/pmsenabled": {
      "get": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Get a bool for if that place has a pms system.",
        "operationId": "OwsCheckin_GetPMSEnabled",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/stay/{stayId}": {
      "get": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Get the stay details of the",
        "operationId": "OwsCheckin_GetStayDetailsByProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "string"
          },
          {
            "name": "stayId",
            "in": "path",
            "description": "Id of the stay",
            "required": true,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/place/{placeId}/stay/{stayId}": {
      "get": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Get the stay details of the",
        "operationId": "OwsCheckin_GetStayDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stayId",
            "in": "path",
            "description": "Id of the stay",
            "required": true,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Optional, helps filter integration stays in HR",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Optional, helps filter integration stays in HR",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/users/me/places/{placeId}/stay/{stayId}": {
      "get": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "operationId": "OwsCheckin_GetUserStayDetails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stayId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/checkin": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Check in based on a validation object and a propertyKey",
        "operationId": "OwsCheckin_CheckinByProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "validation",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/place/{placeId}/checkin": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Check in based on a validation object",
        "operationId": "OwsCheckin_CheckinByPlace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validation",
            "in": "body",
            "description": "Validation Object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/users/me/places/{placeId}/checkin": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "operationId": "OwsCheckin_CheckinLoggedInUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/place/{placeId}/checkout": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Checkout specified user from a specified stay at the specified property",
        "operationId": "OwsCheckin_CheckoutByPlace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validation",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/checkout": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Checkout user from a specified stay at the specified property",
        "operationId": "OwsCheckin_CheckoutByProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "validation",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/users/me/places/{placeId}/checkout": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "",
        "operationId": "OwsCheckin_CheckoutLoggedInUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validation",
            "in": "body",
            "description": "Post body object with validation and options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "optional for demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/checkin/updateQueue": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "operationId": "OwsCheckin_CheckQueueCheckinStatus",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "refId",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/roomavailablity": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Gets available rooms",
        "operationId": "OwsCheckin_CheckRoomAvailability",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "options",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Room.RoomAvailabilityOptions"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/place/{placeId}/roomavailablity": {
      "post": {
        "tags": [
          "OWS Checkin Routes"
        ],
        "summary": "Gets Available Rooms",
        "operationId": "OwsCheckin_CheckRoomAvailabilityByPlace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Room.RoomAvailabilityOptions"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, if true returns demo data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/PersonalDevices/Manufacturers/{manufacturerId}": {
      "get": {
        "tags": [
          "Personal Device Manufacturers"
        ],
        "summary": "Get personal device manufacturer.",
        "operationId": "PersonalDeviceManufacturer_GetPersonalDeviceManufacturer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "manufacturerId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceManufacturerModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/PersonalDevices/Manufacturers": {
      "get": {
        "tags": [
          "Personal Device Manufacturers"
        ],
        "summary": "List personal device manufacturers.",
        "operationId": "PersonalDeviceManufacturer_GetPersonalDeviceManufacturers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceManufacturerModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Personal Device Manufacturers"
        ],
        "summary": "Add or update personal device manufacturer.",
        "operationId": "PersonalDeviceManufacturer_PutPersonalDeviceManufacturer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "manufacturer",
            "in": "body",
            "description": "Personal device manufacturer to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceManufacturerModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/PersonalDevices/Models/{modelId}": {
      "get": {
        "tags": [
          "Personal Device Models"
        ],
        "summary": "Get personal device model.",
        "operationId": "PersonalDeviceModel_GetPersonalDeviceModel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceModelModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/PersonalDevices/Models": {
      "get": {
        "tags": [
          "Personal Device Models"
        ],
        "summary": "List personal device models.",
        "operationId": "PersonalDeviceModel_GetPersonalDeviceModels",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceModelModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Personal Device Models"
        ],
        "summary": "Add or update personal device model.",
        "operationId": "PersonalDeviceModel_PutPersonalDeviceModel",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Personal device model to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceModelModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PhoneNumbers/Available": {
      "post": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Gets a list of available twilio numbers.",
        "operationId": "PhoneNumber_GetAvailableTwilioNumbers",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "body",
            "description": "Query model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.PhoneNumberQueryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.AvailablePhoneNumberModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PhoneNumbers/Countries": {
      "get": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Gets Available Twilio Countries for pricing.",
        "operationId": "PhoneNumber_GetAvailableTwilioCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.TwilioCountryModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PhoneNumbers": {
      "get": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Gets a list of registered twilio incoming numbers for account.",
        "operationId": "PhoneNumber_GetIncomingNumberForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.IncomingPhoneNumberModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Adds a twilio number.",
        "operationId": "PhoneNumber_AddIncomingNumber",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "number options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.PhoneNumberOptionsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.IncomingPhoneNumberModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PhoneNumbers/{sid}": {
      "get": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Gets an incoming number by SID.",
        "operationId": "PhoneNumber_GetIncomingNumber",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sid",
            "in": "path",
            "description": "Id for number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.IncomingPhoneNumberModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Updates a twilio number.",
        "operationId": "PhoneNumber_UpdateIncomingNumber",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sid",
            "in": "path",
            "description": "Id of number",
            "required": true,
            "type": "string"
          },
          {
            "name": "options",
            "in": "body",
            "description": "number options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.PhoneNumberOptionsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.TwilioSMS.Models.IncomingPhoneNumberModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Deletes a twilio number by its sid.",
        "operationId": "PhoneNumber_DeleteIncomingNumber",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sid",
            "in": "path",
            "description": "Id for number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PhoneNumbers/Number/{number}": {
      "delete": {
        "tags": [
          "PhoneNumber"
        ],
        "summary": "Deletes a twilio number by its number.",
        "operationId": "PhoneNumber_DeleteIncomingNumberByNumber",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "number",
            "in": "path",
            "description": "String for number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Amenities/{amenityId}": {
      "get": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Gets an amenity for a place by its id.",
        "operationId": "PlaceAmenity_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "path",
            "description": "ID for Amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Creates an amenity's ordinal for a place.",
        "operationId": "PlaceAmenity_UpdateOrdinal",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amenityId",
            "in": "path",
            "description": "ID for Amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ordinal",
            "in": "query",
            "description": "New ordinal value for Amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Deletes amenity from a place.",
        "operationId": "PlaceAmenity_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "path",
            "description": "ID for Amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Amenities": {
      "get": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Gets all amenities for a place.",
        "operationId": "PlaceAmenity_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "Filter amenities that have expired offers",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Updates an amenity for a place.",
        "operationId": "PlaceAmenity_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amenity",
            "in": "body",
            "description": "Amenity object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Creates an amenity for a place.",
        "operationId": "PlaceAmenity_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amenity",
            "in": "body",
            "description": "Amenity object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Place/{placeId}/Amenities": {
      "get": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Gets all amenities for a place.",
        "operationId": "PlaceAmenity_QueryCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id for category",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Filter out inactives",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "Filter by offer dates",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "categoryRefid",
            "in": "query",
            "description": "Refid for category",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Categories/{categoryId}/Features": {
      "get": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Gets all amenities for a category for a place",
        "operationId": "PlaceAmenity_QueryCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "UUID for category",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Filter out inactives",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "Filter by offer dates",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Place/{placeId}/Amenities/Reorder": {
      "put": {
        "tags": [
          "Place Amenities"
        ],
        "summary": "Update the list of amenities",
        "operationId": "PlaceAmenity_UpdateReorderList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reorders",
            "in": "body",
            "description": "List of amenities to be reordered",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityListModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Amenities/DominosOrder": {
      "post": {
        "tags": [
          "Place Amenities"
        ],
        "operationId": "PlaceAmenity_MakeDiningOrder",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Amenities/TrackOrder": {
      "get": {
        "tags": [
          "Place Amenities"
        ],
        "operationId": "PlaceAmenity_GetTrackingInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "trackingNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Place/{placeId}/Amenities/Categories": {
      "get": {
        "tags": [
          "Place Amenity Categories"
        ],
        "summary": "Return all Categories for a place. Does not return children.",
        "operationId": "PlaceAmenityCategory_GetAllCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Amenity Categories"
        ],
        "operationId": "PlaceAmenityCategory_UpdateCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityCategoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Amenity Categories"
        ],
        "operationId": "PlaceAmenityCategory_CreateCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityCategoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Place/{placeId}/Amenities/Categories/{categoryId}": {
      "get": {
        "tags": [
          "Place Amenity Categories"
        ],
        "summary": "Return a single Category. Does not return children",
        "operationId": "PlaceAmenityCategory_GetCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Amenity Categories"
        ],
        "operationId": "PlaceAmenityCategory_DeleteCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Place/{placeId}/Amenities/Categories/{categoryId}/Children": {
      "get": {
        "tags": [
          "Place Amenity Categories"
        ],
        "summary": "Gets a list of features tied to a category",
        "operationId": "PlaceAmenityCategory_GetChildren",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id for feature category",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filterOffers",
            "in": "query",
            "description": "Filter by offer status",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Features.Models.AmenityListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/GeneralStats": {
      "get": {
        "tags": [
          "Place Analytics"
        ],
        "summary": "Get general analytical statistics for a place.",
        "operationId": "PlaceAnalytic_GetGeneralStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Optional culture parameter (eg. EN-US) - NOT SUPPORTED.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.GeneralStatsModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/RequestStats": {
      "get": {
        "tags": [
          "Place Analytics"
        ],
        "summary": "Get request-related statistics for a place.",
        "operationId": "PlaceAnalytic_GetRequestStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Optional culture parameter (eg. EN-US) - NOT SUPPORTED.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.RequestStatsModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Past24HourClickCounts": {
      "get": {
        "tags": [
          "Place Analytics"
        ],
        "summary": "Get click statistics from the past 24 hours for a place.",
        "operationId": "PlaceAnalytic_GetLast24HoursClickStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Optional culture parameter (eg. EN-US) - NOT SUPPORTED.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.ClickStatsModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/beacons": {
      "get": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "List Place Beacons",
        "operationId": "Beacon_GetBeacons",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Add a new Beacon.",
        "operationId": "Beacon_PostBeacon",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beacon",
            "in": "body",
            "description": "Beacon properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/beacons/{beaconId}": {
      "get": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Get Place Beacon",
        "operationId": "Beacon_GetBeacon",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconId",
            "in": "path",
            "description": "Id of beacon",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Update a Beacon.",
        "operationId": "Beacon_PutBeacon",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconId",
            "in": "path",
            "description": "Id of the Beacon.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beacon",
            "in": "body",
            "description": "Beacon properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Beacon.BeaconModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Delete a Beacon.",
        "operationId": "Beacon_DeleteBeacon",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconId",
            "in": "path",
            "description": "Id of the Beacon.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/beacons/campaigns": {
      "get": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Get all beacon campaigns for a place.",
        "operationId": "Beacon_GetBeaconCampaigns",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Add a new Beacon Campaign.",
        "operationId": "Beacon_PostBeaconCampaign",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconCampaign",
            "in": "body",
            "description": "Beacon Campaign properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/beacons/campaigns/{beaconCampaignId}": {
      "get": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Get beacon campaign for a place.",
        "operationId": "Beacon_GetBeaconCampaign",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconCampaignId",
            "in": "path",
            "description": "Id of the beacon campaign",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Update a new Beacon Campaign.",
        "operationId": "Beacon_PutBeaconCampaign",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconCampaignId",
            "in": "path",
            "description": "Id of the beacon campaign",
            "required": true,
            "type": "string"
          },
          {
            "name": "beaconCampaign",
            "in": "body",
            "description": "Beacon Campaign properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Beacons"
        ],
        "summary": "Delete a Beacon Campaign.",
        "operationId": "Beacon_DeleteBeaconCampaign",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "beaconCampaignId",
            "in": "path",
            "description": "Id of the Beacon Campaign.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Platform/ConfigTypes": {
      "get": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Gets all configuration types",
        "operationId": "PlacePlatform_GetConfigTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Platform/OptionTypes": {
      "get": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Gets all option types",
        "operationId": "PlacePlatform_GetOptionTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "enum": [
                  0,
                  1,
                  2
                ],
                "type": "integer"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Platform": {
      "get": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Gets an array of platform configs for all types",
        "operationId": "PlacePlatform_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Platform.Models.PlatformConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Updates a list of platform type configs",
        "operationId": "PlacePlatform_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "configs",
            "in": "body",
            "description": "Array of platformtype cofiguration settings",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Platform.Models.PlatformConfigModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Adds new platform configuration settings",
        "operationId": "PlacePlatform_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "configs",
            "in": "body",
            "description": "Array of configuration settings",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Platform.Models.PlatformConfigModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Platform.Models.PlatformConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Place/{placeId}/Platform/{platformType}": {
      "get": {
        "tags": [
          "Place Configs"
        ],
        "summary": "Gets an array of platform configs for a specific platform type",
        "operationId": "PlacePlatform_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "platformType",
            "in": "path",
            "description": "Enum for platform type",
            "required": true,
            "type": "string",
            "enum": [
              "Web",
              "Andriod",
              "Ios",
              "Lobby",
              "Other",
              "Tv"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Platform.Models.PlatformConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EnterpriseLocations/{enterpriseLocationId}/Tips": {
      "get": {
        "tags": [
          "Place Enterprise Location Tips"
        ],
        "summary": "Get tips for an enterprise location.",
        "operationId": "PlaceEnterpriseLocation_GetEnterpriseLocationInsiderTips",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Preferred language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Enterprise Location Tips"
        ],
        "summary": "Add a new tip to an enterprise location",
        "operationId": "PlaceEnterpriseLocation_PostEnterpriseLocationInsiderTip",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tip",
            "in": "body",
            "description": "Tip object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipUpdateModel"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Preferred language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EnterpriseLocations/{enterpriseLocationId}/Tips/{tipId}": {
      "get": {
        "tags": [
          "Place Enterprise Location Tips"
        ],
        "summary": "Get an enterprise location tip.",
        "operationId": "PlaceEnterpriseLocation_GetEnterpriseLocationInsiderTip",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tipId",
            "in": "path",
            "description": "Id of the tip",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Preferred language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Enterprise Location Tips"
        ],
        "summary": "Update an enterprise location tip",
        "operationId": "PlaceEnterpriseLocation_PutEnterpriseLocationInsiderTip",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tipId",
            "in": "path",
            "description": "Id of the tip",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tip",
            "in": "body",
            "description": "Tip object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipUpdateModel"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Preferred language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Enterprise Location Tips"
        ],
        "summary": "Delete an enterprise location tip",
        "operationId": "PlaceEnterpriseLocation_DeleteEnterpriseLocationInsiderTip",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tipId",
            "in": "path",
            "description": "Id of the tip",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/HiddenEnterpriseLocations": {
      "get": {
        "tags": [
          "Place Enterprise Locations (Hidden)"
        ],
        "summary": "Get hidden enterprise locations for device",
        "operationId": "PlaceEnterpriseLocation_GetHiddenLocations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The current page number of the results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of records to return per page.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EnterpriseLocations/{enterpriseLocationId}/Hide": {
      "post": {
        "tags": [
          "Place Enterprise Locations"
        ],
        "summary": "Hide enterprise location from device",
        "operationId": "PlaceEnterpriseLocation_HideEnterpriseLocationFromDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/EnterpriseLocations/{enterpriseLocationId}/Show": {
      "delete": {
        "tags": [
          "Place Enterprise Locations"
        ],
        "summary": "Un-hide enterprise location on device",
        "operationId": "PlaceEnterpriseLocation_ShowEnterpriseLocationOnDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/{eventId}": {
      "get": {
        "tags": [
          "Place Events"
        ],
        "summary": "DEPRECATED - Get event.",
        "description": "This method has been DEPRECATED. Use: /v1/events/{id}",
        "operationId": "Event_GetEvent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the event's parent place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the event.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events": {
      "get": {
        "tags": [
          "Place Events"
        ],
        "summary": "DEPRECATED - List events.",
        "description": "This method has been DEPRECATED. Use: /v2/places/{placeId}/events",
        "operationId": "Event_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the event's parent place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/Groups": {
      "get": {
        "tags": [
          "Place Events"
        ],
        "summary": "List events by group.",
        "operationId": "Event_GetEventsByGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the event's parent place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroupModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/Validate/Passwords": {
      "post": {
        "tags": [
          "Place Events"
        ],
        "summary": "DEPRECATED - Validate a event password.",
        "description": "This method has been DEPRECATED. Use: /v1/places/{placeId}/events/actions/validate",
        "operationId": "Event_PostEventPasswordValidate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the event's parent place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for the event group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Events/Validate/GUIDs": {
      "post": {
        "tags": [
          "Place Events"
        ],
        "summary": "DEPRECATED - Validate a event GUID.",
        "description": "This method has been DEPRECATED. Use: /v1/eventgroups/actions/validate",
        "operationId": "Event_PostEventGUIDValidate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the event's parent place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "guid",
            "in": "query",
            "description": "GUID for the event group.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventUrlModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Maps/{mapId}": {
      "get": {
        "tags": [
          "Place Maps"
        ],
        "summary": "Get map.",
        "operationId": "Map_GetMap",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "mapId",
            "in": "path",
            "description": "Id of the map.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Map.MapModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Maps"
        ],
        "summary": "Delete map.",
        "operationId": "Map_DeleteMap",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "mapId",
            "in": "path",
            "description": "Id of the map.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Maps": {
      "get": {
        "tags": [
          "Place Maps"
        ],
        "summary": "List maps.",
        "operationId": "Map_GetMaps",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Map.MapModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Maps"
        ],
        "summary": "Add or update a map.",
        "operationId": "Map_PutMap",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "map",
            "in": "body",
            "description": "Map to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Map.MapModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Maps/Reorder": {
      "put": {
        "tags": [
          "Place Maps"
        ],
        "summary": "Reorder Maps.",
        "operationId": "Map_PutMapsReorder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maps",
            "in": "body",
            "description": "Ordered list of maps",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Map.MapBaseModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}/Section/{sectionId}/Items/{menuItemId}": {
      "get": {
        "tags": [
          "Place Menu Items"
        ],
        "summary": "Gets a specific menu item by its id",
        "operationId": "PlaceMenuItem_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuItemId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}/Section/{sectionId}/Items": {
      "get": {
        "tags": [
          "Place Menu Items"
        ],
        "summary": "Gets items for a specific menu.",
        "operationId": "PlaceMenuItem_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "menuId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}/POS": {
      "get": {
        "tags": [
          "Place Menu POS"
        ],
        "summary": "Calculate the total for a POS system.",
        "operationId": "MenuPOS_GetMenuPOSTotal",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "Id of the menu.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cart",
            "in": "body",
            "description": "Cart Model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.CartModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.TotalModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Place Menu POS"
        ],
        "summary": "Place an order to a POS system.",
        "operationId": "MenuPOS_PostMenuPOSOrder",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "Id of the menu.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the requester.",
            "required": true,
            "type": "string"
          },
          {
            "name": "room",
            "in": "query",
            "description": "Room of the requester.",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkoutDateMs",
            "in": "query",
            "description": "Checkout DateTime in total milliseconds.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.OrderModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}/Sections/{sectionId}": {
      "get": {
        "tags": [
          "Place Menu Sections"
        ],
        "summary": "Gets a specific menu section.",
        "operationId": "PlaceMenuSection_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "ID for menu section",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}/Sections": {
      "get": {
        "tags": [
          "Place Menu Sections"
        ],
        "summary": "Gets the menu sections for a specific place and menu",
        "operationId": "PlaceMenuSection_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus": {
      "get": {
        "tags": [
          "Place Menus"
        ],
        "summary": "List menus.",
        "operationId": "PlaceMenu_GetMenus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeFeatureMenus",
            "in": "query",
            "description": "Include feature menus",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Menus/{menuId}": {
      "get": {
        "tags": [
          "Place Menus"
        ],
        "summary": "Get menu.",
        "operationId": "PlaceMenu_GetMenu",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "Id of the menu.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Menus"
        ],
        "summary": "Delete menu.",
        "operationId": "PlaceMenu_DeleteMenu",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "Id of the menu.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs": {
      "get": {
        "tags": [
          "Place Message SMS Jobs"
        ],
        "summary": "List SMS jobs.",
        "operationId": "MessageSMSJob_GetMessageSMSJobs",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsJobModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Message SMS Jobs"
        ],
        "summary": "Add or update SMS job.",
        "operationId": "MessageSMSJob_PutMessageSMSJob",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "job",
            "in": "body",
            "description": "SMS Job to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsJobModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}": {
      "get": {
        "tags": [
          "Place Message SMS Jobs"
        ],
        "summary": "Get SMS job.",
        "operationId": "MessageSMSJob_GetMessageSMSJob",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsJobModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Retry": {
      "post": {
        "tags": [
          "Place Message SMS Jobs"
        ],
        "summary": "Retry SMS job.",
        "operationId": "MessageSMSJob_PostRetryMessageSMSJob",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Cancel": {
      "post": {
        "tags": [
          "Place Message SMS Jobs"
        ],
        "summary": "Cancel SMS job.",
        "operationId": "MessageSMSJob_PostCancelMessageSMSJob",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/StockMessages": {
      "get": {
        "tags": [
          "Place Message SMS Stock Messages"
        ],
        "summary": "List SMS stock messages.",
        "operationId": "MessageSMSStockMessage_GetMessageSmsStockMessages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsStockMessageModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Message SMS Stock Messages"
        ],
        "summary": "Add or update SMS stock message.",
        "operationId": "MessageSMSStockMessage_PutMessageSMSTask",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "body",
            "description": "SMS Stock Message to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsStockMessageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/StockMessages/{messageId}": {
      "get": {
        "tags": [
          "Place Message SMS Stock Messages"
        ],
        "summary": "Get SMS stock message.",
        "operationId": "MessageSMSStockMessage_GetMessageSmsStockMessage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Id of the SMS stock message.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsStockMessageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Message SMS Stock Messages"
        ],
        "summary": "Delete SMS stock message",
        "operationId": "MessageSMSStockMessage_DeleteMessageSMSTask",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Id of the SMS stock message.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Tasks": {
      "get": {
        "tags": [
          "Place Message SMS Tasks"
        ],
        "summary": "List SMS Tasks.",
        "operationId": "MessageSMSTask_GetMessageSMSTasks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsTaskModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Tasks/{taskId}": {
      "get": {
        "tags": [
          "Place Message SMS Tasks"
        ],
        "summary": "Get SMS task.",
        "operationId": "MessageSMSTask_GetMessageSMSTask",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Id of the SMS task.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsTaskModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Tasks/{taskId}/Retry": {
      "post": {
        "tags": [
          "Place Message SMS Tasks"
        ],
        "summary": "Retry SMS task.",
        "operationId": "MessageSMSTask_PostRetryMessageSMSTask",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Id of the SMS task.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/SMS/Jobs/{jobId}/Tasks/{taskId}/Cancel": {
      "post": {
        "tags": [
          "Place Message SMS Tasks"
        ],
        "summary": "Cancel SMS task.",
        "operationId": "MessageSMSTask_PostCancelMessageSMSTask",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Id of the SMS job.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "Id of the SMS task.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages/{messageId}": {
      "get": {
        "tags": [
          "Place Messages"
        ],
        "summary": "Get message.",
        "operationId": "Message_GetMessage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.MessageModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Messages"
        ],
        "summary": "Delete message.",
        "operationId": "Message_DeleteMmessage",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Messages": {
      "get": {
        "tags": [
          "Place Messages"
        ],
        "summary": "List messages.",
        "operationId": "Message_GetMessages",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Message.MessageModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Messages"
        ],
        "summary": "Put message.",
        "operationId": "Message_PutMessage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "body",
            "description": "Message to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Message.MessageModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/NearbyEnterpriseLocations/Categories": {
      "get": {
        "tags": [
          "Place Nearby Enterprise Location Categories"
        ],
        "summary": "Get a list of nearby enterprise locations.",
        "operationId": "PlaceEnterpriseLocation_GetNearbyEnterpriseLocationCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseListResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/NearbyEnterpriseLocations": {
      "get": {
        "tags": [
          "Place Nearby Enterprise Locations"
        ],
        "summary": "Get a list of nearby enterprise locations.",
        "operationId": "PlaceEnterpriseLocation_GetNearbyEnterpriseLocations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Restrict results to a specific category id.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search locations",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by field of the search results. Current values are 'distance', 'dollar_range', or 'name'.",
            "required": false,
            "type": "string",
            "default": "distance"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order of the search results. Current values are 'ascending' or 'descending'.",
            "required": false,
            "type": "string",
            "default": "ascending"
          },
          {
            "name": "includeRecommended",
            "in": "query",
            "description": "Include already recommended locations in the results.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeBlackListed",
            "in": "query",
            "description": "Include blacklisted locations in the results.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The current page number of the results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of records to return per page.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseListResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Overrides/{overrideId}": {
      "get": {
        "tags": [
          "Place Overrides"
        ],
        "summary": "Get place overrides.",
        "operationId": "PlaceOverride_GetPlaceOverride",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "overrideId",
            "in": "path",
            "description": "Id of the place override.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceOverrideModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Overrides"
        ],
        "summary": "Delete place override.",
        "operationId": "PlaceOverride_DeletePlaceOverride",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "overrideId",
            "in": "path",
            "description": "Id of the place override.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Overrides": {
      "get": {
        "tags": [
          "Place Overrides"
        ],
        "summary": "List place overrides.",
        "operationId": "PlaceOverride_GetPlaceOverrides",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceOverrideModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Overrides"
        ],
        "summary": "Add or update a place override.",
        "operationId": "PlaceOverride_PutPlaceOverride",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeOverride",
            "in": "body",
            "description": "Place override to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceOverrideModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Ratings/{ratingId}": {
      "get": {
        "tags": [
          "Place Ratings"
        ],
        "summary": "Get rating.",
        "operationId": "PlaceRating_GetPlaceRating",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Ratings"
        ],
        "summary": "Delete rating.",
        "operationId": "PlaceRating_DeletePlaceRating",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Ratings": {
      "get": {
        "tags": [
          "Place Ratings"
        ],
        "summary": "List ratings.",
        "operationId": "PlaceRating_GetPlaceRatings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Ratings"
        ],
        "summary": "Add or update a rating.",
        "operationId": "PlaceRating_PutPlaceRating",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "rating",
            "in": "body",
            "description": "Rating to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Recommendations/Categories": {
      "get": {
        "tags": [
          "Place Recommendation Categories"
        ],
        "summary": "List of recommendation categories for a place.",
        "operationId": "PlaceRecommendationCategory_GetRecommendedCategoriesList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "(Optional) Include inactive categories for a place.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeLocationCount",
            "in": "query",
            "description": "(Optional) Include location recommendation counts for category.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "lang",
            "in": "query",
            "description": "(Optional) Language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.Recommendations.RecommendedCategoryModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Recommendations/Categories": {
      "get": {
        "tags": [
          "Place Recommendation Categories"
        ],
        "summary": "Gets recommendation categories in their simple list format",
        "operationId": "PlaceRecommendationCategory_GetRecommendationCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Language parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of data to grab, 1 indexed",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of records to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Recommendations.Models.RecommendationCategoryDisplayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Recommendations/Categories/{categoryId}": {
      "put": {
        "tags": [
          "Place Recommendation Categories"
        ],
        "summary": "Updates a category for a place.",
        "operationId": "PlaceRecommendationCategory_UpdateRecommendedCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryModel",
            "in": "body",
            "description": "Category object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.Recommendations.RecommendedCategoryUpdateModel"
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "(Optional) Language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Recommendations": {
      "get": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "List of recommended enterprises by category for a place.",
        "operationId": "PlaceRecommendation_GetRecommendedEnterprises",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id of the category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "(Optional) Language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Recommendations/Categories/{categoryId}": {
      "get": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Gets a simple list of recommendations",
        "operationId": "PlaceRecommendation_GetRecommendationsByCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "[Not Suppported]",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of data to load, 1 indexed",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of record to load",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Recommendations.Models.RecommendationDisplayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Recommendations/{enterpriseLocationId}": {
      "get": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Returns a recommended enterprise by id for a place.",
        "operationId": "PlaceRecommendation_GetRecommendedEnterprise",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "(Optional) Language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Update an enterprise location recommendation by category for a place.",
        "operationId": "PlaceRecommendation_UpdateEnterpriseRecommendation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id of the category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "recommendationModel",
            "in": "body",
            "description": "Recommendation object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.EnterpriseRecommendationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SuggestLocation": {
      "post": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Suggest a new location for recommendation by place.",
        "operationId": "PlaceRecommendation_SuggestLocation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "emailModel",
            "in": "body",
            "description": "Email message object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.PlainTextEmailModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Recommend/{enterpriseLocationId}": {
      "put": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Recommend an enterprise for a place by enterprise location id.",
        "operationId": "PlaceRecommendation_PutEnterpriseRecommendation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryIds",
            "in": "body",
            "description": "List of category ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Reorder": {
      "put": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Reset the ordinals of an enterprise location recommendation list by category for a place.",
        "operationId": "PlaceRecommendation_ReorderEnterpriseRecommendations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id of the category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Unrecommend/{enterpriseLocationId}": {
      "put": {
        "tags": [
          "Place Recommendations"
        ],
        "summary": "Delete an enterprise location recommendation by id for a place.",
        "operationId": "PlaceRecommendation_DeleteEnterpriseRecommendation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "Id of the enterprise location.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryIds",
            "in": "body",
            "description": "List of category ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Relations/{relatedPlaceId}": {
      "put": {
        "tags": [
          "Place Relations"
        ],
        "summary": "Add a place relation.",
        "operationId": "PlaceRelation_PutPlaceRelation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relatedPlaceId",
            "in": "path",
            "description": "Id of the related place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Relations"
        ],
        "summary": "Delete place relation.",
        "operationId": "PlaceRelation_DeletePlaceRelation",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relatedPlaceId",
            "in": "path",
            "description": "Id of the related place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Relations": {
      "get": {
        "tags": [
          "Place Relations"
        ],
        "summary": "List place relations.",
        "operationId": "PlaceRelation_GetPlaceRelations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "The place type. Can be amenity or enterprise.",
            "required": true,
            "type": "string",
            "enum": [
              "Unknown",
              "Amenity",
              "Enterprise",
              "Hotel"
            ]
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceHackBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Requests": {
      "get": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Runs request report",
        "operationId": "RequestAnalytic_GetRequestReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses to include ( null = all statuses )",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NEW",
                "ACK",
                "CLOSED",
                "ARCHIVED",
                "DELETED",
                "PENDING_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fromMs",
            "in": "query",
            "description": "From datetime in ms since the epoch - defaults to 1 month ago",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toMs",
            "in": "query",
            "description": "to datetime in ms since the epoch - defaults to now",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id of the Category",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Id of the Template",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "assignedGroupId",
            "in": "query",
            "description": "Id of the assigned group",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "assignedUserId",
            "in": "query",
            "description": "Id of the assigned user",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "closeByUserId",
            "in": "query",
            "description": "Id of the closed by user",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "guestName",
            "in": "query",
            "description": "The guest name",
            "required": false,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "The room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search message text ( not supported )",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.RequestReportItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Requests/Export": {
      "get": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Exports request report",
        "operationId": "RequestAnalytic_GetRequestReportExport",
        "consumes": [],
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses to include ( null = all statuses )",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NEW",
                "ACK",
                "CLOSED",
                "ARCHIVED",
                "DELETED",
                "PENDING_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fromMs",
            "in": "query",
            "description": "From datetime in ms since the epoch - defaults to 1 month ago",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toMs",
            "in": "query",
            "description": "to datetime in ms since the epoch - defaults to now",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Id of the Category",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Id of the Template",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "assignedGroupId",
            "in": "query",
            "description": "Id of the assigned group",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "assignedUserId",
            "in": "query",
            "description": "Id of the assigned user",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "closeByUserId",
            "in": "query",
            "description": "Id of the closed by user",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "guestName",
            "in": "query",
            "description": "The guest name",
            "required": false,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "The room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search message text ( not supported )",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Requests/Favorites/{favoriteId}": {
      "get": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Get request report favorite",
        "operationId": "RequestAnalytic_GetRequestReportFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.RequestReportModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Delete request report favorite.",
        "operationId": "RequestAnalytic_DeleteRequestReportFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Requests/Favorites": {
      "get": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "List request report favorites.",
        "operationId": "RequestAnalytic_GetRequestReportFavorites",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.RequestReportModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Add or update a request report favorite.",
        "operationId": "RequestAnalytic_PutRequestReportFavorite",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favorite",
            "in": "body",
            "description": "Request report favorite to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.RequestReportModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Analytics/Requests/Favorites/Reorder": {
      "put": {
        "tags": [
          "Place Request Analytics"
        ],
        "summary": "Reorder request report favorites.",
        "operationId": "RequestAnalytic_PutRequestReportFavoritesReorder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favorites",
            "in": "body",
            "description": "Ordered list of request report favorites",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.ReportBaseModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Categories/{categoryId}": {
      "get": {
        "tags": [
          "Place Request Categories"
        ],
        "summary": "Get request category.",
        "operationId": "RequestCategory_GetRequestCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the reqeust category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Categories"
        ],
        "summary": "Delete request category.",
        "operationId": "RequestCategory_DeleteRequestCategory",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the reqeust category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Categories": {
      "get": {
        "tags": [
          "Place Request Categories"
        ],
        "summary": "List request categories.",
        "operationId": "RequestCategory_GetRequestCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Categories"
        ],
        "summary": "Add or update a request category.",
        "operationId": "RequestCategory_PutRequestCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "category",
            "in": "body",
            "description": "Request category to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Groups/{groupId}": {
      "get": {
        "tags": [
          "Place Request Groups"
        ],
        "summary": "Get request group.",
        "operationId": "RequestGroup_GetRequestGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "The id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The id of the request group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Groups"
        ],
        "summary": "Delete request group",
        "operationId": "RequestGroup_DeleteGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Groups": {
      "get": {
        "tags": [
          "Place Request Groups"
        ],
        "summary": "List request groups.",
        "operationId": "RequestGroup_GetRequestGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "The id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Groups"
        ],
        "summary": "Insert or update request group",
        "operationId": "RequestGroup_PutRequestGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "group",
            "in": "body",
            "description": "Group to be added or updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/EtaActions/{etaActionId}": {
      "get": {
        "tags": [
          "Place Request Template Eta Actions"
        ],
        "summary": "Get request guest etaAction.",
        "operationId": "RequestTemplateEtaAction_GetRequestTemplateEtaAction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaActionId",
            "in": "path",
            "description": "Id of the request guest etaAction.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.EtaAction.RequestTemplateEtaActionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Template Eta Actions"
        ],
        "summary": "Delete request guest etaAction.",
        "operationId": "RequestTemplateEtaAction_DeleteRequestTemplateEtaAction",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaActionId",
            "in": "path",
            "description": "Id of the request guest etaAction.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/EtaActions": {
      "get": {
        "tags": [
          "Place Request Template Eta Actions"
        ],
        "summary": "List request guest etaActions.",
        "operationId": "RequestTemplateEtaAction_GetRequestTemplateEtaActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.EtaAction.RequestTemplateEtaActionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Template Eta Actions"
        ],
        "summary": "Add or update a request guest etaAction.",
        "operationId": "RequestTemplateEtaAction_PutRequestTemplateEtaAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaAction",
            "in": "body",
            "description": "Request guest etaAction to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.EtaAction.RequestTemplateEtaActionModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Triggers/{triggerId}": {
      "get": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Get request guest trigger.",
        "operationId": "RequestTemplateTrigger_GetRequestTemplateTrigger",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "triggerId",
            "in": "path",
            "description": "Id of the request guest trigger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Trigger.RequestTemplateTriggerModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Delete request guest trigger.",
        "operationId": "RequestTemplateTrigger_DeleteRequestTemplateTrigger",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "triggerId",
            "in": "path",
            "description": "Id of the request guest trigger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Triggers": {
      "get": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "List request guest triggers.",
        "operationId": "RequestTemplateTrigger_GetRequestTemplateTriggers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Trigger.RequestTemplateTriggerModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Add or update a request guest trigger.",
        "operationId": "RequestTemplateTrigger_PutRequestTemplateTrigger",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "trigger",
            "in": "body",
            "description": "Request guest trigger to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Trigger.RequestTemplateTriggerModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/GroupExceptions/{groupExceptionId}": {
      "get": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Get request guest groupException.",
        "operationId": "RequestTemplateGroupException_GetRequestTemplateGroupException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupExceptionId",
            "in": "path",
            "description": "Id of the request guest groupException.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.GroupException.RequestTemplateGroupExceptionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Delete request guest groupException.",
        "operationId": "RequestTemplateGroupException_DeleteRequestTemplateGroupException",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupExceptionId",
            "in": "path",
            "description": "Id of the request guest groupException.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/GroupExceptions": {
      "get": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "List request guest groupExceptions.",
        "operationId": "RequestTemplateGroupException_GetRequestTemplateGroupExceptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.GroupException.RequestTemplateGroupExceptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Template Group Exceptions"
        ],
        "summary": "Add or update a request guest groupException.",
        "operationId": "RequestTemplateGroupException_PutRequestTemplateGroupException",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupException",
            "in": "body",
            "description": "Request guest groupException to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.GroupException.RequestTemplateGroupExceptionModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Options/{optionId}": {
      "get": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "Get request guest option.",
        "operationId": "RequestTemplateOption_GetRequestTemplateOption",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "Id of the request guest option.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "Delete request guest option.",
        "operationId": "RequestTemplateOption_DeleteRequestTemplateOption",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "Id of the request guest option.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Options": {
      "get": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "List request guest options.",
        "operationId": "RequestTemplateOption_GetRequestTemplateOptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "Add or update a request guest option.",
        "operationId": "RequestTemplateOption_PutRequestTemplateOption",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "option",
            "in": "body",
            "description": "Request guest option to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Options/Types": {
      "get": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "Get list of option types",
        "operationId": "RequestTemplateOption_GetOptionTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/Options/Reorder": {
      "put": {
        "tags": [
          "Place Request Template Guest Options"
        ],
        "summary": "Reorder options",
        "operationId": "RequestTemplateOption_PutRequestTemplateOptionsReorder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "Ordered list of options.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionBaseModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/StockResponses/{stockResponseId}": {
      "get": {
        "tags": [
          "Place Request Template Stock Responses"
        ],
        "summary": "Get request stock response.",
        "operationId": "RequestTemplateStockResponse_GetRequestTemplateStockResponse",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponseId",
            "in": "path",
            "description": "Id of the request stock response.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Template Stock Responses"
        ],
        "summary": "Delete request stock response.",
        "operationId": "RequestTemplateStockResponse_DeleteRequestTemplateStockResponse",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponseId",
            "in": "path",
            "description": "Id of the request stock response.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/StockResponses": {
      "get": {
        "tags": [
          "Place Request Template Stock Responses"
        ],
        "summary": "List request stock responses.",
        "operationId": "RequestTemplateStockResponse_GetRequestTemplateStockResponses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accept",
            "in": "query",
            "description": "Return only messages used for accepted",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Template Stock Responses"
        ],
        "summary": "Add or update a request stock response.",
        "operationId": "RequestTemplateStockResponse_PutRequestTemplateStockResponse",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponse",
            "in": "body",
            "description": "Request stock response to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}/StockResponses/Reorder": {
      "put": {
        "tags": [
          "Place Request Template Stock Responses"
        ],
        "summary": "Reorder stock responses",
        "operationId": "RequestTemplateStockResponse_PutRequestTemplateStockResponsesReorder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponses",
            "in": "body",
            "description": "Ordered list of stock responses.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseBaseModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/Types": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Gets request template types",
        "operationId": "RequestTemplate_GetRequestTemplateTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/{templateId}": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Get request template.",
        "operationId": "RequestTemplate_GetRequestTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Delete request template",
        "operationId": "RequestTemplate_DeleteTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the template",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "List request templates.",
        "operationId": "RequestTemplate_GetRequestTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "all",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "staff",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForAnonymousUser",
            "in": "query",
            "description": "Boolean that determines whether templates that require validation should be skipped",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateCommonModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Insert or update request template",
        "operationId": "RequestTemplate_PutRequestTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "template",
            "in": "body",
            "description": "Template to be added or updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/Search": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Searches request templates",
        "operationId": "RequestTemplate_GetRequestTemplatesByQuery",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place to search templates",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query string parameters",
            "required": false,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameters",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of records to return per paging index",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "ID for the paging index",
            "required": false,
            "type": "string"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Filters non staff templates",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter inactive templates",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.MonsciergeSearch.Models.RequestTypeSearchResult"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/Search": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Searches request templates",
        "operationId": "RequestTemplate_SearchRequestTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture to search",
            "required": false,
            "type": "string",
            "default": "en"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of paging",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Show staff only templates",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Requests.Models.RequestTemplateSearchResultModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/Sorted": {
      "get": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Gets a sorted list of request categories and templates.",
        "operationId": "RequestTemplate_GetSorted",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "all",
            "in": "query",
            "description": "All requests",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Staff to staff only",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForAnonymousUser",
            "in": "query",
            "description": "Skips over templates that require validation",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.ViewModels.RequestTemplateCategorySortingModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Templates/Reorder": {
      "put": {
        "tags": [
          "Place Request Templates"
        ],
        "summary": "Reorders request templates and categories.",
        "operationId": "RequestTemplate_Reorder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reorders",
            "in": "body",
            "description": "List of reorder objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestReorderModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Users": {
      "get": {
        "tags": [
          "Place Request Users"
        ],
        "summary": "List staff users.",
        "operationId": "Request_GetRequestUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "allAvailable",
            "in": "query",
            "description": "Include all available users.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Welcome": {
      "post": {
        "tags": [
          "Place Request Welcome"
        ],
        "summary": "Send welcome SMS message.",
        "operationId": "Request_PostRequestWelcome",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "internationalPhoneCountryCode",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "room",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Staff": {
      "put": {
        "tags": [
          "Place Requests"
        ],
        "summary": "Add staff request.",
        "operationId": "Request_PutRequestStaff",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of the guest user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the guest user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "A list of request options to set on the request.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "additionalDesc",
            "in": "query",
            "description": "An additional description to add to the request.",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "Checkout date in milliseconds since epoch.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone of the guest user.",
            "required": false,
            "type": "string"
          },
          {
            "name": "room",
            "in": "query",
            "description": "Room of the guest user.",
            "required": false,
            "type": "string"
          },
          {
            "name": "etaSecondsFromNow",
            "in": "query",
            "description": "Seconds from now to set the request's ETA.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Requests/Anonymous/Messages": {
      "post": {
        "tags": [
          "Place Requests"
        ],
        "summary": "Adds a new message to a request",
        "operationId": "Request_PostRequestMessageAnonymous",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "query",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique id for the user's device",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Device id fro anonymous requests",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Message to be sent",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/property/{propertyKey}/charge": {
      "post": {
        "tags": [
          "Place Stays"
        ],
        "operationId": "PlaceStay_PostCharge",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "propertyKey",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "charge",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.StayChargeModel"
            }
          },
          {
            "name": "userCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Tags/{tagMapId}": {
      "delete": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Delete place tag.",
        "operationId": "PlaceTag_DeletePlaceTag",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tagMapId",
            "in": "path",
            "description": "Id of the place tag.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Tags/{tagId}": {
      "get": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Get place tag.",
        "operationId": "PlaceTag_GetPlaceTag",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the place tag.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceOverrideModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Tags": {
      "get": {
        "tags": [
          "Place Tags"
        ],
        "summary": "List place tags.",
        "operationId": "PlaceTag_GetPlaceTags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Culture that should be used to localize strings",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Tags.Models.TagModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Add or update a place tag.",
        "operationId": "PlaceTag_PutPlaceTag",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Place tag to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceTagModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Images/Tags/Search": {
      "post": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Searches a places image tags for images matching",
        "operationId": "PlaceTag_GetImagesByTag",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Strings to search tags",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Images/Tags": {
      "get": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Gets a list of image tags",
        "operationId": "PlaceTag_GetImageTags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Images/{imagePath}/Tags": {
      "get": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Gets a list of image tags for specific image.",
        "operationId": "PlaceTag_GetTagsForImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imagePath",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Images.Models.ImageTagModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Images/{imagePath}/Tags/{tag}": {
      "delete": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Delete ImageTagMap from path and tag name.",
        "operationId": "PlaceTag_DeleteByName",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imagePath",
            "in": "path",
            "description": "Path of image.",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "path",
            "description": "Name of tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Images/{imageId}/Tags": {
      "post": {
        "tags": [
          "Place Tags"
        ],
        "summary": "Adds tags to an image",
        "operationId": "PlaceTag_PostImageTags",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "description": "Id for image",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tags",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Images.Models.ImageTagModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Valet/Cab": {
      "post": {
        "tags": [
          "Place Valet"
        ],
        "summary": "Send for a cab.",
        "operationId": "Valet_PostValetCab",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "whenMs",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Valet/Car": {
      "post": {
        "tags": [
          "Place Valet"
        ],
        "summary": "Send for a car.",
        "operationId": "Valet_PostValetCar",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ticket",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "minutes",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Valet/Limo": {
      "post": {
        "tags": [
          "Place Valet"
        ],
        "summary": "Send for a limo.",
        "operationId": "Valet_PostValetLimo",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "whenMs",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Valet/Shuttle": {
      "post": {
        "tags": [
          "Place Valet"
        ],
        "summary": "Send for a shuttle.",
        "operationId": "Valet_PostValetShuttle",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "whenMs",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ETL/Places/{placeId}/Menus": {
      "get": {
        "tags": [
          "PlaceMenuETL"
        ],
        "summary": "List menus.",
        "operationId": "PlaceMenuETL_GetMenus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeFeatureMenus",
            "in": "query",
            "description": "Include feature menus",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModelETL"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ETL/Places/{placeId}/Menus/{menuId}": {
      "get": {
        "tags": [
          "PlaceMenuETL"
        ],
        "summary": "Get menu.",
        "operationId": "PlaceMenuETL_GetMenu",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "Id of the menu.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModelETL"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ETL/Places/{placeId}/Menus/{menuId}/Sections": {
      "get": {
        "tags": [
          "PlaceMenuETL"
        ],
        "summary": "Gets the menu sections for a specific place and menu",
        "operationId": "PlaceMenuETL_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "menuId",
            "in": "path",
            "description": "ID for menu",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModelETL"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Info": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Gets information for a place",
        "operationId": "PlaceInfo_GetPropertyInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORT - Culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.PropertyInfoModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Places"
        ],
        "summary": "Updates a place's information",
        "operationId": "PlaceInfo_UpdatePropertyInfo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyInfo",
            "in": "body",
            "description": "PropertyInfoModel that contains place information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Hotel.PropertyInfoModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get place.",
        "operationId": "Place_GetPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceHackModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Places"
        ],
        "summary": "Delete place.",
        "operationId": "Place_DeletePlace",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/UIConfig": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get place UI configuration.",
        "operationId": "Place_GetPlaceUIConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceUiConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/ExplorerConfig": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get place explorer configuration.",
        "operationId": "Place_GetPlaceExplorerConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceExplorerModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/FeaturedItems": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Gets a list of featured items by type.",
        "operationId": "Place_GetPlaceExplorerByType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureType",
            "in": "query",
            "description": "Type of featured items to return",
            "required": true,
            "type": "string",
            "enum": [
              "Feature",
              "Enterprise",
              "LocalRecommendation",
              "Event"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceFeaturedItemModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Search places.",
        "operationId": "Place_GetPlacesSearch",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "staff",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "production",
            "in": "query",
            "description": "Include only production places.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "parentReachGroupId",
            "in": "query",
            "description": "Id of the top level reach group.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "Id of the brand.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "Place name, city, state, or postal.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Center latitude for places.",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 0.0
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Center longitude for places.",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 0.0
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius for places.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of places to return.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceHackBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Places"
        ],
        "summary": "Add or update a place.",
        "operationId": "Place_PutPlace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "place",
            "in": "body",
            "description": "Place to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceHackModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/Groups": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Searches places.",
        "operationId": "Place_GetPlacesSearchWithGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentReachGroupId",
            "in": "query",
            "description": "ID for reach group.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "query",
            "in": "query",
            "description": "String query.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude.",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 0.0
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude.",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 0.0
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.Place.PlaceSearchModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/Groups": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Searches places (Elastic Search)",
        "operationId": "Place_GetPlacesSearchElasticSearch",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentReachGroupId",
            "in": "query",
            "description": "Reach group information",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Searches, name, city, state of place record",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude to base search from",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude to base search from",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius of search",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "Id of brand",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to grab",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "name": "usePropertyGroups",
            "in": "query",
            "description": "Optional override for applications use property groups",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.Place.PlaceSearchModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Users/me": {
      "get": {
        "tags": [
          "Places"
        ],
        "operationId": "Place_GetProfileForPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Users/{userId}": {
      "get": {
        "tags": [
          "Places"
        ],
        "operationId": "Place_GetProfileForUserAtPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/Groups/WithWaitTime": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Searches places nearby with wait times (Elastic Search)",
        "operationId": "Place_GetPlacesSearchWithWaitTimeElasticSearch",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Searches, name, city, state of place record",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude to base search from",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude to base search from",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius of search",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to grab",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.Place.PlaceSearchWaitModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/Ids": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Get places",
        "operationId": "Place_GetPlaces",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Ids of the places",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Hero": {
      "put": {
        "tags": [
          "Places"
        ],
        "operationId": "Hero_UpdateHeroOrder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.HeroModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Places"
        ],
        "summary": "Adds new hero image.",
        "operationId": "Hero_AddHero",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "Hero Model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.HeroModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Places"
        ],
        "summary": "Delete hero image for place",
        "operationId": "Hero_DeleteHero",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Place ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "featureId",
            "in": "query",
            "description": "Feature ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/places/{placeId}/postcards": {
      "get": {
        "tags": [
          "Postcards"
        ],
        "summary": "Find Postcards for a place.",
        "operationId": "Postcards_GetPostcards",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/places/{placeId}/postcards/frames": {
      "get": {
        "tags": [
          "Postcards"
        ],
        "summary": "Get frames for postcards.",
        "operationId": "Postcards_GetPostcardFrames",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/postcards/{id}": {
      "get": {
        "tags": [
          "Postcards"
        ],
        "summary": "Find a Postcard.",
        "operationId": "Postcards_GetPostcard",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Postcard.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Postcards"
        ],
        "summary": "Delete a Postcard.",
        "operationId": "Postcards_DeletePostcard",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Postcard.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/postcards": {
      "post": {
        "tags": [
          "Postcards"
        ],
        "summary": "Add a new Postcard.",
        "operationId": "Postcards_PostPostcard",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "postcard",
            "in": "body",
            "description": "Postcard properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardCreateResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/postcards/{id}/actions/link": {
      "post": {
        "tags": [
          "Postcards"
        ],
        "summary": "Create a Postcard link.",
        "description": "Creates a link that can be used to view a Postcard.",
        "operationId": "Postcards_CreatePostcardLink",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Postcard.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "Available options to use when creating a Postcard link.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardActionSendModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/postcards/{id}/actions/email": {
      "post": {
        "tags": [
          "Postcards"
        ],
        "summary": "Send a Postcard by Email.",
        "operationId": "Postcards_EmailPostcard",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Postcard.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "Available options to use when emailing a Postcard.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardActionEmailModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/places/{placeId}/postcards/actions/reorder": {
      "post": {
        "tags": [
          "Postcards"
        ],
        "summary": "Update the display order of a Place's Postcards.",
        "operationId": "Postcards_ReorderPostcards",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reorderModel",
            "in": "body",
            "description": "Object containing an array of ordered Postcard Ids.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardActionReorderModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Campaigns/{campaignId}/Exceptions": {
      "get": {
        "tags": [
          "Promo Campaign Exceptions"
        ],
        "summary": "List promo campaign exceptions.",
        "operationId": "PromoCampaignException_GetPromoCampaignExceptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Promo.ExceptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Promo Campaign Exceptions"
        ],
        "summary": "Add or update promo campaign exception.",
        "operationId": "PromoCampaignException_PutPromoCampaignException",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "exception",
            "in": "body",
            "description": "Promo campaign exception to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.ExceptionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Campaigns/{campaignId}/Exceptions/{exceptionId}": {
      "get": {
        "tags": [
          "Promo Campaign Exceptions"
        ],
        "summary": "Get promo exception.",
        "operationId": "PromoCampaignException_GetPromoCampaignException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "exceptionId",
            "in": "path",
            "description": "Id of the promo campaign exception.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.ExceptionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Promo Campaign Exceptions"
        ],
        "summary": "Delete promo campaign exception.",
        "operationId": "PromoCampaignException_DeletePromoCampaignException",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "exceptionId",
            "in": "path",
            "description": "Id of the promo campaign exception.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Promo Campaigns"
        ],
        "summary": "Get promo campaign.",
        "operationId": "PromoCampaign_GetPromoCampaign",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.CampaignModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Promo Campaigns"
        ],
        "summary": "Delete promo campaign.",
        "operationId": "PromoCampaign_DeletePromoCampaign",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Id of the promo campaign.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Campaigns": {
      "put": {
        "tags": [
          "Promo Campaigns"
        ],
        "summary": "Add or update promo campaign.",
        "operationId": "PromoCampaign_PutPromoCampaign",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "campaign",
            "in": "body",
            "description": "Promo campaign to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.CampaignModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Promos/Displays": {
      "get": {
        "tags": [
          "Promo Displays"
        ],
        "summary": "List promo displays.",
        "operationId": "PromoDisplay_GetPromoDisplays",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBasePromoDisplayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Promo Displays"
        ],
        "summary": "Add or update promo display.",
        "operationId": "PromoDisplay_PutPromoDisplay",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "display",
            "in": "body",
            "description": "Id of the promo display.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PromoDisplayModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Displays/{displayId}": {
      "get": {
        "tags": [
          "Promo Displays"
        ],
        "summary": "Get promo display.",
        "operationId": "PromoDisplay_GetPromoDisplay",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "displayId",
            "in": "path",
            "description": "Id of the promo display.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PromoDisplayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Scenes/{sceneId}": {
      "get": {
        "tags": [
          "Promo Scenes"
        ],
        "summary": "Get promo scene.",
        "operationId": "PromoScene_GetPromoScene",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "sceneId",
            "in": "path",
            "description": "Id of the promo scene.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Promo Scenes"
        ],
        "summary": "Delete promo scene.",
        "operationId": "PromoScene_DeletePromoScene",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "sceneId",
            "in": "path",
            "description": "Id of the promo scene.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Promos/Scenes": {
      "put": {
        "tags": [
          "Promo Scenes"
        ],
        "summary": "Add or update promo scene.",
        "operationId": "PromoScene_PutPromoScene",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "scene",
            "in": "body",
            "description": "Promo scene to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/RegisterProfile": {
      "post": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Register a new profile for the Proxce system",
        "operationId": "PmsProxce_RegisterProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "profile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetProfile": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Register a new profile for the Proxce system",
        "operationId": "PmsProxce_GetProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "description": "Returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetProfileWithID": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "operationId": "PmsProxce_GetProfileWithUserId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/Profile": {
      "put": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Update profile, Only Updates password",
        "operationId": "PmsProxce_UpdateProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "updatedRegistration",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceRegistration"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetReservations": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "",
        "operationId": "PmsProxce_GetReservations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "description": "Returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/ConfirmStay": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Get the profile Id and stay from a confirmation number",
        "operationId": "PmsProxce_GetConfirmedStayWithProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "confirmationNumber",
            "in": "query",
            "description": "Confirmation number from email",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Guest last name",
            "required": true,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "query",
            "description": "Place of the Guests stay",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Proxce/ConfirmStay": {
      "post": {
        "tags": [
          "Proxce Integration Service"
        ],
        "operationId": "PmsProxce_GetStayConfirmation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "confirmation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceConfirmStayBody"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/ActiveStay": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "operationId": "PmsProxce_GetActiveStays",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetRoomReservations": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "",
        "operationId": "PmsProxce_GetRoomReservations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetRoomReservationsWithRoomId": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "operationId": "PmsProxce_GetRoomReservationsWithRoomId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "roomResId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/GetReservationsWithResId": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Get a single reservation",
        "operationId": "PmsProxce_GetReservationsWithResId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resId",
            "in": "query",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          },
          {
            "name": "amenityId",
            "in": "query",
            "description": "Depracated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/CreateReservation": {
      "post": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Create a reservation",
        "operationId": "PmsProxce_CreateReservationForUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "createReservation",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceCreateReservationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "Optional",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Proxce/CreateReservation": {
      "post": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Create a reservation with generic reservation model",
        "operationId": "PmsProxce_CreateReservationForUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model wrapper",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "if true return dummy data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Proxce/UpdateReservation": {
      "put": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Updates an existing proxce reservation",
        "operationId": "PmsProxce_UpdateReservation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/DeleteFBReservation": {
      "delete": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Delete an existing reservation",
        "operationId": "PmsProxce_CancelFbReservation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Id of the amenity",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Proxce/FBAvailability": {
      "get": {
        "tags": [
          "Proxce Integration Service"
        ],
        "summary": "Get the availabilty of an amenity",
        "operationId": "PmsProxce_GetFbAvailability",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "query",
            "description": "Amenity Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "String formatted date eg \"20160928\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "String time in military format eg \"1900\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "String time in military format eg \"2100\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "partySize",
            "in": "query",
            "description": "Int for party size",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pimToken",
            "in": "query",
            "description": "Proxce's device token, required if anonymous",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PushNotifications/{notificationId}": {
      "get": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Gets a push notification by its id.",
        "operationId": "PushNotification_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID for push notification.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Cancels a push notification.",
        "operationId": "PushNotification_Cancel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID for push notification.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PushNotifications": {
      "get": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Gets all notifications for a place.",
        "operationId": "PushNotification_Query",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Updates an existing push notification.",
        "operationId": "PushNotification_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "job",
            "in": "body",
            "description": "Push notification job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Adds a new push notification.",
        "operationId": "PushNotification_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "job",
            "in": "body",
            "description": "Push notification job.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/PushNotifications/past": {
      "get": {
        "tags": [
          "Push Notifications"
        ],
        "summary": "Gets all past notifications for a specified past hour window",
        "operationId": "PushNotification_GetPastNotifications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "hours",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 24
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Notifications.NotificationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reviews/Amenity/{amenityId}": {
      "get": {
        "tags": [
          "Ratings and Reviews"
        ],
        "summary": "Gets reviews for amenities.",
        "operationId": "Feedback_GetForAmenity",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "amenityId",
            "in": "path",
            "description": "ID for amenity.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.ReviewModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reviews/Enterprise/{enterpriseLocationId}": {
      "get": {
        "tags": [
          "Ratings and Reviews"
        ],
        "summary": "Gets reviews for enterprises.",
        "operationId": "Feedback_GetForEnterprise",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "enterpriseLocationId",
            "in": "path",
            "description": "ID for enterprise.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.ReviewModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reviews/Hotel/{hotelId}": {
      "get": {
        "tags": [
          "Ratings and Reviews"
        ],
        "summary": "Gets reviews for hotel.",
        "operationId": "Feedback_GetForHotel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "description": "ID for hotel.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.ReviewModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/NearbyRecommendations": {
      "get": {
        "tags": [
          "Recommendations by Location"
        ],
        "summary": "Get a list of nearby enterprise locations.",
        "operationId": "PlaceRecommendation_GetRecommendationsByLocation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude",
            "required": true,
            "type": "number",
            "format": "float"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude",
            "required": true,
            "type": "number",
            "format": "float"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius (meters)",
            "required": true,
            "type": "number",
            "format": "float"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by field of the search results. Current values are 'distance', 'dollar_range', or 'name'.",
            "required": false,
            "type": "string",
            "default": "distance"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order of the search results. Current values are 'ascending' or 'descending'.",
            "required": false,
            "type": "string",
            "default": "ascending"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Restrict results to a specific category id.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ReleaseNotes/{releaseNoteId}": {
      "get": {
        "tags": [
          "Release Notes"
        ],
        "summary": "Get release note.",
        "operationId": "ReleaseNote_GetReleaseNote",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "releaseNoteId",
            "in": "path",
            "description": "Id of the release note.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.ReleaseNote.ReleaseNoteModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Release Notes"
        ],
        "summary": "Delete release note.",
        "operationId": "ReleaseNote_DeleteReleaseNote",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "releaseNoteId",
            "in": "path",
            "description": "Id of the release note.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ReleaseNotes": {
      "get": {
        "tags": [
          "Release Notes"
        ],
        "summary": "List release notes.",
        "description": "Notes are in descending order by Release Date.",
        "operationId": "ReleaseNote_GetReleaseNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "current",
            "in": "query",
            "description": "(Optional) When set to '1', only the current Release Note will be returned.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ReleaseNote.ReleaseNoteModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Release Notes"
        ],
        "summary": "Add or update a release note.",
        "operationId": "ReleaseNote_PutReleaseNote",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "releaseNote",
            "in": "body",
            "description": "Release note to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.ReleaseNote.ReleaseNoteModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Followers/{removedUserId}": {
      "delete": {
        "tags": [
          "Request Followers"
        ],
        "summary": "Delete follower from request.",
        "operationId": "RequestFollower_DeleteRequestFollower",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "removedUserId",
            "in": "path",
            "description": "Id of the removed user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Followers": {
      "get": {
        "tags": [
          "Request Followers"
        ],
        "summary": "List request followers.",
        "operationId": "RequestFollower_GetRequestFollowers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Followers/{addedUserId}": {
      "put": {
        "tags": [
          "Request Followers"
        ],
        "summary": "Add follower to request.",
        "operationId": "RequestFollower_PutRequestFollower",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "addedUserId",
            "in": "path",
            "description": "The user id to add as a follower.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Relations/{relatedRequestId}": {
      "put": {
        "tags": [
          "Request Relations"
        ],
        "summary": "Add request relation.",
        "operationId": "RequestRelation_PutRequestRelation",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relatedRequestId",
            "in": "path",
            "description": "Id of the related request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relationship",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Request Relations"
        ],
        "summary": "Delete request relation.",
        "operationId": "RequestRelation_DeleteRequestRelation",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relatedRequestId",
            "in": "path",
            "description": "Id of the related request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Statuses/Accept": {
      "post": {
        "tags": [
          "Request Statuses"
        ],
        "summary": "Accept a request.",
        "operationId": "RequestStatus_PostRequestAccept",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "eta",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Statuses/New": {
      "post": {
        "tags": [
          "Request Statuses"
        ],
        "summary": "Revert request.",
        "operationId": "RequestStatus_PostRequestNew",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "eta",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Statuses/Archive": {
      "post": {
        "tags": [
          "Request Statuses"
        ],
        "summary": "Archive a request.",
        "operationId": "RequestStatus_PostRequestArchive",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Statuses/Close": {
      "post": {
        "tags": [
          "Request Statuses"
        ],
        "summary": "Close a request.",
        "operationId": "RequestStatus_PostRequestClose",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Statuses/Forward/{groupId}": {
      "post": {
        "tags": [
          "Request Statuses"
        ],
        "summary": "Forward a request.",
        "operationId": "RequestStatus_PostRequestForward",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the request group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}": {
      "delete": {
        "tags": [
          "Requests"
        ],
        "summary": "Delete request.",
        "operationId": "Request_DeleteRequest",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests": {
      "put": {
        "tags": [
          "Requests"
        ],
        "summary": "Add request.",
        "operationId": "Request_PutRequest",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "A list of request options to set on the request.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "additionalDesc",
            "in": "query",
            "description": "An additional description to add to the request.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sms",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "requesterUserId",
            "in": "query",
            "description": "The user ID who is requesting.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relatedRequestId",
            "in": "query",
            "description": "A request ID to link the request to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relationship",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "Reciprocal",
              "ParentOf",
              "ChildOf"
            ]
          },
          {
            "name": "etaSecondsFromNow",
            "in": "query",
            "description": "Seconds from now to set the request's ETA.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/RequestQueue": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "",
        "operationId": "Request_GetRequestsByRequestGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Requests.Models.MercyRequestModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Eta": {
      "put": {
        "tags": [
          "Requests"
        ],
        "summary": "Update ETA on request.",
        "operationId": "Request_PutRequestEta",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaMs",
            "in": "query",
            "description": "Unix timestamp in milliseconds to set the ETA to.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Messages": {
      "put": {
        "tags": [
          "Requests"
        ],
        "summary": "Add message to request.",
        "operationId": "Request_PutRequestMessage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "The message to add to the request.",
            "required": true,
            "type": "string"
          },
          {
            "name": "etaSeconds",
            "in": "query",
            "description": "The ETA the request should be completed in seconds.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isPrivate",
            "in": "query",
            "description": "Whether or not the message is private.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Requests/{requestId}/Messages": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Adds a guest message to a request. The requesting user must be the one making the post.",
        "operationId": "Request_PostRequestMessage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Message to be added",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Requests/{requestId}/Notify": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Notify a user about a request",
        "operationId": "Request_PostNotifyUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Message",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/Room": {
      "get": {
        "tags": [
          "Room Reservations"
        ],
        "summary": "",
        "operationId": "RoomReservation_GetRoomReservations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "description": "Optional, returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/Room/{resId}": {
      "get": {
        "tags": [
          "Room Reservations"
        ],
        "operationId": "RoomReservation_GetRoomReservationsWithRoomId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "roomResId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "resId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "operationId": "IoT_GetRooms",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTRoomListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms/{roomId}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "operationId": "IoT_GetRooms",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTRoom"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Integrations/Sabre/CheckIn/precheckin": {
      "get": {
        "tags": [
          "Sabre Checkin Integration Service"
        ],
        "summary": "Authenticate as a loyalty member using a login ID (username, profile ID, etc.) and a password",
        "operationId": "SabreCheckIn_GetPreCheckinResponse",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "userPassword",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/keys": {
      "put": {
        "tags": [
          "Salto Door Keys"
        ],
        "operationId": "ExternalKeys_PutKeyRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stayId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "demo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.MonsciergeSalto.Models.MobileBinaryResponse"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ServicePlans/{servicePlanId}/products": {
      "get": {
        "tags": [
          "Service Plan Products"
        ],
        "summary": "Gets a list of available products within a Monscierge service plan.",
        "operationId": "ServicePlanProduct_GetProducts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "servicePlanId",
            "in": "path",
            "description": "Id of the service plan.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Product.ProductModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ServicePlans": {
      "get": {
        "tags": [
          "Service Plans"
        ],
        "summary": "Gets a list of all currently available, standard Monscierge service plans.",
        "operationId": "ServicePlan_GetServicePlans",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "(optional) - Returns only plans for a particular region (e.g. 'US', 'UK', 'EU')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ServicePlan.ServicePlanBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/ServicePlans/{servicePlanId}": {
      "get": {
        "tags": [
          "Service Plans"
        ],
        "summary": "Get a Monscierge service plan.",
        "operationId": "ServicePlan_GetServicePlan",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "servicePlanId",
            "in": "path",
            "description": "Id of the service plan.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.ServicePlan.ServicePlanModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/Stay/{resId}": {
      "get": {
        "tags": [
          "Stay Reservations"
        ],
        "summary": "Get a single stay reservation",
        "operationId": "StayReservation_GetReservationsWithResId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "resId",
            "in": "path",
            "description": "Id of the reservation",
            "required": true,
            "type": "string"
          },
          {
            "name": "amenityId",
            "in": "query",
            "description": "Depracated",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Reservations/Stay": {
      "get": {
        "tags": [
          "Stay Reservations"
        ],
        "summary": "Gets all stay reservations",
        "operationId": "StayReservation_GetReservations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "demo",
            "in": "query",
            "description": "Returns demo data when true",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Stay Reservations"
        ],
        "summary": "Updates an existing stay reservation",
        "operationId": "StayReservation_UpdateReservation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stay Reservations"
        ],
        "summary": "Create a stay reservation with generic reservation model",
        "operationId": "StayReservation_CreateReservationForUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reservation",
            "in": "body",
            "description": "Reservation model wrapper",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          },
          {
            "name": "demo",
            "in": "query",
            "description": "if true return dummy data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/{id}/Pin": {
      "post": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Generates an authorization pin for a subdevice.",
        "operationId": "SubDeviceConfig_GeneratePin",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id for subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs": {
      "get": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Gets a device's configs",
        "operationId": "SubDeviceConfig_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID of place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Updates all sub device configs sent.",
        "operationId": "SubDeviceConfig_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDeviceConfigs",
            "in": "body",
            "description": "Configs sent from front end",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Adds a new sub device",
        "operationId": "SubDeviceConfig_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "DeviceConfigModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/AllDevices": {
      "get": {
        "tags": [
          "SubDevice Configs"
        ],
        "operationId": "SubDeviceConfig_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/Device/{deviceId}": {
      "get": {
        "tags": [
          "SubDevice Configs"
        ],
        "operationId": "SubDeviceConfig_GetForDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/{subDeviceId}/Download": {
      "get": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Gets a downloadable xml document version of config.",
        "operationId": "SubDeviceConfig_GetDownloadableConfig",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of a place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "Id of subdevice",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/{id}": {
      "put": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Updates a sub device",
        "operationId": "SubDeviceConfig_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "model",
            "in": "body",
            "description": "SubdeviceConfigModel that will be converted and inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/SubDeviceConfigs/{subDeviceId}": {
      "delete": {
        "tags": [
          "SubDevice Configs"
        ],
        "summary": "Deletes a specific sub device",
        "operationId": "SubDeviceConfig_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subDeviceId",
            "in": "path",
            "description": "ID for sub device",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get available newsletter subscriptions",
        "operationId": "Subscription_GetAvailableSubscriptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get user's newsletter subscriptions",
        "operationId": "Subscription_GetMySubscriptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update user's newsletter subscriptions",
        "operationId": "Subscription_UpdateMySubcriptions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "subscriptions",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Surveys/{surveyId}": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get specific survey with member answers",
        "operationId": "Survey_GetSurvey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Surveys"
        ],
        "summary": "Update survey for member",
        "operationId": "Survey_UpdateSurvey",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "surveyModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Surveys": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get available surveys",
        "operationId": "Survey_GetAvailableSurveys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Surveys/{surveyId}/Questions/{questionId}": {
      "put": {
        "tags": [
          "Surveys"
        ],
        "summary": "Update survey answer for member",
        "operationId": "Survey_UpdateSurveyQuestion",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "responseModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyResponseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms/{roomId}/Switch/{deviceId}": {
      "get": {
        "tags": [
          "Switch"
        ],
        "operationId": "IoT_GetSwitch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTSwitchDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTSwitchDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Switch"
        ],
        "operationId": "IoT_ConfigureSwitch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTSwitchDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTSwitchDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Theme": {
      "get": {
        "tags": [
          "Themes"
        ],
        "summary": "Get theme for an place.",
        "operationId": "Theme_GetPlaceTheme",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/System.Object"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Brands/{brandId}/Theme": {
      "get": {
        "tags": [
          "Themes"
        ],
        "summary": "Get theme for an brand.",
        "operationId": "Theme_GetBrandTheme",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/System.Object"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Themes/Places/{placeId}/MobileImage/{imageId}": {
      "post": {
        "tags": [
          "Themes"
        ],
        "summary": "Adds a new mobile background image to a place.",
        "operationId": "Theme_InsertMobileBackgroundImage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "ID for image.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Themes": {
      "put": {
        "tags": [
          "Themes"
        ],
        "summary": "Updates the theme object for a place",
        "operationId": "Theme_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "themes",
            "in": "body",
            "description": "List of theme objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Themes.Models.ThemeConfigModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Themes"
        ],
        "summary": "Deletes a single theme object from the database",
        "operationId": "Theme_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "setting",
            "in": "query",
            "description": "Setting enum",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3
            ]
          },
          {
            "name": "option",
            "in": "query",
            "description": "Option enum",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39
            ]
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Platform type",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/IoT/Rooms/{roomId}/Thermostat/{deviceId}": {
      "get": {
        "tags": [
          "Thermostat"
        ],
        "operationId": "IoT_GetThermostat",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTThermostatDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTThermostatDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Thermostat"
        ],
        "operationId": "IoT_ConfigureThermostat",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTThermostatDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTThermostatDevice"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/timezones": {
      "get": {
        "tags": [
          "Time Zones"
        ],
        "summary": "Get a list of Time Zones.",
        "operationId": "TimeZone_GetTimeZones",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.TimeZone.TimeZoneCollectionModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/timezones/{id}": {
      "get": {
        "tags": [
          "Time Zones"
        ],
        "summary": "Find a Time Zone.",
        "operationId": "TimeZone_GetTimeZone",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Time Zone.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.TimeZone.TimeZoneResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Translations/{model}": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Get translations.",
        "operationId": "Translation_GetTranslations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Name of the model",
            "required": true,
            "type": "string",
            "enum": [
              "Amenity",
              "AmenityCategory",
              "Event",
              "EventSection",
              "EventGroup",
              "Menu",
              "MenuItem",
              "MenuItemModifier",
              "MenuItemModifierValue",
              "MenuSection",
              "Map",
              "MobileHomeScreenButtonMap",
              "RequestTemplate",
              "RequestCategory",
              "RequestOption"
            ]
          },
          {
            "name": "recordId",
            "in": "query",
            "description": "Id of the record",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Translations"
        ],
        "summary": "Update translation.",
        "operationId": "Translation_PutTranslation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Name of the model",
            "required": true,
            "type": "string",
            "enum": [
              "Amenity",
              "AmenityCategory",
              "Event",
              "EventSection",
              "EventGroup",
              "Menu",
              "MenuItem",
              "MenuItemModifier",
              "MenuItemModifierValue",
              "MenuSection",
              "Map",
              "MobileHomeScreenButtonMap",
              "RequestTemplate",
              "RequestCategory",
              "RequestOption"
            ]
          },
          {
            "name": "dataColumn",
            "in": "query",
            "description": "Name of the data column",
            "required": true,
            "type": "string"
          },
          {
            "name": "localizedModel",
            "in": "body",
            "description": "Localized json model",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "recordId",
            "in": "query",
            "description": "Id of the record",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Translations"
        ],
        "summary": "Delete translation.",
        "operationId": "Translation_DeleteTranslation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Name of the model",
            "required": true,
            "type": "string",
            "enum": [
              "Amenity",
              "AmenityCategory",
              "Event",
              "EventSection",
              "EventGroup",
              "Menu",
              "MenuItem",
              "MenuItemModifier",
              "MenuItemModifierValue",
              "MenuSection",
              "Map",
              "MobileHomeScreenButtonMap",
              "RequestTemplate",
              "RequestCategory",
              "RequestOption"
            ]
          },
          {
            "name": "dataColumn",
            "in": "query",
            "description": "Name of the data column",
            "required": true,
            "type": "string"
          },
          {
            "name": "recordId",
            "in": "query",
            "description": "Id of the record",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Analytics/Clicks": {
      "put": {
        "tags": [
          "User Analytics"
        ],
        "summary": "Add click tracking.",
        "operationId": "UserAnalytic_PutUserAnalyticClickTracking",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "clicks",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.ClickModel"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Analytics/Clicks": {
      "put": {
        "tags": [
          "User Analytics"
        ],
        "summary": "Add click tracking.",
        "operationId": "UserAnalytic_PutUserAnalyticClickTracking",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "clicks",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.ClickModel"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Applications": {
      "get": {
        "tags": [
          "User Applications"
        ],
        "summary": "List applications.",
        "operationId": "UserApplication_GetUserApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Applications": {
      "get": {
        "tags": [
          "User Applications"
        ],
        "summary": "List applications.",
        "operationId": "UserApplication_GetUserApplications",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/CheckIn/{placeId}": {
      "get": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Get user checkin for place",
        "operationId": "UserCheckInOut_GetUserCheckIn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the User",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserCheckInModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Check In a user.",
        "operationId": "UserCheckInOut_PostUserCheckIn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Personal device identifier.",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Alias first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Alias last name",
            "required": false,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkInDateMs",
            "in": "query",
            "description": "check in date in milliseconds ( defaults to now )",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "checkOutDateMs",
            "in": "query",
            "description": "check out date in milliseconds ( defaults to one day from now )",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/CheckIn/{placeId}": {
      "get": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Get me checkin for place",
        "operationId": "UserCheckInOut_GetUserCheckIn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the Place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserCheckInModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Check In a user.",
        "operationId": "UserCheckInOut_PostUserCheckIn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Personal device identifier.",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Alias first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Alias last name",
            "required": false,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "room number",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkInDateMs",
            "in": "query",
            "description": "check in date in milliseconds ( defaults to now )",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "checkOutDateMs",
            "in": "query",
            "description": "check out date in milliseconds ( defaults to one day from now )",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/CheckOut/{placeId}": {
      "post": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Check Out a user.",
        "operationId": "UserCheckInOut_PostUserCheckOut",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/CheckOut/{placeId}": {
      "post": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Check Out a user.",
        "operationId": "UserCheckInOut_PostUserCheckOut",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/New/CheckIn/{placeId}": {
      "post": {
        "tags": [
          "User Check In or Out"
        ],
        "summary": "Does stuff",
        "operationId": "UserCheckInOut_PostUserEventCheckIn",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "additionalNotes",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Emails/{emailId}": {
      "get": {
        "tags": [
          "User Emails"
        ],
        "summary": "Get email.",
        "operationId": "UserEmail_GetUserEmail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "Id of the email.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Emails"
        ],
        "summary": "Delete email.",
        "operationId": "UserEmail_DeleteUserEmail",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "Id of the email.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Emails/{emailId}": {
      "get": {
        "tags": [
          "User Emails"
        ],
        "summary": "Get email.",
        "operationId": "UserEmail_GetUserEmail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "description": "Id of the email.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Emails"
        ],
        "summary": "Delete email.",
        "operationId": "UserEmail_DeleteUserEmail",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "description": "Id of the email.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Emails": {
      "get": {
        "tags": [
          "User Emails"
        ],
        "summary": "List emails.",
        "operationId": "UserEmail_GetUserEmails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Emails"
        ],
        "summary": "Add or update a email.",
        "operationId": "UserEmail_PutUserEmail",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "body",
            "description": "Email to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Emails": {
      "get": {
        "tags": [
          "User Emails"
        ],
        "summary": "List emails.",
        "operationId": "UserEmail_GetUserEmails",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Emails"
        ],
        "summary": "Add or update a email.",
        "operationId": "UserEmail_PutUserEmail",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Email to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Favorites/{favoriteId}": {
      "get": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Get favorite.",
        "operationId": "UserFavorite_GetUserFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Delete favorite.",
        "operationId": "UserFavorite_DeleteUserFavorite",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Favorites/{favoriteId}": {
      "get": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Get favorite.",
        "operationId": "UserFavorite_GetUserFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Delete favorite.",
        "operationId": "UserFavorite_DeleteUserFavorite",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "description": "Id of the favorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Favorites": {
      "get": {
        "tags": [
          "User Favorites"
        ],
        "summary": "List favorites.",
        "operationId": "UserFavorite_GetUserFavorites",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Add or update a favorite.",
        "operationId": "UserFavorite_PutUserFavorite",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "favorite",
            "in": "body",
            "description": "Favorite to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Favorites": {
      "get": {
        "tags": [
          "User Favorites"
        ],
        "summary": "List favorites.",
        "operationId": "UserFavorite_GetUserFavorites",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Favorites"
        ],
        "summary": "Add or update a favorite.",
        "operationId": "UserFavorite_PutUserFavorite",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "favorite",
            "in": "body",
            "description": "Favorite to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.FavoriteModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/PersonalDevices/{personalDeviceId}": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Get personal device.",
        "operationId": "UserPersonalDevice_GetUserPersonalDeviceId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "personalDeviceId",
            "in": "path",
            "description": "Id of the personal device.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Delete personal device.",
        "operationId": "UserPersonalDevice_DeleteUserPersonalDeviceId",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "personalDeviceId",
            "in": "path",
            "description": "Id of the personal device.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/PersonalDevices/{personalDeviceId}": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Get personal device.",
        "operationId": "UserPersonalDevice_GetUserPersonalDeviceId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "personalDeviceId",
            "in": "path",
            "description": "Id of the personal device.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Delete personal device.",
        "operationId": "UserPersonalDevice_DeleteUserPersonalDeviceId",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "personalDeviceId",
            "in": "path",
            "description": "Id of the personal device.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android deviceid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/PersonalDevices/{identifier}": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Get personal device.",
        "operationId": "UserPersonalDevice_GetUserPersonalDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the personal device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Delete personal device.",
        "operationId": "UserPersonalDevice_DeleteUserPersonalDevice",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Indentifier of the personal device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/PersonalDevices/{identifier}": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Get personal device.",
        "operationId": "UserPersonalDevice_GetUserPersonalDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the personal device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Delete personal device.",
        "operationId": "UserPersonalDevice_DeleteUserPersonalDevice",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the personal device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/PersonalDevices": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "List personal devices.",
        "operationId": "UserPersonalDevice_GetUserPersonalDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Add or update a personal device.",
        "operationId": "UserPersonalDevice_PutUserPersonalDevice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "personalDevice",
            "in": "body",
            "description": "Personal device to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/PersonalDevices": {
      "get": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "List personal devices.",
        "operationId": "UserPersonalDevice_GetUserPersonalDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Add or update a personal device.",
        "operationId": "UserPersonalDevice_PutUserPersonalDevice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "personalDevice",
            "in": "body",
            "description": "Personal device to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.PersonalDeviceModel"
            }
          },
          {
            "name": "applicationToken",
            "in": "query",
            "description": "Application token (iOS bundle id or android fingerprint)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/PersonalDevices/Validate/Send": {
      "post": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Send personal device verification.",
        "operationId": "UserPersonalDevice_PostSendUserPersonalDeviceVerification",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "The personal device identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Unique Android device id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/PersonalDevices/Validate/Send": {
      "post": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Send personal device verification.",
        "operationId": "UserPersonalDevice_PostSendUserPersonalDeviceVerification",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "The personal device identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/PersonalDevices/Validate": {
      "post": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Verify a personal device.",
        "operationId": "UserPersonalDevice_PostVerifyUserPersonalDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "The personal device identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "The verification code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/PersonalDevices/Validate": {
      "post": {
        "tags": [
          "User Personal Devices"
        ],
        "summary": "Verify a personal device.",
        "operationId": "UserPersonalDevice_PostVerifyUserPersonalDevice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "The personal device identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "The verification code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Phones/{phoneId}": {
      "get": {
        "tags": [
          "User Phones"
        ],
        "summary": "Get phone.",
        "operationId": "UserPhone_GetUserPhone",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "Id of the phone.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Phones"
        ],
        "summary": "Delete phone.",
        "operationId": "UserPhone_DeleteUserPhone",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "phoneId",
            "in": "path",
            "description": "Id of the phone.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Phones/{phoneId}": {
      "get": {
        "tags": [
          "User Phones"
        ],
        "summary": "Get phone.",
        "operationId": "UserPhone_GetUserPhone",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "phoneId",
            "in": "path",
            "description": "Id of the phone.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Phones"
        ],
        "summary": "Delete phone.",
        "operationId": "UserPhone_DeleteUserPhone",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "phoneId",
            "in": "path",
            "description": "Id of the phone.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Phones": {
      "get": {
        "tags": [
          "User Phones"
        ],
        "summary": "List phones.",
        "operationId": "UserPhone_GetUserPhones",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Phones"
        ],
        "summary": "Add or update a phone.",
        "operationId": "UserPhone_PutUserPhone",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "phone",
            "in": "body",
            "description": "Phone to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Phones": {
      "get": {
        "tags": [
          "User Phones"
        ],
        "summary": "List phones.",
        "operationId": "UserPhone_GetUserPhones",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Phones"
        ],
        "summary": "Add or update a phone.",
        "operationId": "UserPhone_PutUserPhone",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "body",
            "description": "Phone to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Places/Tags": {
      "get": {
        "tags": [
          "User Place Tags"
        ],
        "operationId": "UserTag_GetUserPlaceTags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places/Tags": {
      "get": {
        "tags": [
          "User Place Tags"
        ],
        "operationId": "UserTag_GetUserPlaceTags",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Places": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List places for user.",
        "operationId": "UserPlace_GetUserPlaces",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Name search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List places for user.",
        "operationId": "UserPlace_GetUserPlaces",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parentReachGroupId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Places/Favorites": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List favorite places.",
        "operationId": "UserPlace_GetUserPlaceFavorites",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Places"
        ],
        "summary": "Add favorite place.",
        "operationId": "UserPlace_PutUserFavorite",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "place",
            "in": "body",
            "description": "Place to be favorited.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places/Favorites": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List favorite places.",
        "operationId": "UserPlace_GetUserPlaceFavorites",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the User.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Places"
        ],
        "summary": "Add favorite place.",
        "operationId": "UserPlace_PutUserFavorite",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "place",
            "in": "body",
            "description": "Place to be favorited.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Places/{placeId}/Roles": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List user roles for place.",
        "operationId": "UserPlace_GetUserPlaceRoles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ReachRole.ReachRoleModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places/{placeId}/Roles": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List user roles for place.",
        "operationId": "UserPlace_GetUserPlaceRoles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ReachRole.ReachRoleModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places/{placeId}": {
      "get": {
        "tags": [
          "User Places"
        ],
        "summary": "List users for a specific place",
        "operationId": "UserPlace_GetUsersForPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for current user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.User.UserPlaceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Places/{placeId}/Favorites": {
      "put": {
        "tags": [
          "User Places"
        ],
        "summary": "Add favorite place.",
        "operationId": "UserPlace_PutUserFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place to be favorited.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Places"
        ],
        "summary": "Delete favorite place.",
        "operationId": "UserPlace_DeleteUserPlaceFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Places/{placeId}/Favorites": {
      "put": {
        "tags": [
          "User Places"
        ],
        "summary": "Add favorite place.",
        "operationId": "UserPlace_PutUserFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place to be favorited.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Places"
        ],
        "summary": "List favorite places.",
        "operationId": "UserPlace_DeleteUserPlaceFavorite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the User.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Places/{userId}": {
      "delete": {
        "tags": [
          "User Places"
        ],
        "summary": "Soft deletes a user from a place",
        "operationId": "UserPlace_DeleteUserForPlace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for user to be deleted (User ID)",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Promo/Campaigns": {
      "get": {
        "tags": [
          "User Promo Campaigns"
        ],
        "summary": "List promo campaigns.",
        "operationId": "UserPromoCampaign_GetPromoCampaigns",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Promo.CampaignModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Promos/Displays": {
      "get": {
        "tags": [
          "User Promo Displays"
        ],
        "summary": "List promo displays.",
        "operationId": "UserPromoDisplay_GetPromoDisplays",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBasePromoDisplayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Promo/Scenes": {
      "get": {
        "tags": [
          "User Promo Scenes"
        ],
        "summary": "List promo scenes.",
        "operationId": "UserPromoScene_GetPromoScenes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Ratings/{ratingId}": {
      "get": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Get rating.",
        "operationId": "UserRating_GetUserRating",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Delete rating.",
        "operationId": "UserRating_DeleteUserRating",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Ratings/{ratingId}": {
      "get": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Get rating.",
        "operationId": "UserRating_GetUserRating",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Delete rating.",
        "operationId": "UserRating_DeleteUserRating",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ratingId",
            "in": "path",
            "description": "Id of the rating.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Ratings": {
      "get": {
        "tags": [
          "User Ratings"
        ],
        "summary": "List ratings.",
        "operationId": "UserRating_GetUserRatings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Add or update a rating.",
        "operationId": "UserRating_PutUserRating",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "rating",
            "in": "body",
            "description": "Rating to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Ratings": {
      "get": {
        "tags": [
          "User Ratings"
        ],
        "summary": "List ratings.",
        "operationId": "UserRating_GetUserRatings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Ratings"
        ],
        "summary": "Add or update a rating.",
        "operationId": "UserRating_PutUserRating",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "rating",
            "in": "body",
            "description": "Rating to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Rating.RatingModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "List the request actions.",
        "operationId": "UserRequestAction_GetUserRequestActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "List the request actions.",
        "operationId": "UserRequestAction_GetUserRequestActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Anonymous/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "Gets a list of messages for an anonymous requests",
        "operationId": "UserRequestAction_GetAnonymousUserRequstionActionsOld",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Token for device",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "ID for last known request action id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Check only staff requests",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Anonymous/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "List request actions for an anonymous user",
        "operationId": "UserRequestAction_GetAnonymousRequestActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "ID for palce",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceToken",
            "in": "query",
            "description": "Unique id for device",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Action.RequestActionCommonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/{userId}/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "List the request actions (new)",
        "operationId": "UserRequestAction_GetUserRequestActionsSimple",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for the request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Action.RequestActionCommonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/Me/Requests/{requestId}/Actions": {
      "get": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "List the request actions for me (new)",
        "operationId": "UserRequestAction_GetUserRequestActionsMeSimple",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID for request",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.Action.RequestActionCommonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/{requestId}/Actions/{lastViewedRequestActionId}/LastViewed": {
      "put": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "Update last viewed user request action.",
        "operationId": "UserRequestAction_PutUserRequestLastViewedAction",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastViewedRequestActionId",
            "in": "path",
            "description": "Id of the last viewed request action.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Requests/{requestId}/Actions/{lastViewedRequestActionId}/LastViewed": {
      "put": {
        "tags": [
          "User Request Actions"
        ],
        "summary": "Update last viewed user request action.",
        "operationId": "UserRequestAction_PutUserRequestLastViewedAction",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastViewedRequestActionId",
            "in": "path",
            "description": "Id of the last viewed request action.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "List requests (new).",
        "operationId": "UserRequest_GetUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Include archived requests.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/{userId}/Requests": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "List requests (new).",
        "operationId": "UserRequest_GetUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Include archived requests.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Requests": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "List requests (new).",
        "operationId": "UserRequest_GetUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Include archived requests.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Requests"
        ],
        "summary": "Submit a request for the logged in user",
        "operationId": "UserRequest_PutRequest",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestTemplateId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
              }
            }
          },
          {
            "name": "additionalInformation",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkoutMs",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/Me/Requests": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "List requests (new).",
        "operationId": "UserRequest_GetUserRequests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lastKnownRequestActionId",
            "in": "query",
            "description": "Id of the last known request action.  Pass in 0 on the initial call, and pass in the lastKnownRequestActionId from the result on subsequent calls.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Include archived requests.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/{requestId}": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "Get request.",
        "operationId": "UserRequest_GetUserRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestCommonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Requests/{requestId}": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "Get request.",
        "operationId": "UserRequest_GetUserRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Id of the request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "staff",
            "in": "query",
            "description": "Include staff requests.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestCommonModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/Validate/Places/{placeId}": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "Validate if a user has been approved by their current place.",
        "description": "Gets a true or false on if the user is currently validated. This check is done by comparing the check out date, the user's current place, and if the user has already been valided by the current place's staff.",
        "operationId": "UserRequest_GetUserValidate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/Approve/Places/{placeId}": {
      "post": {
        "tags": [
          "User Requests"
        ],
        "summary": "Approve a user request.",
        "operationId": "UserRequest_PostUserRequestApprove",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/Block/Places/{placeId}": {
      "post": {
        "tags": [
          "User Requests"
        ],
        "summary": "Block a user request.",
        "operationId": "UserRequest_PostUserRequestBlock",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/Deny/Places/{placeId}": {
      "post": {
        "tags": [
          "User Requests"
        ],
        "summary": "Deny a user request.",
        "operationId": "UserRequest_PostUserRequestDeny",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Requests/PendingCount": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "Get count of my pending requests.",
        "operationId": "UserRequest_GetMyPendingRequestsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.Base.CountModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/Requests/FollowedIds": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "List of ids of requests being followed by a user.",
        "operationId": "UserRequest_GetFollowedRequestIds",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Places/{placeId}/Users/Me/Status": {
      "get": {
        "tags": [
          "User Requests"
        ],
        "summary": "Gets place check-in status for logged in user",
        "operationId": "UserRequest_GetPlaceCheckInStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.Place.PlaceStatusModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Social/Twitter/OAuth": {
      "get": {
        "tags": [
          "User Social"
        ],
        "summary": "Get twitter oauth url for a user.",
        "operationId": "UserSocial_GetUserSocialTwitterOAuthUrl",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "callbackUrl",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Social/Twitter": {
      "post": {
        "tags": [
          "User Social"
        ],
        "summary": "Post a tweet for a user.",
        "operationId": "UserSocial_PostUserSocialTwitterTweet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "oAuthToken",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "oAuthVerifier",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "tweet",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Stays": {
      "get": {
        "tags": [
          "User Stays"
        ],
        "summary": "Get list of stays",
        "operationId": "UserStay_GetUserStays",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "ID of place",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "MM-DD-YYYY",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "MM-DD-YYYY",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user.",
        "operationId": "User_GetUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get logged in user.",
        "operationId": "User_GetUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/Me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get logged in user.",
        "operationId": "User_GetUserV2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update logged in user.",
        "operationId": "User_PutUserV2",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "updateProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Account": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user models.",
        "operationId": "User_UpdateUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "User's first name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "User's last name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "New email address.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "ID for user to be updated (user ID).",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "New phone number.",
            "required": false,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role for reach group.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "reachGroupId",
            "in": "query",
            "description": "ID for reach group.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "ID for account.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserPlaceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds a new user to an account.",
        "operationId": "User_AddUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "User's first name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "User's last name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "User's email.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "User's password.",
            "required": true,
            "type": "string"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "User's phone number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role that user will have.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "reachGroupId",
            "in": "query",
            "description": "ID of reach group.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "ID of account.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserPlaceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Account/EmptyPassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds a new user to an account without sending a password in",
        "operationId": "User_AddUserEmptyPassword",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "User's first name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "User's last name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "User's email.",
            "required": true,
            "type": "string"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "User's phone number",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role that user will have.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "reachGroupId",
            "in": "query",
            "description": "ID of reach group.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "ID of account.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserPlaceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Add or update a user.",
        "operationId": "User_PutUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to add or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "New users email (NEW USER ONLY)",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "password",
            "in": "query",
            "description": "New users password (NEW USER ONLY)",
            "required": false,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Me/Password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update your password.",
        "operationId": "User_PostUpdateUserPassword",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "oldPassword",
            "in": "query",
            "description": "Old password",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPassword",
            "in": "query",
            "description": "New password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Users/Me/Password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update your password.",
        "operationId": "User_PostUpdateUserPassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "passwordModel",
            "in": "body",
            "description": "New password model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Password.NewPasswordModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/Password/Forgot": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sets a reset token and sends user an email asking for a password reset",
        "operationId": "User_ForgotPassword",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "Email address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/Users/Password/Forgot": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "V2 implementation of forgot password. Different work",
        "operationId": "User_ForgotPasswordV2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User's email address",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/Users/SendVerificationEmail": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request verification email",
        "operationId": "User_SendVerificationEmail",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/ReachGroups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a users reach roles in a tree view format.",
        "operationId": "User_GetUserReachGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for the user's record",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeIDK.Models.ReachGroup.ReachGroupModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/ReachGroupMaps": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets simple reach group user mappsing for a specific user",
        "operationId": "User_GetReachUserGroupMap",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.ReachGroup.ReachUserGroupMapModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/ReachGroup/{reachGroupId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Removes a user from a reach group",
        "operationId": "User_RemoveUserReachGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for user",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reachGroupId",
            "in": "path",
            "description": "ID for reach group",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v1/Users/{userId}/accountUsers": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets users for the specific account the user is assigned to. Defaults to currently signed in user if 0 is passed",
        "operationId": "User_GetUsersForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID for user",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.Models.User.UserReachGroupModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Categories": {
      "get": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Gets a list of request categories for place",
        "operationId": "RequestTemplatesCategory_QueryCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Updates a request category",
        "operationId": "RequestTemplatesCategory_UpdateCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Category to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Adds a new request category.",
        "operationId": "RequestTemplatesCategory_AddCategory",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Category to be added.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Categories/{categoryId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Gets a single request category",
        "operationId": "RequestTemplatesCategory_GetCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id for category",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Deletes a request category.",
        "operationId": "RequestTemplatesCategory_DeleteCategory",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id for category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Categories/{categoryId}/Children": {
      "get": {
        "tags": [
          "V2 Place Request Template Categories"
        ],
        "summary": "Gets child templates of request category",
        "operationId": "RequestTemplatesCategory_GetChildTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id for category.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/EtaActions": {
      "get": {
        "tags": [
          "V2 Place Request Template Eta Actions"
        ],
        "summary": "List request guest etaActions.",
        "operationId": "RequestTemplatesEtaAction_GetRequestTemplateEtaActions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Eta Actions"
        ],
        "summary": "Add or update a request guest etaAction.",
        "operationId": "RequestTemplatesEtaAction_PutRequestTemplateEtaAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaAction",
            "in": "body",
            "description": "Request guest etaAction to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Eta Actions"
        ],
        "summary": "Adds a request guest etaAction",
        "operationId": "RequestTemplatesEtaAction_AddRequestTemplateEtaAction",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id for template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/EtaActions/{etaActionId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Eta Actions"
        ],
        "summary": "Get request guest etaAction.",
        "operationId": "RequestTemplatesEtaAction_GetRequestTemplateEtaAction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaActionId",
            "in": "path",
            "description": "Id of the request guest etaAction.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Eta Actions"
        ],
        "summary": "Delete request guest etaAction.",
        "operationId": "RequestTemplatesEtaAction_DeleteRequestTemplateEtaAction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "etaActionId",
            "in": "path",
            "description": "Id of the request guest etaAction.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/GroupExceptions": {
      "get": {
        "tags": [
          "V2 Place Request Template Group Exceptions"
        ],
        "summary": "List request guest groupExceptions by template.",
        "operationId": "RequestTemplatesGroupException_GetRequestTemplateGroupExceptionsByTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Group Exceptions"
        ],
        "summary": "Update a request guest groupException.",
        "operationId": "RequestTemplatesGroupException_PutRequestTemplateGroupException",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupException",
            "in": "body",
            "description": "Request guest groupException to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Group Exceptions"
        ],
        "summary": "Add a request guest groupException.",
        "operationId": "RequestTemplatesGroupException_AddRequestTemplateGroupException",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupException",
            "in": "body",
            "description": "Request guest groupException to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/GroupExceptions/{groupExceptionId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Group Exceptions"
        ],
        "summary": "Get request guest groupException.",
        "operationId": "RequestTemplatesGroupException_GetRequestTemplateGroupException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupExceptionId",
            "in": "path",
            "description": "Id of the request guest groupException.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Group Exceptions"
        ],
        "summary": "Delete request guest groupException.",
        "operationId": "RequestTemplatesGroupException_DeleteRequestTemplateGroupException",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupExceptionId",
            "in": "path",
            "description": "Id of the request guest groupException.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Options/{optionId}/Choices/{choiceId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Guest Option Choices"
        ],
        "operationId": "RequestOptionChoices_GetRequestOptionChoice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "choiceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionChoiceResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Guest Option Choices"
        ],
        "operationId": "RequestOptionChoices_UpdateRequestOptionChoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "choiceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "choice",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionChoiceResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Guest Option Choices"
        ],
        "operationId": "RequestOptionChoices_DeleteRequestOptionChoice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "choiceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Options/{optionId}/Choices": {
      "get": {
        "tags": [
          "V2 Place Request Template Guest Option Choices"
        ],
        "operationId": "RequestOptionChoices_QueryRequestOptionChoice",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionChoiceResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Options": {
      "get": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "List request guest options.",
        "operationId": "RequestTemplatesOption_GetRequestTemplateOptions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "Add or update a request guest option.",
        "operationId": "RequestTemplatesOption_PutRequestTemplateOption",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "option",
            "in": "body",
            "description": "Request guest option to be added or updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "Adds a request guest option",
        "operationId": "RequestTemplatesOption_AddRequestTemplateOption",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id for template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Options/{optionId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "Get request guest option.",
        "operationId": "RequestTemplatesOption_GetRequestTemplateOption",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "Id of the request guest option.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "Delete request guest option.",
        "operationId": "RequestTemplatesOption_DeleteRequestTemplateOption",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "Id of the request guest option.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Options/Types": {
      "get": {
        "tags": [
          "V2 Place Request Template Guest Options"
        ],
        "summary": "Get list of option types",
        "operationId": "RequestTemplatesOption_GetOptionTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/StockResponses": {
      "get": {
        "tags": [
          "V2 Place Request Template Stock Responses"
        ],
        "summary": "List request stock responses.",
        "operationId": "RequestTemplatesStockResponse_GetRequestTemplateStockResponses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accept",
            "in": "query",
            "description": "Return only messages used for accepted",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Stock Responses"
        ],
        "summary": "Add or update a request stock response.",
        "operationId": "RequestTemplatesStockResponse_PutRequestTemplateStockResponse",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Stock Responses"
        ],
        "summary": "Adds request stock response.",
        "operationId": "RequestTemplatesStockResponse_AddRequestTemplateStockResponse",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id for template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/StockResponses/{stockResponseId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Stock Responses"
        ],
        "summary": "Get request stock response.",
        "operationId": "RequestTemplatesStockResponse_GetRequestTemplateStockResponse",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponseId",
            "in": "path",
            "description": "Id of the request stock response.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Stock Responses"
        ],
        "summary": "Delete request stock response.",
        "operationId": "RequestTemplatesStockResponse_DeleteRequestTemplateStockResponse",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stockResponseId",
            "in": "path",
            "description": "Id of the request stock response.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Triggers": {
      "get": {
        "tags": [
          "V2 Place Request Template Triggers"
        ],
        "summary": "List request guest triggers.",
        "operationId": "RequestTemplatesTrigger_GetRequestTemplateTriggers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Template Triggers"
        ],
        "summary": "Add or update a request guest trigger.",
        "operationId": "RequestTemplatesTrigger_PutRequestTemplateTrigger",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Template Triggers"
        ],
        "summary": "Adds a new request template trigger",
        "operationId": "RequestTemplatesTrigger_AddRequestTemplateTrigger",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id for tempalte",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
            }
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{templateId}/Triggers/{triggerId}": {
      "get": {
        "tags": [
          "V2 Place Request Template Triggers"
        ],
        "summary": "Get request guest trigger.",
        "operationId": "RequestTemplatesTrigger_GetRequestTemplateTrigger",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "triggerId",
            "in": "path",
            "description": "Id of the request guest trigger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "NOT SUPPORTED: Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Template Triggers"
        ],
        "summary": "Delete request guest trigger.",
        "operationId": "RequestTemplatesTrigger_DeleteRequestTemplateTrigger",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "triggerId",
            "in": "path",
            "description": "Id of the request guest trigger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates": {
      "get": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Gets a list of request templates for a hotel.",
        "operationId": "RequestTemplates_GetRequestTemplatesForHotel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceListModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Updates a request template",
        "operationId": "RequestTemplates_UpdateTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Request template to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Adds a new Request Template",
        "operationId": "RequestTemplates_AddRequestTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Request Template model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/Types": {
      "get": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Gets request template types",
        "operationId": "RequestTemplates_GetRequestTemplateTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/{id}": {
      "get": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Get request template.",
        "operationId": "RequestTemplates_GetRequestTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the request template.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "culture",
            "in": "query",
            "description": "Client culture. e.g. \"en_US\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MonsciergeIDK.RequestTemplates.Models.RequestTemplateModel"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Delete request template",
        "operationId": "RequestTemplates_DeleteTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id of the place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the template",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    },
    "/v2/Places/{placeId}/Requests/Templates/Sorted": {
      "get": {
        "tags": [
          "V2 Place Request Templates"
        ],
        "summary": "Get Sorted List of top level Templates AND Categories.",
        "operationId": "RequestTemplates_GetSortedRequestTemplates",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "description": "Id for place",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "isForAnonymousUser",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "all",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "staff",
            "in": "query",
            "description": "",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "culture",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonsciergeAPI.Models.RequestTemplates.RequestTemplateSortingResourceModel"
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              ""
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "MonsciergeIDK.AdBoards.Models.AdBoardModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "orientation": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "beacon_id": {
          "format": "int32",
          "type": "integer"
        },
        "campaign_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.AdminDivision.AdminDivisionCollectionModel": {
      "title": "admin_division_collection",
      "type": "object",
      "properties": {
        "admin_divisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.AdminDivision.AdminDivisionResourceModel"
          }
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.LinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.AdminDivision.AdminDivisionResourceModel": {
      "title": "admin_division_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Id of the resource.",
          "default": 100,
          "type": "integer"
        },
        "admin_division_code": {
          "description": "The two-character administrative division (state, province, etc.) code.",
          "default": "OK",
          "type": "string"
        },
        "name": {
          "description": "The name of the administrative division.",
          "default": "Oklahoma",
          "type": "string"
        },
        "country_code": {
          "description": "The ISO 3166-1 Alpha-2 country code.",
          "default": "US",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.AdminDivision.AdminDivisionLinkModel",
          "readOnly": true
        }
      }
    },
    "MonsciergeAPI.Models.LinkModel": {
      "title": "link",
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.AdminDivision.AdminDivisionLinkModel": {
      "title": "admin_division_link",
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "self": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Ads.Models.AdListModel": {
      "type": "object",
      "properties": {
        "ad_id": {
          "format": "int32",
          "type": "integer"
        },
        "location": {
          "enum": [
            "Home",
            "HotelInfo",
            "MapsDirections",
            "Recommended",
            "TravelTools",
            "Weather",
            "Postcard"
          ],
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "image_path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Ads.Models.AdModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "facebook_url": {
          "type": "string"
        },
        "twitter_url": {
          "type": "string"
        },
        "account_id": {
          "format": "int32",
          "type": "integer"
        },
        "address_one": {
          "type": "string"
        },
        "address_two": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "hours": {
          "type": "string"
        },
        "start_date": {
          "format": "date-time",
          "type": "string"
        },
        "end_date": {
          "format": "date-time",
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "jump_to_state": {
          "format": "int32",
          "type": "integer"
        },
        "target_gender": {
          "format": "int32",
          "type": "integer"
        },
        "target_age_range": {
          "format": "int32",
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "landscape_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "ad_board_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Ads.Models.AdImageModel"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Ads.Models.DeviceAdMapModel"
          }
        },
        "image": {
          "type": "string"
        },
        "landscape_image": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Ads.Models.AdImageModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ad_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Ads.Models.DeviceAdMapModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ad_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "location": {
          "enum": [
            "Home",
            "HotelInfo",
            "MapsDirections",
            "Recommended",
            "TravelTools",
            "Weather",
            "Postcard"
          ],
          "type": "string"
        }
      }
    },
    "System.Object": {
      "title": "object",
      "type": "object",
      "properties": {}
    },
    "MonsciergeAPI.Models.Amenities.V2.AmenityResourceModel": {
      "title": "amenity_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "child_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Features.Models.ChildAmenityModel"
          }
        },
        "contact_desc": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "menus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.Menu.MenuBaseModel"
          }
        },
        "review": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ReviewModel"
        },
        "placemark": {
          "type": "string"
        },
        "schedule_desc": {
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ScheduleModel"
          }
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.AmenityPhoneModel"
          }
        },
        "address": {
          "$ref": "#/definitions/MonsciergeIDK.Locations.Models.LocationModel"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.UriModel"
          }
        },
        "is_active": {
          "type": "boolean"
        },
        "mobile_active": {
          "type": "boolean"
        },
        "has_dining_order": {
          "type": "boolean"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "tv_enabled": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "has_menus": {
          "type": "boolean"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "name": {
          "default": "Pool",
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.Base.BaseUriModel": {
      "title": "base_uri",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the URL.",
          "default": "Homepage",
          "type": "string"
        },
        "uri": {
          "description": "The URL.",
          "default": "http://monscierge.com",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Features.Models.ChildAmenityModel": {
      "type": "object",
      "properties": {
        "child_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Features.Models.ChildAmenityModel"
          }
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "map_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.Menu.MenuBaseModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "close_ms": {
          "format": "int64",
          "type": "integer"
        },
        "has_menu_items": {
          "type": "boolean"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "open_ms": {
          "format": "int64",
          "type": "integer"
        },
        "map_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Models.ReviewModel": {
      "type": "object",
      "properties": {
        "average_rating": {
          "format": "double",
          "type": "number"
        },
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ReviewSimpleModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.ScheduleModel": {
      "type": "object",
      "properties": {
        "close_ms": {
          "format": "int64",
          "type": "integer"
        },
        "day_of_week": {
          "type": "string"
        },
        "open_ms": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Models.AmenityPhoneModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "type": "integer"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Locations.Models.LocationModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "f_kcreated_by_user": {
          "format": "int32",
          "type": "integer"
        },
        "f_kupdated_by_user": {
          "format": "int32",
          "type": "integer"
        },
        "sub_premise": {
          "type": "string"
        },
        "premise": {
          "type": "string"
        },
        "street_number": {
          "type": "string"
        },
        "street_address": {
          "type": "string"
        },
        "route": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "administrative_area": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "postal_code_sufix": {
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "google_place_id": {
          "type": "string"
        },
        "formatted_address": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.UriModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Unknown",
            "AdHocEventSyncer",
            "Booking",
            "Facebook",
            "HotSos",
            "Rewards",
            "Resource",
            "ShuttleTracker",
            "Sponsorship",
            "Synergey",
            "Twitter"
          ],
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.ImageListModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.ReviewSimpleModel": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "review": {
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        },
        "date_of_review": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Amenities.V2.AmenityResourceListModel": {
      "title": "amenity_resource_list",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "has_menus": {
          "type": "boolean"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "name": {
          "default": "Pool",
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.Amenities.V2.AmenityResourceSortedModel": {
      "title": "amenity_resource_sorted",
      "type": "object",
      "properties": {
        "is_category": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        }
      }
    },
    "MonsciergeIDK.Features.Models.AmenityListModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "has_menus": {
          "type": "boolean"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "name": {
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.Features.Models.AmenityModel": {
      "type": "object",
      "properties": {
        "child_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Features.Models.ChildAmenityModel"
          }
        },
        "contact_desc": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "menus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.Menu.MenuBaseModel"
          }
        },
        "review": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ReviewModel"
        },
        "placemark": {
          "type": "string"
        },
        "schedule_desc": {
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ScheduleModel"
          }
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.AmenityPhoneModel"
          }
        },
        "address": {
          "$ref": "#/definitions/MonsciergeIDK.Locations.Models.LocationModel"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.UriModel"
          }
        },
        "is_active": {
          "type": "boolean"
        },
        "mobile_active": {
          "type": "boolean"
        },
        "has_dining_order": {
          "type": "boolean"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "tv_enabled": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "has_menus": {
          "type": "boolean"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "name": {
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.Amenities.V2.AmenityCategoryResourceModel": {
      "title": "amenity_category_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "is_top_level": {
          "type": "boolean"
        },
        "is_active": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Amenity.AmenityModel": {
      "title": "amenity",
      "type": "object",
      "properties": {
        "contact_desc": {
          "type": "string"
        },
        "desc": {
          "description": "A description of the amenity.",
          "type": "string"
        },
        "menus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.MenuBaseModel"
          }
        },
        "review": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.ReviewModel"
        },
        "placemark": {
          "type": "string"
        },
        "schedule_desc": {
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.ScheduleModel"
          }
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.AmenityPhoneModel"
          }
        },
        "address": {
          "$ref": "#/definitions/MonsciergeIDK.Locations.Models.LocationModel"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "child_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.ChildAmenityModel"
          }
        },
        "is_active": {
          "type": "boolean"
        },
        "mobile_active": {
          "type": "boolean"
        },
        "has_dining_order": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "tv_enabled": {
          "type": "boolean"
        },
        "has_menus": {
          "description": "Whether or not the amenity has menus. <code>True</code> for has menus, <code>false</code> if not.",
          "type": "boolean"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the amenity.",
          "default": "Pool",
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The amenity ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.MenuBaseModel": {
      "title": "menu_base",
      "type": "object",
      "properties": {
        "close_ms": {
          "format": "int64",
          "description": "The time when the menu closes as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "has_menu_items": {
          "description": "Whether or not the menu has items. <code>True</code> if it does, <code>false</code> if not.",
          "type": "boolean"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the menu.",
          "default": "Breakfast Menu",
          "type": "string"
        },
        "open_ms": {
          "format": "int64",
          "description": "The time when the menu opens as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "map_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The menu ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Feedback.ReviewModel": {
      "title": "review",
      "type": "object",
      "properties": {
        "average_rating": {
          "format": "double",
          "type": "number"
        },
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.ReviewSimpleModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Base.ScheduleModel": {
      "title": "schedule",
      "type": "object",
      "properties": {
        "close_ms": {
          "format": "int64",
          "description": "The time the schedule closes as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "day_of_week": {
          "description": "The day of the week the schedule will be on.",
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "open_ms": {
          "format": "int64",
          "description": "The time the schedule opens as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Base.UriModel": {
      "title": "uri",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The URL ID.",
          "type": "integer"
        },
        "type": {
          "description": "The type of URL.",
          "enum": [
            "Unknown",
            "AdHocEventSyncer",
            "Booking",
            "Facebook",
            "HotSos",
            "Rewards",
            "Resource",
            "ShuttleTracker",
            "Sponsorship",
            "Synergey",
            "Twitter"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the URL.",
          "default": "Homepage",
          "type": "string"
        },
        "uri": {
          "description": "The URL.",
          "default": "http://monscierge.com",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Amenity.ChildAmenityModel": {
      "title": "child_amenity",
      "type": "object",
      "properties": {
        "child_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.ChildAmenityModel"
          }
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "map_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Feedback.ReviewSimpleModel": {
      "title": "review_simple",
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "review": {
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        },
        "date_of_review": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestOptionValueModel": {
      "title": "request_option_value",
      "type": "object",
      "properties": {
        "option": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionBaseModel"
        },
        "value_ms": {
          "format": "int64",
          "description": "The option's value in milliseconds.",
          "type": "integer"
        },
        "value_number": {
          "format": "int32",
          "description": "The option's value as a number.",
          "type": "integer"
        },
        "value_bool": {
          "type": "boolean"
        },
        "value_text": {
          "description": "The option's value as a string of text.",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionBaseModel": {
      "title": "request_template_option_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the option.",
          "default": "Email",
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "description": "The Id of the request template",
          "type": "integer"
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.RequestTemplates.Models.RequestOptionChoicesBaseModel"
          }
        },
        "type": {
          "enum": [
            "Unknown",
            "Number",
            "DateTime",
            "Text",
            "Message",
            "Boolean",
            "Picklist"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request option ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.RequestTemplates.Models.RequestOptionChoicesBaseModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Default"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestsSubBaseModel": {
      "title": "last_known_requests_sub_base",
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestSubBaseModel"
          }
        },
        "last_known_request_action_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestSubBaseModel": {
      "title": "request_sub_base",
      "type": "object",
      "properties": {
        "created_ms": {
          "format": "int64",
          "description": "The time the request was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "eta_ms": {
          "format": "int64",
          "description": "The ETA the request should be completed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "following": {
          "description": "Whether or not the user is following the request. <code>True</code> for following, <code>false</code> if not.",
          "type": "boolean"
        },
        "latest_action_ms": {
          "format": "int64",
          "description": "The time the last action was created on the request as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "requester_user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "status": {
          "description": "The status of the request.",
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
        },
        "unread": {
          "description": "Whether or not the request is unread. <code>True</code> for unread, <code>false</code> if not.",
          "type": "boolean"
        },
        "visible": {
          "description": "Whether or not the request is visible. <code>True</code> for visible, <code>false</code> if not.",
          "type": "boolean"
        },
        "room_number": {
          "description": "The room number for the request",
          "type": "string"
        },
        "requested_for": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel": {
      "title": "request_group_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the group.",
          "default": "Housekeeping",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request group ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.User.UserBaseModel": {
      "title": "user_base",
      "type": "object",
      "properties": {
        "display_name": {
          "description": "The user's display name.",
          "default": "JAppleseed1234",
          "type": "string"
        },
        "first_name": {
          "description": "The user's first name.",
          "default": "Johnny",
          "type": "string"
        },
        "last_name": {
          "description": "The user's last name.",
          "default": "Appleseed",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the user's profile image",
          "default": "https://secure.gravatar.com/bg/1428/e9db3f026b7ce7748e58169cecb4980f",
          "type": "string"
        },
        "primary_email": {
          "description": "The user's primary email.",
          "default": "johnny.appleseed@monscierge.com",
          "type": "string"
        },
        "primary_phone_number": {
          "description": "The user's primary phone number.",
          "default": "(555) 555-5555",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The user ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel": {
      "title": "request_template_base",
      "type": "object",
      "properties": {
        "is_active": {
          "description": "Whether or not the template is active. <code>True</code> for active, <code>false</code> if not.",
          "type": "boolean"
        },
        "group_id": {
          "format": "int32",
          "description": "The group ID the template belongs to.",
          "default": 42,
          "type": "integer"
        },
        "name": {
          "description": "The name of the template.",
          "default": "General",
          "type": "string"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel",
          "description": "The place the template belongs to."
        },
        "stock_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseBaseModel"
          }
        },
        "image_url": {
          "description": "The image filename to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "string"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request template ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceBaseModel": {
      "title": "place_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the place.",
          "default": "Sheraton",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseBaseModel": {
      "title": "request_template_stock_response_base",
      "type": "object",
      "properties": {
        "template_id": {
          "format": "int32",
          "description": "Id of the request template.",
          "type": "integer"
        },
        "message": {
          "description": "The body of the response.",
          "type": "string"
        },
        "eta_s": {
          "format": "int32",
          "description": "The estimated time the request should be completed in seconds.",
          "default": 900,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The request stock response ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Application.ApplicationTokenModel": {
      "title": "application_token",
      "type": "object",
      "properties": {
        "token": {
          "description": "The application token",
          "type": "string"
        },
        "notification_hub": {
          "description": "The iOS notification hub name",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The application token ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Application.Webhook.WebhookModel": {
      "title": "webhook",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of webhook.",
          "enum": [
            "Beacon",
            "Sms"
          ],
          "type": "string"
        },
        "url": {
          "description": "The callback URL which will be sent the webhook payload data.",
          "default": "https://example.com/webhooks/monscierge",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The application webhook ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Application.ApplicationModel": {
      "title": "application",
      "required": [
        "desc",
        "type",
        "name"
      ],
      "type": "object",
      "properties": {
        "client_secret": {
          "description": "The OAuth client secret.",
          "default": "bbc6d0a803ec11e584181697f925ec7b",
          "type": "string"
        },
        "desc": {
          "description": "A description of the application.",
          "default": "Your application description.",
          "type": "string"
        },
        "tokens": {
          "description": "Application tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Application.ApplicationTokenModel"
          }
        },
        "type": {
          "format": "int32",
          "description": "The application type",
          "default": 0,
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "redirect_urls": {
          "description": "Carriage return delimited list of allowed redirect urls",
          "type": "string"
        },
        "origins": {
          "description": "Carriage return delimited list of allowed origins",
          "type": "string"
        },
        "client_id": {
          "description": "The application OAuth client ID.",
          "default": "c034f59803ec11e584181697f925ec7b",
          "type": "string"
        },
        "name": {
          "description": "The name of the application.",
          "default": "App Name",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The application ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Application.ApplicationBaseModel": {
      "title": "application_base",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "client_id": {
          "description": "The application OAuth client ID.",
          "default": "c034f59803ec11e584181697f925ec7b",
          "type": "string"
        },
        "name": {
          "description": "The name of the application.",
          "default": "App Name",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The application ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Beacon.BeaconUserNearbyModel": {
      "title": "beacon_user_nearby",
      "type": "object",
      "properties": {
        "beacon_id": {
          "format": "int32",
          "description": "The ID of the beacon.",
          "default": 42,
          "type": "integer"
        },
        "entered_on_ms": {
          "format": "int64",
          "description": "The time the user entered the range of the beacon as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "range": {
          "enum": [
            "Unknown",
            "Far",
            "Near",
            "Immediate"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The beacon user ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Beacon.BeaconResponse": {
      "title": "beacon_response",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Ok",
            "Message"
          ],
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/System.Object"
        }
      }
    },
    "MonsciergeAPI.Models.Brand.BrandBaseModel": {
      "title": "brand_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the brand.",
          "default": "Travelodge",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The brand ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Brand.BrandModel": {
      "title": "brand",
      "type": "object",
      "properties": {
        "heritage_url": {
          "description": "The URL for the brand.",
          "default": "http://www.monscierge.com",
          "type": "string"
        },
        "mobile_reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "explore_hotels_reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "postcard_hash_tag_list": {
          "type": "string"
        },
        "postcard_footer_html": {
          "type": "string"
        },
        "postcard_email_subject": {
          "type": "string"
        },
        "facebook_page_id": {
          "type": "string"
        },
        "logo_on_black_url": {
          "type": "string"
        },
        "logo_on_color_url": {
          "type": "string"
        },
        "logo_on_white_url": {
          "type": "string"
        },
        "brand_slugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Brand.BrandSlugModel"
          }
        },
        "name": {
          "description": "Name of the brand.",
          "default": "Travelodge",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The brand ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Brand.BrandSlugModel": {
      "title": "brand_slug",
      "type": "object",
      "properties": {
        "name": {
          "description": "The brand slug name.",
          "default": "travelodge",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The brand slug ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccountForgotRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "hotel_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.PasswordRecoverResponse": {
      "type": "object",
      "properties": {
        "registration_status": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccountAuthenticateWifiAuthRequest": {
      "type": "object",
      "properties": {
        "guest_loginid": {
          "type": "string"
        },
        "guest_lastname": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.AuthenticateWifiResult": {
      "type": "object",
      "properties": {
        "result_code": {
          "type": "string"
        },
        "result_description": {
          "type": "string"
        },
        "member_type": {
          "type": "string"
        },
        "member_level": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccountActivateRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "property_code": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ActivateMembershipResponse": {
      "type": "object",
      "properties": {
        "activation_result": {
          "type": "string"
        },
        "result_code": {
          "type": "string"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccounteConciergeRegisterRegistrationRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "login_id": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "sex": {
          "type": "string"
        },
        "member_type": {
          "type": "string"
        },
        "date_of_birth": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile": {
      "type": "object",
      "properties": {
        "profile_id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state_code": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "date_of_birth": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "login_id": {
          "type": "string"
        },
        "do_not_mail": {
          "type": "boolean"
        },
        "do_not_email": {
          "type": "boolean"
        },
        "do_not_call": {
          "type": "boolean"
        },
        "remarks": {
          "type": "string"
        },
        "member_type": {
          "type": "string"
        },
        "member_id": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "joined_date": {
          "type": "string"
        },
        "created_source": {
          "type": "string"
        },
        "points_balance": {
          "format": "int32",
          "type": "integer"
        },
        "stays_until_free_night": {
          "format": "int32",
          "type": "integer"
        },
        "vip": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccountLoginRequest": {
      "type": "object",
      "properties": {
        "member_id": {
          "type": "string"
        },
        "login_id": {
          "type": "string"
        },
        "profile_password": {
          "type": "string"
        },
        "profile_email": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileResponse": {
      "type": "object",
      "properties": {
        "guest_preference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestPreferences"
          }
        },
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestPreferences": {
      "type": "object",
      "properties": {
        "preference_type": {
          "type": "string"
        },
        "preference_code": {
          "type": "string"
        },
        "preference_inactive": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.AccountUpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        },
        "crm_property_code": {
          "type": "string"
        },
        "old_password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.UpdatingResponse": {
      "type": "object",
      "properties": {
        "result": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.AwardsResponse": {
      "type": "object",
      "properties": {
        "returned_rows": {
          "format": "int32",
          "type": "integer"
        },
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynReward"
          }
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynReward": {
      "type": "object",
      "properties": {
        "date_issued": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_description": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        },
        "points": {
          "format": "int32",
          "type": "integer"
        },
        "voucher_number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileSearchRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "profile_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ProfileLookUpSearchResponse": {
      "type": "object",
      "properties": {
        "profile_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.SimpleProfileInfo"
          }
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.SimpleProfileInfo": {
      "type": "object",
      "properties": {
        "salutation": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.StateProv"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profile_id": {
          "type": "string"
        },
        "birth_date": {
          "type": "string"
        },
        "membership_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.SimpleProfileMembershipInfo"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.StateProv": {
      "type": "object",
      "properties": {
        "state_code": {
          "type": "string"
        },
        "state_name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.SimpleProfileMembershipInfo": {
      "type": "object",
      "properties": {
        "program_code": {
          "type": "string"
        },
        "membership_id": {
          "type": "string"
        },
        "loyal_level": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.MemberProfileRegistrationRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "login_id": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "sex": {
          "type": "string"
        },
        "member_type": {
          "type": "string"
        },
        "date_of_birth": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileStayResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "returned_rows": {
          "format": "int32",
          "type": "integer"
        },
        "stay": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynStay"
          }
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynStay": {
      "type": "object",
      "properties": {
        "arrival": {
          "type": "string"
        },
        "departure": {
          "type": "string"
        },
        "pms_confirmation_number": {
          "type": "string"
        },
        "pms_property_code": {
          "type": "string"
        },
        "pms_property_name": {
          "type": "string"
        },
        "reservation_status": {
          "type": "string"
        },
        "point_value": {
          "format": "int32",
          "type": "integer"
        },
        "room_type_code": {
          "type": "string"
        },
        "room_type_description": {
          "type": "string"
        },
        "room_revenue": {
          "format": "double",
          "type": "number"
        },
        "food_beverage_revenue": {
          "format": "double",
          "type": "number"
        },
        "other_revenue": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "guest_preference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestPreferences"
          }
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.JsonPatchRequest": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.UpdateProfileModel": {
      "type": "object",
      "properties": {
        "guest_profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "guest_preference": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestPreferences"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.NewsletterResponseUnit": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynSubscription"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynSubscription": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.SurveyGetResponse": {
      "type": "object",
      "properties": {
        "profile_id": {
          "format": "int32",
          "type": "integer"
        },
        "survey": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.Survey"
          }
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.Survey": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "answer": {
          "type": "string"
        },
        "answer_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ResponseBase": {
      "type": "object",
      "properties": {
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynSurveyResponseModel": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynQuestion"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynQuestion": {
      "type": "object",
      "properties": {
        "question_id": {
          "format": "int32",
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynOptions"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynOptions": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.VoucherRequest": {
      "type": "object",
      "properties": {
        "profile_id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "voucher_number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.VoucherResponse": {
      "type": "object",
      "properties": {
        "result_code": {
          "type": "string"
        },
        "result_description": {
          "type": "string"
        },
        "date_issued": {
          "type": "string"
        },
        "date_expiry": {
          "type": "string"
        },
        "award_code": {
          "type": "string"
        },
        "voucher_number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.ReinstateVoucherResponse": {
      "type": "object",
      "properties": {
        "result_code": {
          "type": "string"
        },
        "result_description": {
          "type": "string"
        },
        "date_redeemed": {
          "type": "string"
        },
        "reference": {
          "format": "int32",
          "type": "integer"
        },
        "date_issued": {
          "type": "string"
        },
        "date_expiry": {
          "type": "string"
        },
        "award_code": {
          "type": "string"
        },
        "voucher_number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.WhisperScreenResult": {
      "type": "object",
      "properties": {
        "hint1": {
          "type": "string"
        },
        "hint2": {
          "type": "string"
        },
        "hint3": {
          "type": "string"
        },
        "result_code": {
          "type": "string"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "object",
          "additionalProperties": {
            "format": "date-time",
            "type": "string"
          }
        },
        "confirmation": {
          "type": "string"
        },
        "property": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.PropertyModel"
          }
        },
        "status": {
          "type": "string"
        },
        "checkin_status": {
          "enum": [
            "Unavailable",
            "Reserved",
            "CheckinAvailable",
            "WaitListed",
            "CheckedIn",
            "CheckoutAvailable",
            "CheckedOut",
            "Canceled",
            "NoShow"
          ],
          "type": "string"
        },
        "checkin_available": {
          "type": "boolean"
        },
        "checkout_available": {
          "type": "boolean"
        },
        "keys_available": {
          "type": "boolean"
        },
        "room": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomModel"
        },
        "revenue": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.InvoiceModel"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "special_requests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        },
        "stay_card_image": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.PropertyModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "phones": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Stay.RoomModel": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "room_type": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomTypeModel"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.InvoiceModel": {
      "type": "object",
      "properties": {
        "total": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AmountModel"
        },
        "current_balance": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AmountModel"
        },
        "charges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.ChargeModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/System.Object"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Stay.RoomTypeModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.AmountModel": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "amount": {
          "format": "double",
          "type": "number"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.ChargeModel": {
      "type": "object",
      "properties": {
        "charge": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AmountModel"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Profile.ProfileModel": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "emails": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "phones": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dates": {
          "type": "object",
          "additionalProperties": {
            "format": "date-time",
            "type": "string"
          }
        },
        "addresses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Locations.Models.LocationModel"
          }
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.SocialModel"
          }
        },
        "remarks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preferences": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.PreferenceModel"
          }
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        },
        "title": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Profile.CompanyModel"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Profile.SocialModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Common.PreferenceModel": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/System.Object"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Profile.CompanyModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "addresses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Locations.Models.LocationModel"
          }
        },
        "phones": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "emails": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Subscription.SubscriptionModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Survey.SurveyModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyQuestionModel"
          }
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Survey.SurveyQuestionModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "question": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyResponseModel"
          }
        },
        "response": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Survey.SurveyResponseModel"
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Survey.SurveyResponseModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.MemberProfileNotification": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynGuestProfile"
        },
        "stay": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Cendyn.Models.Response.CendynStay"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.PingRequest": {
      "type": "object",
      "properties": {
        "echo_data": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Cendyn.Models.Response.PingResponse": {
      "type": "object",
      "properties": {
        "echo_data": {
          "type": "string"
        },
        "result_code": {
          "format": "int32",
          "type": "integer"
        },
        "result_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.ChannelConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.ChannelConfig"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.ChannelConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Slideshow",
            "LiveStream",
            "LivingStage"
          ],
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "living_stage": {
          "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.LivingStageChannelConfig"
        },
        "slideshow": {
          "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.SlideshowChannelConfig"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.LivingStageChannelConfig": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "background": {
          "type": "string"
        },
        "footer": {
          "type": "string"
        },
        "livestream_url": {
          "type": "string"
        },
        "playlist_url": {
          "type": "string"
        },
        "stage_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.SlideshowChannelConfig": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.ImageModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "thumbnail_data": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.ClickRequest": {
      "type": "object",
      "properties": {
        "template": {
          "enum": [
            "Console"
          ],
          "type": "string"
        },
        "scope_type": {
          "enum": [
            "Place",
            "Device",
            "SubDevice",
            "Hotel"
          ],
          "type": "string"
        },
        "producer": {
          "enum": [
            "Lobby",
            "Mobile"
          ],
          "type": "string"
        },
        "producer_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "from_ms": {
          "format": "int64",
          "type": "integer"
        },
        "to_ms": {
          "format": "int64",
          "type": "integer"
        },
        "section_name": {
          "type": "string"
        },
        "sub_section_name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.DeviceClickSection": {
      "type": "object",
      "properties": {
        "agg_name": {
          "type": "string"
        },
        "component_name": {
          "type": "string"
        },
        "console_xaml_binding": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.DeviceClickData"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.DeviceClickData": {
      "type": "object",
      "properties": {
        "_total_hits": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.DeviceClickAggregation"
          }
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.DeviceClickAggregation": {
      "type": "object",
      "properties": {
        "total_hits": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.ClickHistogramRequest": {
      "type": "object",
      "properties": {
        "template": {
          "enum": [
            "Console"
          ],
          "type": "string"
        },
        "scope_type": {
          "enum": [
            "Place",
            "Device",
            "SubDevice",
            "Hotel"
          ],
          "type": "string"
        },
        "producer": {
          "enum": [
            "Lobby",
            "Mobile"
          ],
          "type": "string"
        },
        "producer_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "from_ms": {
          "format": "int64",
          "type": "integer"
        },
        "to_ms": {
          "format": "int64",
          "type": "integer"
        },
        "bin_type": {
          "enum": [
            "Date",
            "Field"
          ],
          "type": "string"
        },
        "bin_size": {
          "type": "string"
        },
        "field_name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.DeviceHistogramSection": {
      "type": "object",
      "properties": {
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Analytics.Models.DeviceHistogramAggregation"
          }
        },
        "_record_count": {
          "format": "int32",
          "type": "integer"
        },
        "_total_hits": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Analytics.Models.DeviceHistogramAggregation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key_as_string": {
          "type": "string"
        },
        "_total_hits": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.ClickTrack.ClickTrackResourceModel": {
      "title": "click_track_resource",
      "type": "object",
      "properties": {
        "event_date": {
          "format": "date-time",
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "action": {
          "enum": [
            "Click"
          ],
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "value_type": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Country.CountryCollectionModel": {
      "title": "country_collection",
      "type": "object",
      "properties": {
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Country.CountryResourceModel"
          }
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.LinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.Country.CountryResourceModel": {
      "title": "country_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "default": 1,
          "type": "integer"
        },
        "name": {
          "description": "Name of the country.",
          "default": "United States",
          "type": "string"
        },
        "country_code": {
          "description": "The ISO 3166-1 Alpha-2 country code.",
          "default": "US",
          "type": "string"
        },
        "min_postal_code_length": {
          "format": "int32",
          "description": "The minumum length of postal codes for the country.",
          "default": 5,
          "type": "integer"
        },
        "country_calling_code": {
          "description": "The dialing code used to prefix phone numbers for the country.",
          "default": "1",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Country.CountryLinkModel",
          "readOnly": true
        }
      }
    },
    "MonsciergeAPI.Models.Country.CountryLinkModel": {
      "title": "country_link",
      "type": "object",
      "properties": {
        "admin_divisions": {
          "type": "string"
        },
        "self": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTCurtainDevice": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "Open",
            "Closed",
            "Toggle"
          ],
          "type": "string"
        },
        "level": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Curtain",
            "Outlet",
            "Switch",
            "Thermostat"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.DeviceConfig.Models.DeviceConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "config": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceModel": {
      "type": "object",
      "properties": {
        "ref_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "class": {
          "enum": [
            "Android",
            "iOS",
            "Web",
            "Electron",
            "SMS",
            "tvOS",
            "watchOS"
          ],
          "type": "string"
        },
        "last_seen": {
          "format": "date-time",
          "type": "string"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/System.Object"
          }
        },
        "data": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceDetailModel"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceDetailModel": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceInfoModel"
        },
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Base.ExternalTranslatableString"
        },
        "is_active": {
          "type": "boolean"
        },
        "description": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Base.ExternalTranslatableString"
        },
        "fk_phone_number": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceInfoModel": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        },
        "device": {
          "type": "string"
        },
        "os_version": {
          "type": "string"
        },
        "wifi_ssid": {
          "type": "string"
        },
        "carrier_name": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceGeoLocationModel"
        },
        "memory": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceUsageModel"
        },
        "storage": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceUsageModel"
        },
        "battery": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceBatteryModel"
        },
        "locale": {
          "type": "string"
        },
        "screen_size": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceScreenSizeModel"
        },
        "density": {
          "type": "string"
        },
        "orientation": {
          "enum": [
            "Vertical",
            "Horizontal"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Base.ExternalTranslatableString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "is_dirty": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "translate": {
          "type": "boolean"
        },
        "is_machine_translated": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceGeoLocationModel": {
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceUsageModel": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "device_usage": {
          "format": "int64",
          "type": "integer"
        },
        "app_usage": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceBatteryModel": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "Unknown",
            "NotCharging",
            "Charging",
            "Full"
          ],
          "type": "string"
        },
        "battery_left": {
          "format": "float",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.Devices.Models.ExternalDeviceScreenSizeModel": {
      "type": "object",
      "properties": {
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Device.Models.DeviceModel": {
      "type": "object",
      "properties": {
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "home_screen_option": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "sent_to_printer_message": {
          "type": "string"
        },
        "theme_color_base": {
          "type": "string"
        },
        "theme_text_color1": {
          "type": "string"
        },
        "theme_text_color2": {
          "type": "string"
        },
        "theme_color1": {
          "type": "string"
        },
        "theme_color2": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "background": {
          "type": "string"
        },
        "welcome_image": {
          "type": "string"
        },
        "hotel_info_image": {
          "type": "string"
        },
        "recommended_image": {
          "type": "string"
        },
        "maps_directions_image": {
          "type": "string"
        },
        "flights_image": {
          "type": "string"
        },
        "weather_image": {
          "type": "string"
        },
        "postcard_image": {
          "type": "string"
        },
        "default_postcard_message": {
          "type": "string"
        },
        "logo_id": {
          "format": "int32",
          "type": "integer"
        },
        "background_id": {
          "format": "int32",
          "type": "integer"
        },
        "welcome_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_info_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "recommended_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "maps_directions_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "flights_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "weather_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "postcard_image_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.Device.Models.DeviceModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.Device.Models.DeviceModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.Device.Models.DeviceModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.SubDevice.Models.SubDeviceModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.SubDevice.Models.SubDeviceModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.SubDevice.Models.SubDeviceModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.SubDevice.Models.SubDeviceModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Doorlock.DoorLockRegisterModel": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventGroups.EventGroupCollectionModel": {
      "title": "event_group_collection",
      "type": "object",
      "properties": {
        "event_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventGroups.EventGroupResourceModel": {
      "title": "event_group_resource",
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "event_access_code": {
          "type": "string"
        },
        "invite_url": {
          "type": "string"
        },
        "has_events": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventLocations.EventLocationCollectionModel": {
      "title": "event_location_collection",
      "type": "object",
      "properties": {
        "event_locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventLocations.EventLocationResourceModel": {
      "title": "event_location_resource",
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "is_stage": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "refid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "has_events": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Images.ImageResourceModel": {
      "title": "image_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "event_detail_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "blob_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "content_type": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel": {
      "type": "object",
      "properties": {
        "mapping_id": {
          "format": "int32",
          "type": "integer"
        },
        "event_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "thumbnail_data": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "website": {
          "type": "string"
        },
        "event_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel": {
      "type": "object",
      "properties": {
        "event_id": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionImageModel"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionAttachmentModel"
          }
        },
        "sponsorships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventSectionSponsorshipModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Marvin.JsonPatch.JsonPatchDocument[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel]": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel]"
          },
          "readOnly": true
        }
      }
    },
    "Marvin.JsonPatch.Operations.Operation[MonsciergeIDK.MeetingsAndEvents.Models.EventSectionModel]": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/System.Object"
        },
        "path": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "from": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventDetails.EventCollectionModel": {
      "title": "event_collection",
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventDetails.EventResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventDetails.EventResourceModel": {
      "title": "event_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "occurrence_id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "local_start": {
          "format": "date-time",
          "type": "string"
        },
        "local_end": {
          "format": "date-time",
          "type": "string"
        },
        "local_start_ms": {
          "format": "int64",
          "type": "integer"
        },
        "local_end_ms": {
          "format": "int64",
          "type": "integer"
        },
        "allday": {
          "type": "boolean"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_name": {
          "type": "string"
        },
        "location_id": {
          "format": "int32",
          "type": "integer"
        },
        "location_name": {
          "type": "string"
        },
        "is_recurring": {
          "type": "boolean"
        },
        "icalendar_recurrence_rule": {
          "type": "string"
        },
        "staff_only": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "external_system_id": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventDetails.EventExpandedResourceModel": {
      "title": "event_expanded_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "occurrence_id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "local_start": {
          "format": "date-time",
          "type": "string"
        },
        "local_end": {
          "format": "date-time",
          "type": "string"
        },
        "local_start_ms": {
          "format": "int64",
          "type": "integer"
        },
        "local_end_ms": {
          "format": "int64",
          "type": "integer"
        },
        "allday": {
          "type": "boolean"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_name": {
          "type": "string"
        },
        "location_id": {
          "format": "int32",
          "type": "integer"
        },
        "location_name": {
          "type": "string"
        },
        "is_recurring": {
          "type": "boolean"
        },
        "icalendar_recurrence_rule": {
          "type": "string"
        },
        "staff_only": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "external_system_id": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "website_url": {
          "type": "string"
        },
        "map_image": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageResourceModel"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageResourceModel"
          }
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventSections.EventSectionResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventSections.EventSectionResourceModel": {
      "title": "event_section_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.EventSections.EventSectionAttachmentResourceModel"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageResourceModel"
          }
        },
        "sponsorships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventSections.EventSectionSponsorshipResourceModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.EventSections.EventSectionAttachmentResourceModel": {
      "title": "event_section_attachment_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventSections.EventSectionSponsorshipResourceModel": {
      "title": "event_section_sponsorship_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "website": {
          "type": "string"
        },
        "event_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Images.ImageResourceModel"
        }
      }
    },
    "MonsciergeIDK.Carts.Models.CartModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "feature_id": {
          "format": "int32",
          "type": "integer"
        },
        "user_id": {
          "format": "int32",
          "type": "integer"
        },
        "application_id": {
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
          }
        },
        "place_name": {
          "type": "string"
        },
        "feature_name": {
          "type": "string"
        },
        "user_first_name": {
          "type": "string"
        },
        "user_last_name": {
          "type": "string"
        },
        "total_price": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "total_price_string": {
          "type": "string",
          "readOnly": true
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestTemplateOption"
          }
        },
        "state": {
          "enum": [
            "Active",
            "Processed",
            "Abandoned"
          ],
          "type": "string"
        },
        "currency": {
          "enum": [
            "USD",
            "GBP",
            "JPY",
            "EUR"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Carts.Models.CartItemModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "section_id": {
          "format": "int32",
          "type": "integer"
        },
        "item_id": {
          "format": "int32",
          "type": "integer"
        },
        "price_id": {
          "format": "int32",
          "type": "integer"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModifierModel"
          }
        },
        "additional_info": {
          "type": "string"
        },
        "menu_name": {
          "type": "string"
        },
        "section_name": {
          "type": "string"
        },
        "item_name": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "currency": {
          "enum": [
            "USD",
            "GBP",
            "JPY",
            "EUR"
          ],
          "type": "string"
        },
        "item_price": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "item_price_string": {
          "type": "string",
          "readOnly": true
        },
        "base_price": {
          "format": "double",
          "type": "number"
        },
        "base_price_string": {
          "type": "string",
          "readOnly": true
        },
        "sub_total": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "sub_total_string": {
          "type": "string",
          "readOnly": true
        },
        "additional_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Carts.Models.CartItemModel"
          }
        },
        "parent_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Request.RequestTemplateOption": {
      "type": "object",
      "properties": {
        "default_number": {
          "format": "int32",
          "type": "integer"
        },
        "default_text": {
          "type": "string"
        },
        "max_number": {
          "format": "int32",
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "type": "integer"
        },
        "required": {
          "type": "boolean"
        },
        "watermark": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Unknown",
            "Number",
            "DateTime",
            "Text",
            "Message",
            "Boolean",
            "Picklist"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Carts.Models.CartItemModifierModel": {
      "type": "object",
      "properties": {
        "modifier_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "price_string": {
          "type": "string",
          "readOnly": true
        },
        "currency": {
          "enum": [
            "USD",
            "GBP",
            "JPY",
            "EUR"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Request.RequestOptionValue": {
      "type": "object",
      "properties": {
        "option": {
          "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestTemplateOptionBase"
        },
        "value_ms": {
          "format": "int64",
          "type": "integer"
        },
        "value_number": {
          "format": "int32",
          "type": "integer"
        },
        "value_text": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Request.RequestTemplateOptionBase": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Unknown",
            "Number",
            "DateTime",
            "Text",
            "Message",
            "Boolean",
            "Picklist"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Reservation.ReservationModel": {
      "type": "object",
      "properties": {
        "feature_id": {
          "type": "string"
        },
        "user_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "type": "string"
        },
        "image_path": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "reservation_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "special_request": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "venue_id": {
          "type": "string"
        },
        "venue_name": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "party_size": {
          "format": "int32",
          "type": "integer"
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltyProfileObject": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfile"
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfile": {
      "type": "object",
      "properties": {
        "addresses": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfileAddressGroup"
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfileAddressGroup": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfileAddress"
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.HeBSLoyaltyProfileAddress": {
      "type": "object",
      "properties": {
        "street1": {
          "type": "string"
        },
        "street2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltySubscriptionObject": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltySubscription"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.HeBS.Loyalty.Models.HeBSLoyaltySubscription": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MarketingCards.Models.MarketingCardResponse": {
      "type": "object",
      "properties": {
        "top_images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MarketingCards.Models.TopImage"
          }
        }
      }
    },
    "MonsciergeIDK.MarketingCards.Models.TopImage": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "path_retina": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Hotel.HotelAirportModel": {
      "title": "hotel_airport",
      "type": "object",
      "properties": {
        "hotel_airport_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "airport_code": {
          "type": "string"
        },
        "airport_name": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Configs.Models.BaseConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "permission": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Configs.Models.ConfigOption"
          }
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "possible_values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Configs.Models.ConfigOption": {
      "type": "object",
      "properties": {
        "permission": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "default_value": {
          "$ref": "#/definitions/System.Object"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "possible_values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Hotels.Models.HotelConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "f_kcreated_by_user": {
          "format": "int32",
          "type": "integer"
        },
        "f_kupdated_by_user": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "f_khotel": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "key": {
          "enum": [
            "Cab",
            "CheckedInNotifications",
            "BeaconCampaigns",
            "Wayfinding",
            "ISACEvents",
            "Limo",
            "Shuttle",
            "Taxi",
            "Buggy",
            "AnonUser",
            "Meridian",
            "Pms",
            "GeographyFence",
            "EventDrivenCheckIn",
            "DoorLock",
            "AssaAbloy",
            "RequestQueue",
            "RequestTemplate",
            "Hours",
            "MobileMore",
            "TermsConditions",
            "Postcard",
            "Channel",
            "LivingStage",
            "HotSOS",
            "Anonymous",
            "Recommendations",
            "HomeKit",
            "StayCard",
            "DoorLocks",
            "IoT",
            "SaltoConnection",
            "TelkonetConnection"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "option": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Hotel.HotelTransportationModel": {
      "title": "hotel_transportation",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "enable_transportation": {
          "type": "boolean"
        },
        "enable_cab": {
          "type": "boolean"
        },
        "cab_email": {
          "type": "string"
        },
        "cab_phone": {
          "type": "string"
        },
        "cab_sms": {
          "type": "string"
        },
        "enable_valet": {
          "type": "boolean"
        },
        "valet_email": {
          "type": "string"
        },
        "valet_phone": {
          "type": "string"
        },
        "valet_sms": {
          "type": "string"
        },
        "enable_shuttle": {
          "type": "boolean"
        },
        "shuttle_email": {
          "type": "string"
        },
        "shuttle_phone": {
          "type": "string"
        },
        "shuttle_sms": {
          "type": "string"
        },
        "enable_limo": {
          "type": "boolean"
        },
        "limo_email": {
          "type": "string"
        },
        "limo_phone": {
          "type": "string"
        },
        "limo_sms": {
          "type": "string"
        },
        "cab_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "limo_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "shuttle_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "valet_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "cab_request_template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
        },
        "limo_request_template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
        },
        "shuttle_request_template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
        },
        "valet_request": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateModel"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.RequestTemplateModel": {
      "title": "request_template",
      "type": "object",
      "properties": {
        "eta_s": {
          "format": "int32",
          "description": "The estimated time the request should be completed in seconds.",
          "default": 900,
          "type": "integer"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionModel"
          }
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "validation": {
          "description": "Whether or not the template requires validation. <code>True</code> for validation required, <code>false</code> if not.",
          "type": "boolean"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "category": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryBaseModel"
        },
        "staff": {
          "description": "Whether or not the template is for staff users only. <code>True</code> for staff only, <code>false</code> if not.",
          "type": "boolean"
        },
        "voice_number": {
          "type": "string"
        },
        "sms_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestSMSNumber"
          }
        },
        "is_active": {
          "description": "Whether or not the template is active. <code>True</code> for active, <code>false</code> if not.",
          "type": "boolean"
        },
        "group_id": {
          "format": "int32",
          "description": "The group ID the template belongs to.",
          "default": 42,
          "type": "integer"
        },
        "name": {
          "description": "The name of the template.",
          "default": "General",
          "type": "string"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel",
          "description": "The place the template belongs to."
        },
        "stock_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseBaseModel"
          }
        },
        "image_url": {
          "description": "The image filename to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "string"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request template ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.Option.RequestTemplateOptionModel": {
      "title": "request_template_option",
      "type": "object",
      "properties": {
        "default_number": {
          "format": "int32",
          "description": "The default value to use for an option as a number.",
          "type": "integer"
        },
        "default_text": {
          "description": "The default value to use for an option as a string of text.",
          "type": "string"
        },
        "max_number": {
          "format": "int32",
          "description": "The maximum number of characters to allow for values.",
          "default": 255,
          "type": "integer"
        },
        "min_number": {
          "format": "int32",
          "description": "The minimum number of characters to require for values.",
          "default": 1,
          "type": "integer"
        },
        "required": {
          "description": "Whether or not the option is required. <code>True</code> for required, <code>false</code> if not.",
          "type": "boolean"
        },
        "watermark": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the option.",
          "default": "Email",
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "description": "The Id of the request template",
          "type": "integer"
        },
        "choices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.RequestTemplates.Models.RequestOptionChoicesBaseModel"
          }
        },
        "type": {
          "enum": [
            "Unknown",
            "Number",
            "DateTime",
            "Text",
            "Message",
            "Boolean",
            "Picklist"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request option ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Category.RequestCategoryBaseModel": {
      "title": "request_category_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the category.",
          "default": "Maintenance Issue",
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The request category ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestSMSNumber": {
      "title": "request_smsnumber",
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Transportation.TransportationModel": {
      "title": "transportation",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "cab": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "limo": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "shuttle": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "valet": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "name": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "sms": {
          "type": "string"
        },
        "enable_request_template": {
          "type": "boolean"
        },
        "request_template_name": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Transportation.Models.TransportationBaseModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "sms": {
          "type": "string"
        },
        "enable_request_template": {
          "type": "boolean"
        },
        "request_template_name": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Transportation.Models.TransportationModel": {
      "type": "object",
      "properties": {
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "cab": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "limo": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "shuttle": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        },
        "valet": {
          "$ref": "#/definitions/MonsciergeIDK.Transportation.Models.TransportationBaseModel"
        }
      }
    },
    "MonsciergeAPI.Models.Images.ImageCreateResourceModel": {
      "title": "image_create_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "account_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.IntegrationMaps.Models.IntegrationMapModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "monscierge_ref_id": {
          "type": "string"
        },
        "integration_id": {
          "type": "string"
        },
        "integration_type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "integration_name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.PerformanceModel": {
      "type": "object",
      "properties": {
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "performer": {
          "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventHostModel"
        },
        "stage": {
          "$ref": "#/definitions/MonsciergeIDK.LivingStage.Models.Stage.StageListModel"
        },
        "featured": {
          "type": "boolean"
        },
        "venue_id": {
          "format": "int32",
          "type": "integer"
        },
        "venue": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "performance_id": {
          "format": "int32",
          "type": "integer"
        },
        "stage_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "performer_id": {
          "type": "string"
        },
        "start_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "end_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventHostModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventListModel"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventHostLinkMapModel"
          }
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.Stage.StageListModel": {
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "stage_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventListModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "event_date": {
          "format": "date-time",
          "type": "string"
        },
        "performance_url": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventHostLinkMapModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "host_id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Website",
            "Twitter",
            "Facebook",
            "Phone",
            "iTunes",
            "Spotify"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel": {
      "type": "object",
      "properties": {
        "featured": {
          "type": "boolean"
        },
        "venue_id": {
          "format": "int32",
          "type": "integer"
        },
        "venue": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "performance_id": {
          "format": "int32",
          "type": "integer"
        },
        "stage_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "performer_id": {
          "type": "string"
        },
        "start_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "end_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.Performer": {
      "type": "object",
      "properties": {
        "last_performance": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventListModel"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventHostLinkMapModel"
          }
        }
      }
    },
    "MonsciergeIDK.Enums.DescriptiveEnumModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.PerformerListModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.StageModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "hours": {
          "$ref": "#/definitions/System.Object"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "primary_image": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
          }
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "stage_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.LivingStage.Models.LivingStageConfigModel": {
      "type": "object",
      "properties": {
        "terms": {
          "type": "string"
        },
        "featured_performances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.PerformanceListModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Location.LocationCollectionResourceModel": {
      "title": "location_collection_resource",
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Location.LocationResourceModel"
          }
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Location.LocationResourceModel": {
      "title": "location_resource",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created_on": {
          "format": "int64",
          "type": "integer"
        },
        "updated_on": {
          "format": "int64",
          "type": "integer"
        },
        "sub_premise": {
          "type": "string"
        },
        "premise": {
          "type": "string"
        },
        "street_number": {
          "type": "string"
        },
        "route": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "administrative_area": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "postal_code_sufix": {
          "type": "string"
        },
        "latitude": {
          "format": "float",
          "type": "number"
        },
        "longitude": {
          "format": "float",
          "type": "number"
        },
        "google_place_id": {
          "type": "string"
        },
        "formatted_address": {
          "type": "string"
        },
        "self_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuModel": {
      "type": "object",
      "properties": {
        "close_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "close_ms": {
          "format": "int64",
          "type": "integer"
        },
        "has_menu_items": {
          "type": "boolean"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "localized_name": {
          "type": "string"
        },
        "map_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "open_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "open_ms": {
          "format": "int64",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionListModel"
          }
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuSectionListModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "has_items": {
          "type": "boolean"
        },
        "localized_description": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "parent_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModel"
          }
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionListModel"
          }
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuListItemModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "menu_item_id": {
          "format": "int32",
          "type": "integer"
        },
        "price_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuItemModel": {
      "type": "object",
      "properties": {
        "calories": {
          "format": "int32",
          "type": "integer"
        },
        "carb_grams": {
          "format": "int32",
          "type": "integer"
        },
        "cholesterol": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "fat_grams": {
          "format": "int32",
          "type": "integer"
        },
        "fiber_grams": {
          "format": "int32",
          "type": "integer"
        },
        "info": {
          "type": "string"
        },
        "iron": {
          "format": "int32",
          "type": "integer"
        },
        "localized_description": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "localized_sub_title": {
          "type": "string"
        },
        "menu_item_id": {
          "format": "int32",
          "type": "integer"
        },
        "micros_id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "potassium": {
          "format": "int32",
          "type": "integer"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "protein_grams": {
          "format": "int32",
          "type": "integer"
        },
        "saturated_fat_grams": {
          "format": "int32",
          "type": "integer"
        },
        "subtitle": {
          "type": "string"
        },
        "sugar_grams": {
          "format": "int32",
          "type": "integer"
        },
        "sodium": {
          "format": "int32",
          "type": "integer"
        },
        "vitamin_c": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allergies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.CharacteristicModel"
          }
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemModifierModel"
          }
        },
        "pairings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModel"
          }
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemPriceModel"
          }
        },
        "upsell_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModel"
          }
        },
        "menu_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_section_item_map_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.CharacteristicModel": {
      "type": "object",
      "properties": {
        "characteristic_id": {
          "format": "int32",
          "type": "integer"
        },
        "icon": {
          "type": "string"
        },
        "is_allergy": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuItemModifierModel": {
      "type": "object",
      "properties": {
        "menu_item_modifier_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_item_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "possible_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuItemModifierValueModel"
          }
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuItemPriceModel": {
      "type": "object",
      "properties": {
        "price_id": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "price_decimal": {
          "format": "double",
          "type": "number"
        },
        "icon": {
          "type": "string"
        },
        "micros_id": {
          "format": "int64",
          "type": "integer"
        },
        "micros_price_level": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuItemModifierValueModel": {
      "type": "object",
      "properties": {
        "menu_item_modifier_value_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_item_modifier_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "price_decimal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.MenuItemModel": {
      "title": "menu_item",
      "type": "object",
      "properties": {
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemCharacteristicModel"
          }
        },
        "desc": {
          "type": "string"
        },
        "nutrition": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.NutritionModel"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemOptionModel"
          }
        },
        "pairings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemBaseModel"
          }
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemPriceModel"
          }
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the item.",
          "default": "American Buffet",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The menu item ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.MenuItemCharacteristicModel": {
      "title": "menu_item_characteristic",
      "type": "object",
      "properties": {
        "allergen": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.NutritionModel": {
      "title": "nutrition",
      "type": "object",
      "properties": {
        "calories": {
          "format": "int32",
          "type": "integer"
        },
        "calories_rdv": {
          "format": "float",
          "type": "number"
        },
        "cholesterol": {
          "format": "int32",
          "type": "integer"
        },
        "cholesterol_rdv": {
          "format": "float",
          "type": "number"
        },
        "dietary_fiber_g": {
          "format": "int32",
          "type": "integer"
        },
        "dietary_fiber_rdv": {
          "format": "float",
          "type": "number"
        },
        "protein_g": {
          "format": "int32",
          "type": "integer"
        },
        "protein_rdv": {
          "format": "float",
          "type": "number"
        },
        "saturated_fat_g": {
          "format": "int32",
          "type": "integer"
        },
        "sodium": {
          "format": "int32",
          "type": "integer"
        },
        "sodium_rdv": {
          "format": "float",
          "type": "number"
        },
        "sugars_g": {
          "format": "int32",
          "type": "integer"
        },
        "total_carbohydrates_g": {
          "format": "int32",
          "type": "integer"
        },
        "total_carbohydrates_rdv": {
          "format": "float",
          "type": "number"
        },
        "total_fat_g": {
          "format": "int32",
          "type": "integer"
        },
        "total_fat_rdv": {
          "format": "float",
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.MenuItemOptionModel": {
      "title": "menu_item_option",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemPriceModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.MenuItemBaseModel": {
      "title": "menu_item_base",
      "type": "object",
      "properties": {
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the item.",
          "default": "American Buffet",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The menu item ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Menu.Item.MenuItemPriceModel": {
      "title": "menu_item_price",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuSectionModel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "localized_description": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "menu_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "micros_id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModel"
          }
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "parent_section_id": {
          "format": "int32",
          "type": "integer"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModel"
          }
        }
      }
    },
    "MonsciergeIDK.MobileMenu.Models.MobileHomeScreenButtonModel": {
      "type": "object",
      "properties": {
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MobileMenu.Models.MobileHomeScreenLinkModel"
          }
        }
      }
    },
    "MonsciergeIDK.MobileMenu.Models.MobileHomeScreenLinkModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "default_name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "visibility": {
          "format": "int32",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "button_type_id": {
          "format": "int32",
          "type": "integer"
        },
        "button_type": {
          "enum": [
            "HotelInfo",
            "Directions",
            "Call",
            "Reservations",
            "Transportation",
            "RoomService",
            "Events",
            "Menus",
            "LocalMaps",
            "Requests",
            "Rewards",
            "MyRequests",
            "GetMyVehicle",
            "LocalRecommendations",
            "Flights",
            "CheckIn",
            "Weather",
            "Postcards",
            "Buggy",
            "PropertyInfo",
            "Url",
            "More",
            "Dining",
            "CheckOut",
            "Wayfinding",
            "Explore",
            "Email",
            "Home",
            "Messages",
            "Profile",
            "DoorLock",
            "LiveStream",
            "ConvenientCare",
            "Feature",
            "FeatureCategory",
            "RequestTemplate",
            "Event",
            "HomeKit"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "is_how_can_ihelp": {
          "type": "boolean"
        },
        "feature_type": {
          "enum": [
            "Feature",
            "FeatureCategory",
            "Event",
            "RequestTemplate",
            "Url",
            "Phone"
          ],
          "type": "string"
        },
        "feature_id": {
          "format": "int32",
          "type": "integer"
        },
        "android_image": {
          "type": "string"
        },
        "android_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "ios_image": {
          "type": "string"
        },
        "ios_image_id": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.MobileMore.MobileMoreBaseModel": {
      "title": "mobile_more_base",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Phone",
            "Website",
            "Feature",
            "Separator"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "feature_id": {
          "type": "string"
        },
        "feature_key": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavItemPlatformModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "HotelInfo",
            "Directions",
            "Call",
            "Reservations",
            "Transportation",
            "RoomService",
            "Events",
            "Menus",
            "LocalMaps",
            "Requests",
            "Rewards",
            "MyRequests",
            "GetMyVehicle",
            "LocalRecommendations",
            "Flights",
            "CheckIn",
            "Weather",
            "Postcards",
            "Buggy",
            "PropertyInfo",
            "Url",
            "More",
            "Dining",
            "CheckOut",
            "Wayfinding",
            "Explore",
            "Email",
            "Home",
            "Messages",
            "Profile",
            "DoorLock",
            "LiveStream",
            "ConvenientCare",
            "Feature",
            "FeatureCategory",
            "RequestTemplate",
            "Event",
            "HomeKit"
          ],
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavConditionModel"
        },
        "sub_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavItemPlatformModel"
          }
        },
        "theme": {
          "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavThemePlatformModel"
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavConditionModel": {
      "type": "object",
      "properties": {
        "statuses": {
          "enum": [
            "Always",
            "WhenLoggedIn",
            "CheckedIn"
          ],
          "type": "string"
        },
        "condition": {
          "enum": [
            "Or",
            "And",
            "Nor",
            "Xor"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavThemePlatformModel": {
      "type": "object",
      "properties": {
        "image_path": {
          "type": "string"
        },
        "hex_color": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavMenuModel": {
      "type": "object",
      "properties": {
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Explore",
            "HowCanIHelp",
            "Home",
            "TabBar",
            "More",
            "Brand"
          ],
          "type": "string"
        },
        "navigation_models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavItemModel"
          }
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavItemModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "HotelInfo",
            "Directions",
            "Call",
            "Reservations",
            "Transportation",
            "RoomService",
            "Events",
            "Menus",
            "LocalMaps",
            "Requests",
            "Rewards",
            "MyRequests",
            "GetMyVehicle",
            "LocalRecommendations",
            "Flights",
            "CheckIn",
            "Weather",
            "Postcards",
            "Buggy",
            "PropertyInfo",
            "Url",
            "More",
            "Dining",
            "CheckOut",
            "Wayfinding",
            "Explore",
            "Email",
            "Home",
            "Messages",
            "Profile",
            "DoorLock",
            "LiveStream",
            "ConvenientCare",
            "Feature",
            "FeatureCategory",
            "RequestTemplate",
            "Event",
            "HomeKit"
          ],
          "type": "string"
        },
        "display_name": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavConditionModel"
        },
        "sub_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavItemModel"
          }
        },
        "theme": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Navigation.Models.NavThemeModel"
          }
        }
      }
    },
    "MonsciergeIDK.Navigation.Models.NavThemeModel": {
      "type": "object",
      "properties": {
        "platform_type": {
          "enum": [
            "Web",
            "Android",
            "Ios",
            "Lobby",
            "Other",
            "Tv",
            "Channel",
            "DigitalSignage"
          ],
          "type": "string"
        },
        "image_path": {
          "type": "string"
        },
        "hex_color": {
          "type": "string"
        },
        "text_color": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTOutletDevice": {
      "type": "object",
      "properties": {
        "outlet_plugs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletPlug"
          }
        },
        "type": {
          "enum": [
            "Curtain",
            "Outlet",
            "Switch",
            "Thermostat"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTOutletPlug": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "current": {
          "format": "double",
          "type": "number"
        },
        "kwh": {
          "format": "double",
          "type": "number"
        },
        "power": {
          "format": "double",
          "type": "number"
        },
        "power_factor": {
          "format": "double",
          "type": "number"
        },
        "power_state": {
          "enum": [
            "On",
            "Off"
          ],
          "type": "string"
        },
        "voltage": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.CheckInValidationModel": {
      "type": "object",
      "properties": {
        "confirmation": {
          "type": "string"
        },
        "validations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "special_requests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.CheckinResponseModel": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "stay": {
          "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Stay.RoomStayModel"
        },
        "request_id": {
          "type": "string"
        },
        "is_queued": {
          "type": "boolean"
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Room.RoomAvailabilityOptions": {
      "type": "object",
      "properties": {
        "stay_id": {
          "type": "string"
        },
        "confirmation_number": {
          "type": "string"
        },
        "room_type": {
          "type": "string"
        },
        "start_date": {
          "format": "date-time",
          "type": "string"
        },
        "end_date": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.PersonalDevice.PersonalDeviceManufacturerModel": {
      "title": "personal_device_manufacturer",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the manufacturer.",
          "default": "Apple",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The personal device manufacturer ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.PersonalDevice.PersonalDeviceModelModel": {
      "title": "personal_device",
      "type": "object",
      "properties": {
        "manufacturer": {
          "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceManufacturerModel"
        },
        "name": {
          "description": "The name of the device.",
          "default": "iPhone 6",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The personal device model ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.TwilioSMS.Models.PhoneNumberQueryModel": {
      "type": "object",
      "properties": {
        "area_code": {
          "type": "string"
        },
        "beta": {
          "type": "boolean"
        },
        "contains": {
          "type": "string"
        },
        "distance": {
          "format": "int32",
          "type": "integer"
        },
        "exclude_all_address_required": {
          "type": "boolean"
        },
        "exclude_foreign_address_required": {
          "type": "boolean"
        },
        "exclude_local_address_required": {
          "type": "boolean"
        },
        "in_lata": {
          "type": "string"
        },
        "in_postal_code": {
          "type": "string"
        },
        "in_rate_center": {
          "type": "string"
        },
        "in_region": {
          "type": "string"
        },
        "mms_enabled": {
          "type": "boolean"
        },
        "near_lat_long": {
          "type": "string"
        },
        "near_number": {
          "type": "string"
        },
        "sms_enabled": {
          "type": "boolean"
        },
        "voice_enabled": {
          "type": "boolean"
        },
        "iso_country_code": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.TwilioSMS.Models.AvailablePhoneNumberModel": {
      "type": "object",
      "properties": {
        "friendly_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "lata": {
          "type": "string"
        },
        "rate_center": {
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "region": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "iso_country": {
          "type": "string"
        },
        "address_requirements": {
          "type": "string"
        },
        "beta": {
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/Twilio.Capabilities"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Twilio.Capabilities": {
      "type": "object",
      "properties": {
        "voice": {
          "type": "boolean"
        },
        "s_ms": {
          "type": "boolean"
        },
        "m_ms": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.TwilioSMS.Models.TwilioCountryModel": {
      "type": "object",
      "properties": {
        "iso": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "number_type": {
          "type": "string"
        },
        "voice_enabled": {
          "type": "boolean"
        },
        "sms_enabled": {
          "type": "boolean"
        },
        "mms_enabled": {
          "type": "boolean"
        },
        "domestic_sms_only": {
          "type": "boolean"
        },
        "price_per_month": {
          "type": "string"
        },
        "inbound_voice_per_min": {
          "type": "string"
        },
        "inbound_sms_per_msg": {
          "type": "string"
        },
        "inbound_mms_per_msg": {
          "type": "string"
        },
        "beta": {
          "type": "boolean"
        },
        "requires_address": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.TwilioSMS.Models.IncomingPhoneNumberModel": {
      "type": "object",
      "properties": {
        "account_sid": {
          "type": "string"
        },
        "address_requirements": {
          "type": "string"
        },
        "api_version": {
          "type": "string"
        },
        "beta": {
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/Twilio.Capabilities"
        },
        "date_created": {
          "format": "date-time",
          "type": "string"
        },
        "date_updated": {
          "format": "date-time",
          "type": "string"
        },
        "friendly_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "sid": {
          "type": "string"
        },
        "sms_application_sid": {
          "type": "string"
        },
        "sms_fallback_method": {
          "type": "string"
        },
        "sms_fallback_url": {
          "type": "string"
        },
        "sms_method": {
          "type": "string"
        },
        "sms_url": {
          "type": "string"
        },
        "status_callback": {
          "type": "string"
        },
        "status_callback_method": {
          "type": "string"
        },
        "voice_application_sid": {
          "type": "string"
        },
        "voice_caller_id_lookup": {
          "type": "boolean"
        },
        "voice_fallback_method": {
          "type": "string"
        },
        "voice_fallback_url": {
          "type": "string"
        },
        "voice_method": {
          "type": "string"
        },
        "voice_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.TwilioSMS.Models.PhoneNumberOptionsModel": {
      "type": "object",
      "properties": {
        "account_sid": {
          "type": "string"
        },
        "api_version": {
          "type": "string"
        },
        "area_code": {
          "type": "string"
        },
        "friendly_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "sms_application_sid": {
          "type": "string"
        },
        "sms_fallback_method": {
          "type": "string"
        },
        "sms_fallback_url": {
          "type": "string"
        },
        "sms_method": {
          "type": "string"
        },
        "sms_url": {
          "type": "string"
        },
        "status_callback": {
          "type": "string"
        },
        "status_callback_method": {
          "type": "string"
        },
        "trunk_sid": {
          "type": "string"
        },
        "voice_application_sid": {
          "type": "string"
        },
        "voice_caller_id_lookup": {
          "type": "boolean"
        },
        "voice_fallback_method": {
          "type": "string"
        },
        "voice_fallback_url": {
          "type": "string"
        },
        "voice_method": {
          "type": "string"
        },
        "voice_url": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Amenity.AmenityListModel": {
      "title": "amenity_list",
      "type": "object",
      "properties": {
        "is_category": {
          "type": "boolean"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "translated_name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "has_menus": {
          "type": "boolean"
        },
        "has_features": {
          "type": "boolean"
        },
        "ref_id": {
          "type": "string"
        },
        "mobile_active": {
          "type": "boolean"
        },
        "is_active": {
          "type": "boolean"
        },
        "tv_active": {
          "type": "boolean"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Amenity.AmenityCategoryModel": {
      "title": "amenity_category",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "is_active": {
          "type": "boolean"
        },
        "image_url": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.GeneralStatsModel": {
      "title": "general_stats",
      "type": "object",
      "properties": {
        "total_recommendations": {
          "format": "int32",
          "type": "integer"
        },
        "total_postcards": {
          "format": "int32",
          "type": "integer"
        },
        "check_ins_today": {
          "format": "int32",
          "type": "integer"
        },
        "turn_over_today": {
          "format": "int32",
          "type": "integer"
        },
        "guests_online": {
          "format": "int32",
          "type": "integer"
        },
        "apps_open": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.RequestStatsModel": {
      "title": "request_stats",
      "type": "object",
      "properties": {
        "requests_today": {
          "format": "int32",
          "type": "integer"
        },
        "average_request_time": {
          "type": "string"
        },
        "last24_hours_request_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestTypeInfoModel"
          }
        },
        "todays_hourly_request_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.HourlyRequestCountModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestTypeInfoModel": {
      "title": "request_type_info",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "request_type_name": {
          "type": "string"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.HourlyRequestCountModel": {
      "title": "hourly_request_count",
      "type": "object",
      "properties": {
        "utc_milliseconds": {
          "format": "int64",
          "type": "integer"
        },
        "requests": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.ClickStatsModel": {
      "title": "click_stats",
      "type": "object",
      "properties": {
        "combined_click_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.CombinedClickCountModel"
          }
        },
        "popular_content_click_counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Analytic.PopularContentClickModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.CombinedClickCountModel": {
      "title": "combined_click_count",
      "type": "object",
      "properties": {
        "utc_milliseconds": {
          "format": "int64",
          "type": "integer"
        },
        "lobby": {
          "format": "int32",
          "type": "integer"
        },
        "mobile": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.PopularContentClickModel": {
      "title": "popular_content_click",
      "type": "object",
      "properties": {
        "action_name": {
          "type": "string"
        },
        "clicks": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Beacon.BeaconModel": {
      "title": "beacon",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "major": {
          "format": "int32",
          "type": "integer"
        },
        "minor": {
          "format": "int32",
          "type": "integer"
        },
        "uuid": {
          "type": "string"
        },
        "campaign_name": {
          "type": "string"
        },
        "campaign_id": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The beacon ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Beacons.Models.BeaconCampaignBaseModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hotel": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default_message": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "created_by": {
          "format": "int32",
          "type": "integer"
        },
        "updated_by": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Beacons.Models.BeaconCampaignModel": {
      "type": "object",
      "properties": {
        "beacons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconClientModel"
          }
        },
        "slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignSlotModel"
          }
        },
        "id": {
          "type": "string"
        },
        "hotel": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default_message": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "created_by": {
          "format": "int32",
          "type": "integer"
        },
        "updated_by": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Beacons.Models.BeaconClientModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "major": {
          "format": "int32",
          "type": "integer"
        },
        "minor": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "campaign_name": {
          "type": "string"
        },
        "campaign_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Beacons.Models.BeaconCampaignSlotModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hotel": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "broadcast_type": {
          "format": "int32",
          "type": "integer"
        },
        "start_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "end_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "is_all_day": {
          "type": "boolean"
        },
        "created_by": {
          "format": "int32",
          "type": "integer"
        },
        "updated_by": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "recurrence_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/System.Collections.Generic.KeyValuePair[System.String,System.String]"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Beacons.Models.BeaconCampaignSlotActionModel"
          }
        }
      }
    },
    "System.Collections.Generic.KeyValuePair[System.String,System.String]": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MonsciergeIDK.Beacons.Models.BeaconCampaignSlotActionModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "trigger_type": {
          "format": "int32",
          "type": "integer"
        },
        "trigger_range": {
          "format": "int32",
          "type": "integer"
        },
        "trigger_time": {
          "format": "int32",
          "type": "integer"
        },
        "previous_beacon": {
          "format": "int32",
          "type": "integer"
        },
        "action_type": {
          "format": "int32",
          "type": "integer"
        },
        "action_delay": {
          "format": "int32",
          "type": "integer"
        },
        "action_reference": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "created_by": {
          "format": "int32",
          "type": "integer"
        },
        "updated_by": {
          "format": "int32",
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        },
        "updated_on": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Platform.Models.PlatformConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "platform_type": {
          "enum": [
            "Web",
            "Andriod",
            "Ios",
            "Lobby",
            "Other",
            "Tv"
          ],
          "type": "string"
        },
        "config": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "type": "integer"
        },
        "option": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.InsiderTips.InsiderTipModel": {
      "title": "insider_tip",
      "type": "object",
      "properties": {
        "created_ms": {
          "format": "int64",
          "description": "The time the tip was created on the request as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The tip ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.InsiderTips.InsiderTipUpdateModel": {
      "title": "insider_tip_update",
      "type": "object",
      "properties": {
        "tip_text": {
          "type": "string"
        },
        "tip_language": {
          "type": "string"
        },
        "tip_ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The tip ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventModel": {
      "title": "event",
      "type": "object",
      "properties": {
        "group_name": {
          "description": "The name of the group.",
          "default": "Company",
          "type": "string"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventSectionModel"
          }
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "location_id": {
          "format": "int32",
          "type": "integer"
        },
        "end_ms": {
          "format": "int64",
          "description": "The time the event ends as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "place": {
          "description": "The location where the event will take place.",
          "default": "Big Conference Room",
          "type": "string"
        },
        "group": {
          "description": "The group that the event belongs to.",
          "default": "Sprint Planning",
          "type": "string"
        },
        "name": {
          "description": "The name of the event.",
          "default": "Sprint Planning Meeting",
          "type": "string"
        },
        "start_ms": {
          "format": "int64",
          "description": "The time the event starts as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The event ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventSectionModel": {
      "title": "event_section",
      "type": "object",
      "properties": {
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventAttachmentModel"
          }
        },
        "desc": {
          "description": "A description of the section.",
          "default": "This meeting shall allow us to coordinate the team resources for the sprint.",
          "type": "string"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the section.",
          "default": "Meetings",
          "type": "string"
        },
        "sponsorships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventSponsorshipModel"
          }
        },
        "summary_visible": {
          "description": "Whether or not the summary is visible. <code>True</code> for visible, <code>false</code> if not.",
          "type": "boolean"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventAttachmentModel": {
      "title": "event_attachment",
      "type": "object",
      "properties": {
        "attachment_url": {
          "type": "string"
        },
        "name": {
          "description": "The name of the attachment.",
          "default": "Agenda",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventSponsorshipModel": {
      "title": "event_sponsorship",
      "type": "object",
      "properties": {
        "image_url": {
          "description": "The image filename to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "string"
        },
        "uri": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel",
          "description": "The URL to the sponsorship.",
          "default": "http://monscierge.com"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventBaseModel": {
      "title": "event_base",
      "type": "object",
      "properties": {
        "end_ms": {
          "format": "int64",
          "description": "The time the event ends as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "place": {
          "description": "The location where the event will take place.",
          "default": "Big Conference Room",
          "type": "string"
        },
        "group": {
          "description": "The group that the event belongs to.",
          "default": "Sprint Planning",
          "type": "string"
        },
        "name": {
          "description": "The name of the event.",
          "default": "Sprint Planning Meeting",
          "type": "string"
        },
        "start_ms": {
          "format": "int64",
          "description": "The time the event starts as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The event ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventGroupModel": {
      "title": "event_group",
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Event.EventBaseModel"
          }
        },
        "name": {
          "description": "The name of the group.",
          "default": "Company",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The event group ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Event.EventUrlModel": {
      "title": "event_url",
      "type": "object",
      "properties": {
        "group_name": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Map.MapModel": {
      "title": "map",
      "type": "object",
      "properties": {
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "The type of map.",
          "enum": [
            "Unknown",
            "Bike",
            "Bus",
            "Hiking",
            "Local",
            "Subway",
            "Train",
            "Walking",
            "Place",
            "Running"
          ],
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the map.",
          "default": "Hotel Map",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The map ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Map.MapBaseModel": {
      "title": "map_base",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The map ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.CartModel": {
      "title": "cart",
      "type": "object",
      "properties": {
        "instructions": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.CartItemModel"
          }
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.CartItemModel": {
      "title": "cart_item",
      "type": "object",
      "properties": {
        "instructions": {
          "type": "string"
        },
        "menu_item_id": {
          "format": "int32",
          "type": "integer"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.CartItemModifierModel"
          }
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.CartItemModifierModel": {
      "title": "cart_item_modifier",
      "type": "object",
      "properties": {
        "menu_item_modifier_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_item_modifier_value_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.TotalModel": {
      "title": "total",
      "type": "object",
      "properties": {
        "check_header": {
          "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.CheckModel"
        },
        "cc_auth_code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "pms_message": {
          "type": "string"
        },
        "pms_status": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "workstation": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.CheckModel": {
      "title": "check",
      "type": "object",
      "properties": {
        "amount_due_total": {
          "format": "double",
          "type": "number"
        },
        "auto_fire_time": {
          "format": "date-time",
          "type": "string"
        },
        "auto_grat_total": {
          "format": "double",
          "type": "number"
        },
        "check_close_time": {
          "format": "date-time",
          "type": "string"
        },
        "check_id": {
          "type": "string"
        },
        "check_open_time": {
          "format": "date-time",
          "type": "string"
        },
        "check_status_bits": {
          "type": "string"
        },
        "detail_line_count": {
          "format": "int32",
          "type": "integer"
        },
        "employee_number": {
          "format": "int32",
          "type": "integer"
        },
        "guest_count": {
          "format": "int32",
          "type": "integer"
        },
        "guest_info": {
          "$ref": "#/definitions/MonsciergeAPI.Models.PointOfSale.UserModel"
        },
        "guid": {
          "type": "string"
        },
        "is_closed": {
          "type": "boolean"
        },
        "number": {
          "format": "int32",
          "type": "integer"
        },
        "other_total": {
          "format": "double",
          "type": "number"
        },
        "order_type": {
          "format": "int32",
          "type": "integer"
        },
        "payment_total": {
          "format": "double",
          "type": "number"
        },
        "sub_total": {
          "format": "double",
          "type": "number"
        },
        "table": {
          "format": "int32",
          "type": "integer"
        },
        "tax_total": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.UserModel": {
      "title": "user",
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "guest_info_guid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "user_text1": {
          "type": "string"
        },
        "user_text2": {
          "type": "string"
        },
        "user_text3": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.PointOfSale.OrderModel": {
      "title": "order",
      "type": "object",
      "properties": {
        "pms_info": {
          "type": "string"
        },
        "position": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Message.Sms.SmsJobModel": {
      "title": "sms_job",
      "type": "object",
      "properties": {
        "callbacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsJobCallbackModel"
          }
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Message.Sms.SmsTaskModel"
          }
        },
        "status": {
          "description": "The current status of the job.",
          "enum": [
            "INCOMPLETE",
            "COMPLETE"
          ],
          "type": "string"
        },
        "notify_email": {
          "description": "The email to be notified.",
          "default": "johnny.appleseed@monscierge.com",
          "type": "string"
        },
        "name": {
          "description": "The name of the job.",
          "default": "Margarita Party",
          "type": "string"
        },
        "created_on_ms": {
          "format": "int64",
          "description": "The time when the job was created in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "created_by": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Message.Sms.SmsJobCallbackModel": {
      "title": "sms_job_callback",
      "type": "object",
      "properties": {
        "url": {
          "description": "A callback url to send a web hook notification event to.",
          "default": "http://example.com/request/callback",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Message.Sms.SmsTaskModel": {
      "title": "sms_task",
      "type": "object",
      "properties": {
        "recipient_number": {
          "description": "The phone number of the recipient.",
          "default": "+15558765309",
          "type": "string"
        },
        "status_message": {
          "description": "A message for the status of the task.",
          "default": "failed (21614): To number: +5558765309, is not a mobile number",
          "type": "string"
        },
        "last_updated_ms": {
          "format": "int64",
          "description": "The last time the task was updated in milliseconds.",
          "default": 1430490987417,
          "type": "integer"
        },
        "status": {
          "description": "The status of the job.",
          "enum": [
            "SCHEDULED",
            "SENDING",
            "SENT",
            "FAILED",
            "SUCCEEDED",
            "CANCELLED"
          ],
          "type": "string"
        },
        "scheduled_for_ms": {
          "format": "int64",
          "description": "The time message was scheduled to be sent in milliseconds.",
          "default": 1430490987417,
          "type": "integer"
        },
        "message_id": {
          "description": "The ID of the message sent.",
          "type": "string"
        },
        "message": {
          "description": "The body of the message sent.",
          "default": "Come visit our bar today for free margaritas! While supplies last, limit 5 per guest.",
          "type": "string"
        },
        "last_name": {
          "description": "The last name of the person.",
          "default": "Appleseed",
          "type": "string"
        },
        "sender_number": {
          "description": "The number that sent the message.",
          "default": "+15558765309",
          "type": "string"
        },
        "first_name": {
          "description": "The first name of the person.",
          "default": "Johnny",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Message.Sms.SmsStockMessageModel": {
      "title": "sms_stock_message",
      "type": "object",
      "properties": {
        "text": {
          "description": "The message body.",
          "default": "Welcome to Hyatt. We're glad you're here, let us know if you have any questions about your stay.",
          "type": "string"
        },
        "name": {
          "description": "The name of the message.",
          "default": "Welcome",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The Sms Stock Message ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Message.MessageModel": {
      "title": "message",
      "type": "object",
      "properties": {
        "body": {
          "description": "The body of the message formatted in Rich Text (RTF).",
          "default": "{\\rtf\\ansi\\ansicpg1252\\uc1\\deff0\\deflang1033{\\fonttbl{\\f0 Verdana;}}{\\colortbl\\red0\\green0\\blue0 ;\\red255\\green255\\blue255 ;}{\\*\\defchp\\ltrch\\fs24\\i0\\b0\\strike0\\ulnone}{\\*\\defpap\\fs24\\sl240\\slmult1}{\\stylesheet{\\*\\ts2\\tsrowd\\sqformat\\trbrdrt\\brdrs\\brdrw15\\brdrcf0\\trbrdrb\\brdrs\\brdrw15\\brdrcf0\\trbrdrl\\brdrs\\brdrw15\\brdrcf0\\trbrdrr\\brdrs\\brdrw15\\brdrcf0\\trbrdrh\\brdrs\\brdrw15\\brdrcf0\\trbrdrv\\brdrs\\brdrw15\\brdrcf0\\trgaph0\\clpadft3\\clpadt75\\clpadfr3\\clpadr75\\clpadfl3\\clpadl0\\clpadfb3\\clpadb0\\tsvertalt\\ltrch\\i0\\b0\\strike0\\ulnone\\fs24\\sl276\\slmult1\\sa180 TableNormal;}{\\*\\ts3\\tsrowd\\sqformat\\trbrdrt\\brdrs\\brdrw15\\brdrcf0\\trbrdrb\\brdrs\\brdrw15\\brdrcf0\\trbrdrl\\brdrs\\brdrw15\\brdrcf0\\trbrdrr\\brdrs\\brdrw15\\brdrcf0\\trbrdrh\\brdrs\\brdrw15\\brdrcf0\\trbrdrv\\brdrs\\brdrw15\\brdrcf0\\trgaph0\\clpadft3\\clpadt75\\clpadfr3\\clpadr75\\clpadfl3\\clpadl0\\clpadfb3\\clpadb0\\tsvertalt\\ltrch\\i0\\b0\\strike0\\ulnone\\fs24\\sl240\\slmult1 TableGrid;}}\\nouicompat\\viewkind4\\paperw12240\\paperh15840\\margl1425\\margr1425\\margt1425\\margb1425\\deftab720\\sectd\\pgwsxn12240\\pghsxn15840\\marglsxn1425\\margrsxn1425\\margtsxn1425\\margbsxn1425\\headery720\\footery720\\pard\\ltrpar\\fs24\\sl240\\slmult1{\\ltrch\\i0\\b0\\strike0\\ulnone Thank you for choosing to stay at our hotel. Please, let us know if we can assist you with anything. }\\par}",
          "type": "string"
        },
        "created_ms": {
          "format": "int64",
          "description": "The time the message was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "subject": {
          "description": "The subject of the message.",
          "default": "Welcome",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The message ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Enterprise.EnterpriseListResponseModel": {
      "title": "enterprise_list_response",
      "type": "object",
      "properties": {
        "enterprises": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseListModel"
          }
        },
        "paging": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.PagingResultsModel"
        }
      }
    },
    "MonsciergeAPI.Models.Enterprise.EnterpriseListModel": {
      "title": "enterprise_list",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "tip_count": {
          "format": "int32",
          "type": "integer"
        },
        "distance_from_property_km": {
          "format": "double",
          "type": "number"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "distance_from_property_mi": {
          "format": "double",
          "type": "number"
        },
        "is_black_listed": {
          "type": "boolean"
        },
        "is_recommended": {
          "type": "boolean"
        },
        "location_count": {
          "format": "int32",
          "type": "integer"
        },
        "dollar_range": {
          "format": "int32",
          "description": "The price range for items to purchase.",
          "type": "integer"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "enterprise_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "default": "Starbucks",
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.ScheduleModel"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "id": {
          "format": "int32",
          "description": "The enterprise ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.PagingResultsModel": {
      "title": "paging_results",
      "type": "object",
      "properties": {
        "page_count": {
          "format": "int32",
          "type": "integer"
        },
        "total_record_count": {
          "format": "int32",
          "type": "integer"
        },
        "page_number": {
          "format": "int32",
          "type": "integer"
        },
        "page_size": {
          "format": "int32",
          "type": "integer"
        },
        "previous_results": {
          "type": "string"
        },
        "next_results": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.AddressModel": {
      "title": "address",
      "type": "object",
      "properties": {
        "city": {
          "description": "The address city.",
          "default": "Oklahoma City",
          "type": "string"
        },
        "country": {
          "description": "The address country.",
          "default": "US",
          "type": "string"
        },
        "state": {
          "description": "The address state.",
          "default": "OK",
          "type": "string"
        },
        "street": {
          "description": "The address street.",
          "default": "1 North Broadway Ave.",
          "type": "string"
        },
        "street2": {
          "description": "The address street (continued).",
          "default": "Suite 123",
          "type": "string"
        },
        "postal": {
          "description": "The address postal code.",
          "default": "73102",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.GeocodeModel": {
      "title": "geocode",
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "description": "The geographic coordinate point latitude.",
          "default": 35.467079162597649,
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "The geographic coordinate point longitude.",
          "default": -97.515060424804688,
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceOverrideModel": {
      "title": "place_override",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The place override ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Rating.RatingModel": {
      "title": "rating",
      "type": "object",
      "properties": {
        "created_ms": {
          "format": "int64",
          "description": "The time the rating was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "name": {
          "description": "The name of the rating.",
          "type": "string"
        },
        "review": {
          "description": "The body of the review.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The rating ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Recommendations.RecommendedCategoryModel": {
      "type": "object",
      "properties": {
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "is_active": {
          "type": "boolean"
        },
        "location_count": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Recommendations.Models.RecommendationCategoryDisplayModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "icon": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Models.Recommendations.RecommendedCategoryUpdateModel": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeIDK.Recommendations.Models.RecommendationDisplayModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        }
      }
    },
    "MonsciergeAPI.Models.Enterprise.EnterpriseModel": {
      "title": "enterprise",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "bing_id": {
          "type": "string"
        },
        "is_child_friendly": {
          "type": "boolean"
        },
        "child_friendly_desc": {
          "type": "string"
        },
        "daily_specials_desc": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "feedbacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Feedback.FeedbackModel"
          }
        },
        "google_place_id": {
          "type": "string"
        },
        "group_friendly_desc": {
          "type": "string"
        },
        "foursquare_venue_id": {
          "type": "string"
        },
        "happy_hour_desc": {
          "type": "string"
        },
        "has_daily_specials": {
          "type": "boolean"
        },
        "has_delivery": {
          "type": "boolean"
        },
        "has_happy_hour": {
          "type": "boolean"
        },
        "has_live_music": {
          "type": "boolean"
        },
        "has_sports_bar": {
          "type": "boolean"
        },
        "has_wifi": {
          "type": "boolean"
        },
        "is_local_favorite": {
          "type": "boolean"
        },
        "is_group_friendly": {
          "type": "boolean"
        },
        "has_outdoor_dining": {
          "type": "boolean"
        },
        "live_music_desc": {
          "type": "string"
        },
        "local_favorite_desc": {
          "type": "string"
        },
        "menus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Menu.MenuBaseModel"
          }
        },
        "open_table_restaurant_id": {
          "format": "int32",
          "type": "integer"
        },
        "open_table_service": {
          "type": "string"
        },
        "outdoor_dining_desc": {
          "type": "string"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "phone_iso_country_code": {
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "schedule_desc": {
          "type": "string"
        },
        "smoking_allowed": {
          "type": "boolean"
        },
        "smoking_desc": {
          "type": "string"
        },
        "sports_bar_desc": {
          "type": "string"
        },
        "takes_reservations": {
          "type": "boolean"
        },
        "time_zone_id": {
          "type": "string"
        },
        "tips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.InsiderTips.InsiderTipModel"
          }
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "wifi_desc": {
          "type": "string"
        },
        "dollar_range": {
          "format": "int32",
          "description": "The price range for items to purchase.",
          "type": "integer"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "enterprise_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "default": "Starbucks",
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.ScheduleModel"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "id": {
          "format": "int32",
          "description": "The enterprise ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Feedback.FeedbackModel": {
      "title": "feedback",
      "type": "object",
      "properties": {
        "feedback_text": {
          "type": "string"
        },
        "is_approved": {
          "type": "boolean"
        },
        "is_recommendation": {
          "type": "boolean"
        },
        "device_identifier": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The feedback ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.PhoneModel": {
      "title": "phone",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the phone.",
          "default": "Main",
          "type": "string"
        },
        "phone": {
          "description": "The number for the phone.",
          "default": "1-555-876-5309",
          "type": "string"
        },
        "primary": {
          "description": "Whether or not the phone is the primary one. <code>True</code> for primary, <code>false</code> if not.",
          "type": "boolean"
        },
        "sms": {
          "description": "Whether or not the phone is a mobile phone supporting SMS. <code>True</code> for SMS supported, <code>false</code> if not.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of phone.",
          "enum": [
            "Unknown",
            "Cab",
            "Concierge",
            "Enterprise",
            "Limo",
            "Place",
            "Shuttle",
            "Valet",
            "Reservation"
          ],
          "type": "string"
        },
        "verified": {
          "description": "Whether or not the phone has been verified. <code>True</code> for verified, <code>false</code> if not.",
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The user phone ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.EnterpriseRecommendationModel": {
      "type": "object",
      "properties": {
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.PlainTextEmailModel": {
      "title": "plain_text_email",
      "type": "object",
      "properties": {
        "plain_text_message": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceHackBaseModel": {
      "title": "place_hack_base",
      "type": "object",
      "properties": {
        "amenity": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityBaseModel"
        },
        "enterprise": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseBaseModel"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceSearchBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Amenity.AmenityBaseModel": {
      "title": "amenity_base",
      "type": "object",
      "properties": {
        "has_menus": {
          "description": "Whether or not the amenity has menus. <code>True</code> for has menus, <code>false</code> if not.",
          "type": "boolean"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the amenity.",
          "default": "Pool",
          "type": "string"
        },
        "reservation_email": {
          "type": "string"
        },
        "reservation_phone": {
          "type": "string"
        },
        "allow_reservations": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The amenity ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Enterprise.EnterpriseBaseModel": {
      "title": "enterprise_base",
      "type": "object",
      "properties": {
        "dollar_range": {
          "format": "int32",
          "description": "The price range for items to purchase.",
          "type": "integer"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "enterprise_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_urls": {
          "description": "A list of image filenames to use with imaging data service to get an image url.",
          "default": "5E6B7584F6BCFFF7F36E1005A71466ECA8E7E701.png",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "default": "Starbucks",
          "type": "string"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.ScheduleModel"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "id": {
          "format": "int32",
          "description": "The enterprise ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceSearchBaseModel": {
      "title": "place_search_base",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "description": {
          "type": "string"
        },
        "default_image": {
          "type": "string"
        },
        "background_image": {
          "type": "string"
        },
        "mobile_background_image": {
          "type": "string"
        },
        "name": {
          "description": "The name of the place.",
          "default": "Sheraton",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.RequestReportItemModel": {
      "title": "request_report_item",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "created_time_ms": {
          "format": "int64",
          "description": "The time the request was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "closed_time_ms": {
          "format": "int64",
          "description": "The time the request was closed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "last_updated_time_ms": {
          "format": "int64",
          "type": "integer"
        },
        "duration": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "eta": {
          "format": "double",
          "type": "number",
          "readOnly": true
        },
        "template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
        },
        "category": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryBaseModel"
        },
        "requester": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel",
          "readOnly": true
        },
        "room_number": {
          "type": "string"
        },
        "closed_by": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel",
          "readOnly": true
        },
        "assignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
          }
        },
        "assigned_group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request report item ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.RequestReportModel": {
      "title": "request_report",
      "type": "object",
      "properties": {
        "statuses": {
          "description": "Statuses to include",
          "type": "array",
          "items": {
            "enum": [
              "NEW",
              "ACK",
              "CLOSED",
              "ARCHIVED",
              "DELETED",
              "PENDING_APPROVAL"
            ],
            "type": "string"
          }
        },
        "from_ms": {
          "format": "int64",
          "description": "From datetime in ms since Epoch",
          "type": "integer"
        },
        "to_ms": {
          "format": "int64",
          "description": "To datetime in ms since Epoch",
          "type": "integer"
        },
        "category_id": {
          "format": "int32",
          "description": "Id of Category",
          "type": "integer"
        },
        "template_id": {
          "format": "int32",
          "description": "Id of template",
          "type": "integer"
        },
        "assigned_group_id": {
          "format": "int32",
          "description": "Id of assigned group",
          "type": "integer"
        },
        "assigned_user_id": {
          "format": "int32",
          "description": "Id of assinged user",
          "type": "integer"
        },
        "close_by_user_id": {
          "format": "int32",
          "description": "Id of closed by user",
          "type": "integer"
        },
        "guest_name": {
          "description": "Name of guest",
          "type": "string"
        },
        "room_number": {
          "description": "Room number",
          "type": "string"
        },
        "search_text": {
          "description": "Addional search text",
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "description": "Ordinal of the favorite",
          "default": 0,
          "type": "integer"
        },
        "name": {
          "description": "Name of the favorite",
          "default": "Report Favorite",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The  ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.ReportBaseModel": {
      "title": "report_base",
      "type": "object",
      "properties": {
        "ordinal": {
          "format": "int32",
          "description": "Ordinal of the favorite",
          "default": 0,
          "type": "integer"
        },
        "name": {
          "description": "Name of the favorite",
          "default": "Report Favorite",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Category.RequestCategoryModel": {
      "title": "request_category",
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
          }
        },
        "name": {
          "description": "The name of the category.",
          "default": "Maintenance Issue",
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The request category ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Group.RequestGroupModel": {
      "title": "request_group",
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupUserModel"
          }
        },
        "name": {
          "description": "The name of the group.",
          "default": "Housekeeping",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request group ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Group.RequestGroupUserModel": {
      "title": "request_group_user",
      "type": "object",
      "properties": {
        "notify": {
          "type": "boolean"
        },
        "manager": {
          "type": "boolean"
        },
        "display_name": {
          "description": "The user's display name.",
          "default": "JAppleseed1234",
          "type": "string"
        },
        "first_name": {
          "description": "The user's first name.",
          "default": "Johnny",
          "type": "string"
        },
        "last_name": {
          "description": "The user's last name.",
          "default": "Appleseed",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the user's profile image",
          "default": "https://secure.gravatar.com/bg/1428/e9db3f026b7ce7748e58169cecb4980f",
          "type": "string"
        },
        "primary_email": {
          "description": "The user's primary email.",
          "default": "johnny.appleseed@monscierge.com",
          "type": "string"
        },
        "primary_phone_number": {
          "description": "The user's primary phone number.",
          "default": "(555) 555-5555",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The user ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.EtaAction.RequestTemplateEtaActionModel": {
      "title": "request_template_eta_action",
      "type": "object",
      "properties": {
        "new_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "from_eta_ms": {
          "format": "int64",
          "type": "integer"
        },
        "action": {
          "enum": [
            "SetNewEta",
            "NotifyGuest",
            "NotifyStaff",
            "AddUser",
            "ChangeGroup",
            "EmailStaff"
          ],
          "type": "string"
        },
        "new_eta_ms": {
          "format": "int64",
          "type": "integer"
        },
        "guest_message": {
          "type": "string"
        },
        "guest_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "email_subject": {
          "type": "string"
        },
        "resolved_email_subject": {
          "type": "string"
        },
        "email_message": {
          "type": "string"
        },
        "resolved_email_message": {
          "type": "string"
        },
        "staff_message": {
          "type": "string"
        },
        "staff_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The request eta action ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.Trigger.RequestTemplateTriggerModel": {
      "title": "request_template_trigger",
      "type": "object",
      "properties": {
        "trigger": {
          "enum": [
            "Created",
            "Validated",
            "StatusChanged",
            "EtaChanged",
            "StaffSentMessage",
            "GuestSentMessage",
            "AssignedToGroup",
            "UserAdded",
            "UserRemoved",
            "TemplateChanged"
          ],
          "type": "string"
        },
        "action": {
          "enum": [
            "NotifyGuest",
            "NotifyStaff",
            "SendEmail",
            "SentToPrinter"
          ],
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "old_status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "new_status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "printer_id": {
          "format": "int32",
          "type": "integer"
        },
        "old_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_request_type": {
          "format": "int32",
          "type": "integer"
        },
        "new_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "staff_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "staff_message": {
          "type": "string"
        },
        "email_subject": {
          "type": "string"
        },
        "email_message": {
          "type": "string"
        },
        "guest_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "guest_message": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request trigger ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.GroupException.RequestTemplateGroupExceptionModel": {
      "title": "request_template_group_exception",
      "type": "object",
      "properties": {
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "end_time_ms": {
          "format": "double",
          "type": "number"
        },
        "start_time_ms": {
          "format": "double",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "description": "The request group exception ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseModel": {
      "title": "request_template_stock_response",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the request template stock response.",
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "description": "Id of the request template.",
          "type": "integer"
        },
        "message": {
          "description": "The body of the response.",
          "type": "string"
        },
        "eta_s": {
          "format": "int32",
          "description": "The estimated time the request should be completed in seconds.",
          "default": 900,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The request stock response ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.RequestTemplateCommonModel": {
      "title": "request_template_common",
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Category.RequestCategoryBaseModel"
        },
        "staff": {
          "description": "Whether or not the template is for staff users only. <code>True</code> for staff only, <code>false</code> if not.",
          "type": "boolean"
        },
        "voice_number": {
          "type": "string"
        },
        "sms_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestSMSNumber"
          }
        },
        "is_active": {
          "description": "Whether or not the template is active. <code>True</code> for active, <code>false</code> if not.",
          "type": "boolean"
        },
        "group_id": {
          "format": "int32",
          "description": "The group ID the template belongs to.",
          "default": 42,
          "type": "integer"
        },
        "name": {
          "description": "The name of the template.",
          "default": "General",
          "type": "string"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel",
          "description": "The place the template belongs to."
        },
        "stock_responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.StockResponse.RequestTemplateStockResponseBaseModel"
          }
        },
        "image_url": {
          "description": "The image filename to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "string"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request template ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.MonsciergeSearch.Models.RequestTypeSearchResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.Request.RequestTemplateSearchListModel"
          }
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "scroll_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Request.RequestTemplateSearchListModel": {
      "type": "object",
      "properties": {
        "request_type_refid": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "request_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "request_type_id": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_name": {
          "type": "string"
        },
        "hotel_ref_id": {
          "type": "string"
        },
        "request_type_name": {
          "type": "string"
        },
        "request_group_name": {
          "type": "string"
        },
        "request_group_refid": {
          "type": "string"
        },
        "score": {
          "format": "double",
          "type": "number"
        },
        "image_path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Requests.Models.RequestTemplateSearchResultModel": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Requests.Models.RequestTemplateSearchModel"
          }
        }
      }
    },
    "MonsciergeIDK.Requests.Models.RequestTemplateSearchModel": {
      "type": "object",
      "properties": {
        "template_id": {
          "format": "int64",
          "type": "integer"
        },
        "template_name": {
          "type": "string"
        },
        "place_id": {
          "format": "int64",
          "type": "integer"
        },
        "place_name": {
          "type": "string"
        },
        "group_id": {
          "format": "int64",
          "type": "integer"
        },
        "group_name": {
          "type": "string"
        },
        "image_path": {
          "type": "string"
        },
        "category_name": {
          "type": "string"
        },
        "category_id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Template.ViewModels.RequestTemplateCategorySortingModel": {
      "title": "request_template_category_sorting",
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "is_category": {
          "type": "boolean"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.ViewModels.RequestTemplateCategorySortingModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.Request.RequestReorderModel": {
      "type": "object",
      "properties": {
        "is_template": {
          "type": "boolean"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.User.UserModel": {
      "title": "user",
      "type": "object",
      "properties": {
        "check_out_ms": {
          "format": "int64",
          "description": "The time when the user is checking out as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "account_id": {
          "format": "int32",
          "type": "integer"
        },
        "account_name": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
          }
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "room": {
          "description": "The room number the user is checked into.",
          "default": "216",
          "type": "string"
        },
        "default_lang": {
          "description": "The user's default language selection.",
          "default": "en",
          "type": "string"
        },
        "single_place_id": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "description": "The user's job title.",
          "default": "Developer",
          "type": "string"
        },
        "default_role": {
          "description": "The user's default role",
          "default": "Admin",
          "type": "string"
        },
        "display_name": {
          "description": "The user's display name.",
          "default": "JAppleseed1234",
          "type": "string"
        },
        "first_name": {
          "description": "The user's first name.",
          "default": "Johnny",
          "type": "string"
        },
        "last_name": {
          "description": "The user's last name.",
          "default": "Appleseed",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the user's profile image",
          "default": "https://secure.gravatar.com/bg/1428/e9db3f026b7ce7748e58169cecb4980f",
          "type": "string"
        },
        "primary_email": {
          "description": "The user's primary email.",
          "default": "johnny.appleseed@monscierge.com",
          "type": "string"
        },
        "primary_phone_number": {
          "description": "The user's primary phone number.",
          "default": "(555) 555-5555",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The user ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.EmailModel": {
      "title": "email",
      "type": "object",
      "properties": {
        "address": {
          "description": "The email address.",
          "default": "johnny.appleseed@monscierge.com",
          "type": "string"
        },
        "primary": {
          "description": "Whether or not the email is the primary one. <code>True</code> for primary, <code>false</code> if not.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of email.",
          "enum": [
            "Unknown",
            "Breakfasts2Go",
            "Cab",
            "Limo",
            "RoomService",
            "Shuttle",
            "Valet"
          ],
          "type": "string"
        },
        "verified": {
          "description": "Whether or not the email has been verified. <code>True</code> for verified, <code>false</code> if not.",
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The user email ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Stay.StayChargeModel": {
      "type": "object",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number"
        },
        "post_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "confirmation_number": {
          "type": "string"
        },
        "account": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Tags.Models.TagModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "account_id": {
          "format": "int32",
          "type": "integer"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceTagModel": {
      "title": "place_tag",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The place tag ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Images.Models.ImageTagModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "tag_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuModelETL": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ref_id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "sections": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fk_request_template": {
          "type": "string"
        },
        "fk_logo": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "welcome_message": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        }
      }
    },
    "MonsciergeIDK.DataTypes.LocalizableString": {
      "type": "object",
      "properties": {
        "is_dirty": {
          "type": "boolean"
        },
        "is_machine_translated": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "translate": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuSectionModelETL": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "ref_id": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuListItemModelETL"
          }
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuSectionModelETL"
          }
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuListItemModelETL": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "nutrition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuNutritionETL"
          }
        },
        "allergies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuPriceETL"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModiferETL"
          }
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuNutritionETL": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "label": {
          "type": "string"
        },
        "daily_value": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuPriceETL": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuModiferETL": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "description": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Menus.Models.MenuModifierOptionETL"
          }
        }
      }
    },
    "MonsciergeIDK.Menus.Models.MenuModifierOptionETL": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "description": {
          "$ref": "#/definitions/MonsciergeIDK.DataTypes.LocalizableString"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Hotel.PropertyInfoModel": {
      "title": "property_info",
      "description": "Class PropertyInfoModel.",
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "brief_summary": {
          "type": "string"
        },
        "brand": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Brand.BrandBaseModel"
        },
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "default_image": {
          "type": "string"
        },
        "background_image": {
          "type": "string"
        },
        "mobile_background_image": {
          "type": "string"
        },
        "check_in_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "check_out_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "wait_time": {
          "format": "double",
          "type": "number"
        },
        "time_zone_model": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.TimeZoneModel"
        },
        "operating_hours": {
          "$ref": "#/definitions/System.Object"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.TimeZoneModel": {
      "title": "time_zone",
      "type": "object",
      "properties": {
        "raw_offset": {
          "format": "int32",
          "type": "integer"
        },
        "time_zone_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceHackModel": {
      "title": "place_hack",
      "type": "object",
      "properties": {
        "amenity": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityModel"
        },
        "enterprise": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Enterprise.EnterpriseModel"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceModel"
        },
        "geofence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.Common.LatLng"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceModel": {
      "title": "place",
      "type": "object",
      "properties": {
        "account_id": {
          "format": "int32",
          "type": "integer"
        },
        "ad_hoc_events_sync_password": {
          "type": "string"
        },
        "ad_hoc_events_sync_place_id": {
          "type": "string"
        },
        "ad_hoc_events_sync_salt": {
          "type": "string"
        },
        "ad_hoc_events_sync_username": {
          "type": "string"
        },
        "airport_radius": {
          "format": "float",
          "type": "number"
        },
        "breakfast2_go_menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "default_lang": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "desc_lang": {
          "type": "string"
        },
        "desc_translations": {
          "type": "string"
        },
        "dri_property_key": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.EmailModel"
          }
        },
        "enable_amenities": {
          "type": "boolean"
        },
        "enable_amenity_ads": {
          "type": "boolean"
        },
        "enable_amenity_categories": {
          "type": "boolean"
        },
        "enable_booking": {
          "type": "boolean"
        },
        "enable_breakfast2_go": {
          "type": "boolean"
        },
        "enable_call": {
          "type": "boolean"
        },
        "enable_call_concierge": {
          "type": "boolean"
        },
        "enable_directions": {
          "type": "boolean"
        },
        "enable_directory": {
          "type": "boolean"
        },
        "enable_events": {
          "type": "boolean"
        },
        "enable_events_legacy_editor": {
          "type": "boolean"
        },
        "enable_events_refresh": {
          "type": "boolean"
        },
        "enable_flight_ads": {
          "type": "boolean"
        },
        "enable_flights": {
          "type": "boolean"
        },
        "enable_header": {
          "type": "boolean"
        },
        "enable_home_ads": {
          "type": "boolean"
        },
        "enable_hot_sos": {
          "type": "boolean"
        },
        "enable_hot_sos_for_request_authentication": {
          "type": "boolean"
        },
        "enable_lobby": {
          "type": "boolean"
        },
        "enable_map_ads": {
          "type": "boolean"
        },
        "enable_maps": {
          "type": "boolean"
        },
        "enabled_menus": {
          "type": "boolean"
        },
        "enable_messages": {
          "type": "boolean"
        },
        "enable_micros": {
          "type": "boolean"
        },
        "enable_postcard_ads": {
          "type": "boolean"
        },
        "enable_postcards": {
          "type": "boolean"
        },
        "enable_recommendation_ads": {
          "type": "boolean"
        },
        "enable_recommendations": {
          "type": "boolean"
        },
        "enable_rewards": {
          "type": "boolean"
        },
        "enable_shuttle_tracker": {
          "type": "boolean"
        },
        "enable_sales_force_syncer": {
          "type": "boolean"
        },
        "enable_synergy_mms": {
          "type": "boolean"
        },
        "enable_transportation": {
          "type": "boolean"
        },
        "enable_valet": {
          "type": "boolean"
        },
        "enable_weather": {
          "type": "boolean"
        },
        "enable_weather_ads": {
          "type": "boolean"
        },
        "envision_facility_id": {
          "type": "string"
        },
        "envision_last_updated_ms": {
          "format": "int64",
          "type": "integer"
        },
        "events_refresh_timeout_m": {
          "format": "float",
          "type": "number"
        },
        "hot_sos_default_request_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "hot_sos_password": {
          "type": "string"
        },
        "hot_sos_salt": {
          "type": "string"
        },
        "hot_sos_username": {
          "type": "string"
        },
        "image_urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "import_file_name": {
          "type": "string"
        },
        "import_unique_id": {
          "type": "string"
        },
        "iso_country_code": {
          "type": "string"
        },
        "is_public": {
          "type": "boolean"
        },
        "is_setup": {
          "type": "boolean"
        },
        "jazz_location_code": {
          "type": "string"
        },
        "jazz_property_code": {
          "type": "string"
        },
        "master_event_access_code": {
          "type": "string"
        },
        "micros_password": {
          "type": "string"
        },
        "micros_salt": {
          "type": "string"
        },
        "primary_brand": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Brand.BrandBaseModel"
        },
        "radius": {
          "format": "int32",
          "type": "integer"
        },
        "rewards_image_url": {
          "type": "string"
        },
        "room_key_code": {
          "type": "string"
        },
        "room_service_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "sales_force_id": {
          "format": "int32",
          "type": "integer"
        },
        "synergey_default_request_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "synergy_password": {
          "type": "string"
        },
        "synergy_property_id": {
          "format": "int32",
          "type": "integer"
        },
        "synergy_salt": {
          "type": "string"
        },
        "synergy_username": {
          "type": "string"
        },
        "theme_color1": {
          "format": "int32",
          "type": "integer"
        },
        "theme_color2": {
          "format": "int32",
          "type": "integer"
        },
        "welcome_sms_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "welcome_sms_message": {
          "type": "string"
        },
        "welcome_sms_message_translations": {
          "type": "string"
        },
        "airport": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Flight.AirportBaseModel"
        },
        "cab_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "check_in_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "check_out_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "concierge_phone_replace": {
          "type": "boolean"
        },
        "last_modified_ms": {
          "format": "int64",
          "type": "integer"
        },
        "limo_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "postcard_hashtags": {
          "type": "string"
        },
        "requests_enabled": {
          "type": "boolean"
        },
        "shuttle_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "style_type": {
          "enum": [
            "Default",
            "ButtonStack",
            "MetroGrid",
            "CheckInOut"
          ],
          "type": "string"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "valet_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "description": {
          "type": "string"
        },
        "default_image": {
          "type": "string"
        },
        "background_image": {
          "type": "string"
        },
        "mobile_background_image": {
          "type": "string"
        },
        "name": {
          "description": "The name of the place.",
          "default": "Sheraton",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Common.LatLng": {
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "reference": {
          "$ref": "#/definitions/MonsciergeIDK.Models.Common.LatLng"
        }
      }
    },
    "MonsciergeAPI.Models.Flight.AirportBaseModel": {
      "title": "airport_base",
      "type": "object",
      "properties": {
        "id": {
          "description": "The airport code ID.",
          "default": "OKC",
          "type": "string"
        },
        "name": {
          "description": "The name of the airport.",
          "default": "Will Rogers World Airport",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceUiConfigModel": {
      "title": "place_ui_config",
      "type": "object",
      "properties": {
        "amenities_visible": {
          "type": "boolean"
        },
        "cab_enabled": {
          "type": "boolean"
        },
        "concierge_phone_visible": {
          "type": "boolean"
        },
        "default_postcard_message": {
          "type": "string"
        },
        "directions_visible": {
          "type": "boolean"
        },
        "events_visible": {
          "type": "boolean"
        },
        "facebook_page_id": {
          "type": "string"
        },
        "flights_visible": {
          "type": "boolean"
        },
        "has_anon_request_templates": {
          "type": "boolean"
        },
        "has_request_templates": {
          "type": "boolean"
        },
        "layouts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceLayoutModel"
          }
        },
        "limo_enabled": {
          "type": "boolean"
        },
        "maps_visible": {
          "type": "boolean"
        },
        "messages_visible": {
          "type": "boolean"
        },
        "menus_visible": {
          "type": "boolean"
        },
        "phones_visible": {
          "type": "boolean"
        },
        "postcards_email_subject": {
          "type": "string"
        },
        "postcards_visible": {
          "type": "boolean"
        },
        "recommendations_visible": {
          "type": "boolean"
        },
        "requests_visible": {
          "type": "boolean"
        },
        "shuttle_enabled": {
          "type": "boolean"
        },
        "time_zone_model": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.TimeZoneModel"
        },
        "transportation_visible": {
          "type": "boolean"
        },
        "valet_visible": {
          "type": "boolean"
        },
        "weather_visible": {
          "type": "boolean"
        },
        "welcome_send_visible": {
          "type": "boolean"
        },
        "airport": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Flight.AirportBaseModel"
        },
        "cab_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "check_in_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "check_out_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "concierge_phone_replace": {
          "type": "boolean"
        },
        "last_modified_ms": {
          "format": "int64",
          "type": "integer"
        },
        "limo_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "postcard_hashtags": {
          "type": "string"
        },
        "requests_enabled": {
          "type": "boolean"
        },
        "shuttle_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "style_type": {
          "enum": [
            "Default",
            "ButtonStack",
            "MetroGrid",
            "CheckInOut"
          ],
          "type": "string"
        },
        "uris": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.UriModel"
          }
        },
        "valet_request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "description": {
          "type": "string"
        },
        "default_image": {
          "type": "string"
        },
        "background_image": {
          "type": "string"
        },
        "mobile_background_image": {
          "type": "string"
        },
        "name": {
          "description": "The name of the place.",
          "default": "Sheraton",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceLayoutModel": {
      "title": "place_layout",
      "type": "object",
      "properties": {
        "amenity": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Amenity.AmenityBaseModel"
        },
        "desc": {
          "type": "string"
        },
        "request_template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
        },
        "type": {
          "enum": [
            "HotelInfo",
            "Directions",
            "Call",
            "Reservations",
            "Transportation",
            "RoomService",
            "Events",
            "Menus",
            "LocalMaps",
            "Requests",
            "Rewards",
            "MyRequests",
            "GetMyVehicle",
            "LocalRecommendations",
            "Flights",
            "CheckIn",
            "Weather",
            "Postcards",
            "Buggy",
            "AddFeature",
            "Url",
            "More",
            "Dining",
            "CheckOut",
            "Wayfinding",
            "Explore",
            "Email",
            "Home",
            "Messages",
            "Profile",
            "DoorLock",
            "LiveStream",
            "ConvenientCare"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceExplorerModel": {
      "title": "place_explorer",
      "type": "object",
      "properties": {
        "place_featured_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceFeaturedItemModel"
          }
        },
        "place_explorer_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceExplorerItemModel"
          }
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceFeaturedItemModel": {
      "title": "place_featured_item",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Feature",
            "Enterprise",
            "LocalRecommendation",
            "Event"
          ],
          "type": "string"
        },
        "image_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "level": {
          "enum": [
            "Basic",
            "Hero",
            "SuperHero",
            "Superman"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceExplorerItemModel": {
      "title": "place_explorer_item",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Features",
            "Hyperlink",
            "Events",
            "Navigation",
            "Valet",
            "Recommendations",
            "Flights",
            "Weather",
            "Maps",
            "Postcards"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "image_path": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.Place.PlaceSearchModel": {
      "type": "object",
      "properties": {
        "hotel_count": {
          "format": "int32",
          "type": "integer"
        },
        "reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "parent_reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "reach_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ReachGroup.ReachGroupBaseModel"
          }
        },
        "hotels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.HotelSearchModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.ReachGroup.ReachGroupBaseModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "parent_reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "has_children": {
          "type": "boolean"
        },
        "has_multiple_hotels": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Models.HotelSearchModel": {
      "type": "object",
      "properties": {
        "brand_id": {
          "format": "int32",
          "type": "integer"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "street_address": {
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "phone": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "is_lite": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Models.Place.PlaceSearchWaitModel": {
      "type": "object",
      "properties": {
        "wait_time": {
          "format": "double",
          "type": "number"
        },
        "operating_hours": {
          "$ref": "#/definitions/System.Object"
        },
        "brand_id": {
          "format": "int32",
          "type": "integer"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "street_address": {
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "phone": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "is_lite": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeIDK.Models.HeroModel": {
      "type": "object",
      "properties": {
        "image_path": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "feature_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "feature_type": {
          "enum": [
            "Feature",
            "Enterprise",
            "LocalRecommendation",
            "Event"
          ],
          "type": "string"
        },
        "feature_level": {
          "enum": [
            "Basic",
            "Hero",
            "SuperHero",
            "Superman"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardCollectionModel": {
      "title": "postcard_collection",
      "type": "object",
      "properties": {
        "postcards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Postcard.PostcardResourceModel"
          }
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.LinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardResourceModel": {
      "title": "postcard_resource",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "type": "integer"
        },
        "image_url": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.SelfLinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.SelfLinkModel": {
      "title": "self_link",
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardCreateResourceModel": {
      "title": "postcard_create_resource",
      "required": [
        "place_id",
        "image_id"
      ],
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "image_id": {
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardActionSendModel": {
      "title": "postcard_action_send",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "culture": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardActionEmailModel": {
      "title": "postcard_action_email",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "email_to": {
          "type": "string"
        },
        "email_from": {
          "type": "string"
        },
        "email_subject": {
          "type": "string"
        },
        "culture": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Postcard.PostcardActionReorderModel": {
      "title": "postcard_action_reorder",
      "type": "object",
      "properties": {
        "ordered_postcard_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "MonsciergeAPI.Models.Promo.ExceptionModel": {
      "title": "exception",
      "type": "object",
      "properties": {
        "start_ms": {
          "format": "int64",
          "description": "The time the exception will start as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "end_ms": {
          "format": "int64",
          "description": "The time the exception will end as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "scene": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneModel"
        },
        "id": {
          "format": "int32",
          "description": "The Exception ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.SceneModel": {
      "title": "scene",
      "type": "object",
      "properties": {
        "layout": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PromoLayoutModel"
        },
        "scene_sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneSectionModel"
          }
        },
        "permission_tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PermissionTagModel"
          }
        },
        "name": {
          "description": "The name of the scene.",
          "type": "string"
        },
        "description": {
          "description": "A description of the scene.",
          "type": "string"
        },
        "orientation": {
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string"
        },
        "usage": {
          "format": "int32",
          "description": "Number of devices configured to show the scene.",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The Scene ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.PromoLayoutModel": {
      "title": "promo_layout",
      "type": "object",
      "properties": {
        "orientation": {
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the layout.",
          "type": "string"
        },
        "section_count": {
          "format": "int32",
          "description": "The total number of sections in the layout.",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The Layout ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.SceneSectionModel": {
      "title": "scene_section",
      "type": "object",
      "properties": {
        "ordinal": {
          "format": "int32",
          "description": "The position the section is at.",
          "type": "integer"
        },
        "transition_duration": {
          "format": "int32",
          "description": "The duration the transition should last in seconds.",
          "default": 15,
          "type": "integer"
        },
        "images": {
          "description": "The image filename to use with imaging data service to get an image url.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "format": "int32",
          "description": "The Scene Section ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.PermissionTagModel": {
      "title": "permission_tag",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The ID of the tag.",
          "default": 42,
          "type": "integer"
        },
        "name": {
          "description": "The name of the permission.",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.CampaignModel": {
      "title": "campaign",
      "type": "object",
      "properties": {
        "scene": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Promo.SceneModel"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.ExceptionModel"
          }
        },
        "welcome_message_background_image": {
          "description": "The background image filename to use with imaging data service to get an image url to show with the message to welcome a user.",
          "default": "84745BF75E3E90BCCBA3C41A4C2BE0FC226B40EE.jpg",
          "type": "string"
        },
        "welcome_message": {
          "description": "The message body to welcome a user.",
          "default": "Hello Derek",
          "type": "string"
        },
        "permission_tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PermissionTagModel"
          }
        },
        "orientation": {
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the campaign.",
          "type": "string"
        },
        "description": {
          "description": "A description of the campaign.",
          "type": "string"
        },
        "usage": {
          "format": "int32",
          "description": "Number of devices configured to show the campaign.",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The Campaign ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Place.PlaceBasePromoDisplayModel": {
      "title": "place_base_promo_display",
      "type": "object",
      "properties": {
        "displays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PromoDisplayBaseModel"
          }
        },
        "permission_tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Promo.PermissionTagModel"
          }
        },
        "address": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.AddressModel"
        },
        "geocode": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Base.GeocodeModel"
        },
        "phones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.PhoneModel"
          }
        },
        "description": {
          "type": "string"
        },
        "default_image": {
          "type": "string"
        },
        "background_image": {
          "type": "string"
        },
        "mobile_background_image": {
          "type": "string"
        },
        "name": {
          "description": "The name of the place.",
          "default": "Sheraton",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The place ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.PromoDisplayBaseModel": {
      "title": "promo_display_base",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the display.",
          "type": "string"
        },
        "campaign_id": {
          "format": "int32",
          "description": "The campaign ID.",
          "default": 42,
          "type": "integer"
        },
        "status": {
          "description": "The status of the display",
          "default": "Online",
          "enum": [
            "Online",
            "Offline",
            "Mixed"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The Promotional Display ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Promo.PromoDisplayModel": {
      "title": "promo_display",
      "type": "object",
      "properties": {
        "beacon_id": {
          "format": "int32",
          "default": 55,
          "type": "integer"
        },
        "campaign": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Promo.CampaignModel"
        },
        "name": {
          "description": "The name of the display.",
          "type": "string"
        },
        "campaign_id": {
          "format": "int32",
          "description": "The campaign ID.",
          "default": 42,
          "type": "integer"
        },
        "status": {
          "description": "The status of the display",
          "default": "Online",
          "enum": [
            "Online",
            "Offline",
            "Mixed"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The Promotional Display ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceRegistration": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "password_confirm": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profile_id": {
          "type": "string"
        },
        "pim_token": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceConfirmStayBody": {
      "type": "object",
      "properties": {
        "confirmation_number": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Integrations.PMS.Proxce.Models.API.ProxceCreateReservationModel": {
      "type": "object",
      "properties": {
        "amenity_id": {
          "format": "int32",
          "type": "integer"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "dietary_requirements": {
          "type": "string"
        },
        "party_size": {
          "format": "int32",
          "type": "integer"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "profile_id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "date_string": {
          "type": "string"
        },
        "time_string": {
          "type": "string"
        },
        "pim_token": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Notifications.NotificationModel": {
      "title": "notification",
      "type": "object",
      "properties": {
        "job_type": {
          "type": "string"
        },
        "sub_type": {
          "type": "string"
        },
        "contact_user_name": {
          "type": "string"
        },
        "created_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "job_id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "start_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "updated_date_time": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ReleaseNote.ReleaseNoteModel": {
      "title": "release_note",
      "type": "object",
      "properties": {
        "desc": {
          "description": "The description for the release.",
          "type": "string"
        },
        "release_ms": {
          "format": "int64",
          "description": "The time the release was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.ReleaseNote.ReleaseNoteItemModel"
          }
        },
        "short_desc": {
          "description": "The shortened description for the release.",
          "type": "string"
        },
        "short_title": {
          "description": "The shortened title of the release.",
          "type": "string"
        },
        "title": {
          "description": "The title of the release.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The release note ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ReleaseNote.ReleaseNoteItemModel": {
      "title": "release_note_item",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "item_type": {
          "format": "int32",
          "type": "integer"
        },
        "item_type_name": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "description": "The release note item ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Requests.Models.MercyRequestModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "display_name": {
          "type": "string"
        },
        "origin": {
          "enum": [
            "Online",
            "Staff"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "eta": {
          "format": "date-time",
          "type": "string"
        },
        "created_on": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTRoomListModel": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTDevice"
          }
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTDevice": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Curtain",
            "Outlet",
            "Switch",
            "Thermostat"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTRoom": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTDevice"
          }
        },
        "curtain_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTCurtainDevice"
          }
        },
        "outlet_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTOutletDevice"
          }
        },
        "switch_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTSwitchDevice"
          }
        },
        "thermostat_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.IoT.Models.IoTThermostatDevice"
          }
        },
        "additional_info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTSwitchDevice": {
      "type": "object",
      "properties": {
        "current": {
          "format": "double",
          "type": "number"
        },
        "kwh": {
          "format": "double",
          "type": "number"
        },
        "power": {
          "format": "double",
          "type": "number"
        },
        "power_factor": {
          "format": "double",
          "type": "number"
        },
        "power_state": {
          "enum": [
            "On",
            "Off"
          ],
          "type": "string"
        },
        "voltage": {
          "format": "double",
          "type": "number"
        },
        "type": {
          "enum": [
            "Curtain",
            "Outlet",
            "Switch",
            "Thermostat"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.IoT.Models.IoTThermostatDevice": {
      "type": "object",
      "properties": {
        "cool_set_point": {
          "format": "double",
          "type": "number"
        },
        "cool_set_point_max": {
          "format": "double",
          "type": "number"
        },
        "cool_set_point_min": {
          "format": "double",
          "type": "number"
        },
        "fan_speed": {
          "enum": [
            "Auto",
            "Low",
            "Medium",
            "High",
            "Off"
          ],
          "type": "string"
        },
        "fan_speed_allowed": {
          "type": "array",
          "items": {
            "enum": [
              "Auto",
              "Low",
              "Medium",
              "High",
              "Off"
            ],
            "type": "string"
          }
        },
        "fan_speed_state": {
          "enum": [
            "Auto",
            "Low",
            "Medium",
            "High",
            "Off"
          ],
          "type": "string"
        },
        "heat_set_point": {
          "format": "double",
          "type": "number"
        },
        "heat_set_point_max": {
          "format": "double",
          "type": "number"
        },
        "heat_set_point_min": {
          "format": "double",
          "type": "number"
        },
        "mode": {
          "enum": [
            "Heat",
            "Cool",
            "Auto",
            "Off"
          ],
          "type": "string"
        },
        "mode_allowed": {
          "type": "array",
          "items": {
            "enum": [
              "Heat",
              "Cool",
              "Auto",
              "Off"
            ],
            "type": "string"
          }
        },
        "mode_state": {
          "enum": [
            "Idle",
            "CoolPreFan",
            "Cool",
            "CoolPostFan",
            "CoolRefresh",
            "HeatPreFan",
            "Heat",
            "HeatPostFan",
            "HeatRefresh",
            "Off"
          ],
          "type": "string"
        },
        "occupied": {
          "type": "boolean"
        },
        "temperature": {
          "format": "double",
          "type": "number"
        },
        "type": {
          "enum": [
            "Curtain",
            "Outlet",
            "Switch",
            "Thermostat"
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "ids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MonsciergeIDK.Integrations.Microservices.MonsciergeSalto.Models.MobileBinaryResponse": {
      "type": "object",
      "properties": {
        "response_type": {
          "enum": [
            "CreatedNewKey",
            "CopiedKey",
            "ProcessedCheckout",
            "SyntaxError",
            "NoCommunicationError",
            "NoFilesError",
            "OverflowError",
            "CardError",
            "FormatError",
            "UnknownRoomError",
            "TimeoutError",
            "RoomAlreadyCheckedOutError",
            "RoomOutOfServiceError",
            "GuestCardEncodedByAnotherStationError",
            "CardValidityError",
            "GeneralSaltoError"
          ],
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "binary_key": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Product.ProductModel": {
      "title": "product",
      "type": "object",
      "properties": {
        "dependent_products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Product.ProductBaseModel"
          }
        },
        "product_name": {
          "type": "string"
        },
        "product_description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_description": {
          "type": "string"
        },
        "requires_product_id": {
          "format": "int32",
          "type": "integer"
        },
        "has_quantity": {
          "type": "boolean"
        },
        "available_quantities": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "pricing_interval": {
          "type": "string"
        },
        "iso_currency_code": {
          "type": "string"
        },
        "is_recurring": {
          "type": "boolean"
        },
        "is_hardware": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The product ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Product.ProductBaseModel": {
      "title": "product_base",
      "type": "object",
      "properties": {
        "product_name": {
          "type": "string"
        },
        "product_description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_description": {
          "type": "string"
        },
        "requires_product_id": {
          "format": "int32",
          "type": "integer"
        },
        "has_quantity": {
          "type": "boolean"
        },
        "available_quantities": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "pricing_interval": {
          "type": "string"
        },
        "iso_currency_code": {
          "type": "string"
        },
        "is_recurring": {
          "type": "boolean"
        },
        "is_hardware": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The product ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ServicePlan.ServicePlanBaseModel": {
      "title": "service_plan_base",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_description": {
          "type": "string"
        },
        "plan_region": {
          "type": "string"
        },
        "monthly_fee": {
          "format": "double",
          "type": "number"
        },
        "iso_currency_code": {
          "type": "string"
        },
        "plan_level": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The service plan ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ServicePlan.ServicePlanModel": {
      "title": "service_plan",
      "type": "object",
      "properties": {
        "trial_period_days": {
          "format": "int32",
          "type": "integer"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Product.ProductModel"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "display_description": {
          "type": "string"
        },
        "plan_region": {
          "type": "string"
        },
        "monthly_fee": {
          "format": "double",
          "type": "number"
        },
        "iso_currency_code": {
          "type": "string"
        },
        "plan_level": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The service plan ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.SubDeviceConfig.Models.SubDeviceConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "refid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "admin_pin": {
          "type": "string"
        },
        "desired_software_version": {
          "type": "string"
        },
        "desired_software_last_updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "desired_config_version": {
          "format": "int32",
          "type": "integer"
        },
        "actual_software_version": {
          "type": "string"
        },
        "actual_software_version_last_updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "actual_config_version": {
          "format": "int32",
          "type": "integer"
        },
        "actual_config_last_updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "actual_shell_version": {
          "type": "string"
        },
        "desired_shell_version": {
          "type": "string"
        },
        "actual_shell_version_last_updated_on": {
          "format": "date-time",
          "type": "string"
        },
        "aim_id": {
          "format": "int32",
          "type": "integer"
        },
        "ad_id": {
          "format": "int32",
          "type": "integer"
        },
        "device_type": {
          "type": "string"
        },
        "known_offline": {
          "type": "boolean"
        },
        "event_locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.MeetingsAndEvents.Models.EventLocationModel"
          }
        }
      }
    },
    "MonsciergeIDK.MeetingsAndEvents.Models.EventLocationModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "refid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "device_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "has_events": {
          "type": "boolean"
        },
        "is_stage": {
          "type": "boolean"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ImageModel"
          }
        }
      }
    },
    "MonsciergeIDK.Themes.Models.ThemeConfigModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "key": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "option": {
          "type": "string"
        },
        "application_type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "fk_hotel": {
          "format": "int32",
          "type": "integer"
        },
        "fk_hotel_brand": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.TimeZone.TimeZoneCollectionModel": {
      "title": "time_zone_collection",
      "type": "object",
      "properties": {
        "time_zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.TimeZone.TimeZoneResourceModel"
          }
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.LinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.TimeZone.TimeZoneResourceModel": {
      "title": "time_zone_resource",
      "type": "object",
      "properties": {
        "id": {
          "default": "Central Standard Time",
          "type": "string"
        },
        "display_name": {
          "default": "(UTC-06:00) Central Time (US & Canada)",
          "type": "string"
        },
        "standard_name": {
          "default": "Central Standard Time",
          "type": "string"
        },
        "daylight_name": {
          "default": "Central Daylight Time",
          "type": "string"
        },
        "base_utc_offset": {
          "default": "-06:00:00",
          "type": "string"
        },
        "supports_daylight_savings_time": {
          "default": true,
          "type": "boolean"
        },
        "links": {
          "$ref": "#/definitions/MonsciergeAPI.Models.LinkModel"
        }
      }
    },
    "MonsciergeAPI.Models.Analytic.ClickModel": {
      "title": "click",
      "type": "object",
      "properties": {
        "action": {
          "format": "int32",
          "type": "integer"
        },
        "amenity_id": {
          "format": "int32",
          "type": "integer"
        },
        "click_date_time": {
          "format": "date-time",
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "enterprise_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_id": {
          "format": "int32",
          "type": "integer"
        },
        "menu_item_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "platform_type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "session_id": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.User.UserCheckInModel": {
      "title": "user_check_in",
      "type": "object",
      "properties": {
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceBaseModel"
        },
        "user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "alias_first_name": {
          "type": "string"
        },
        "alias_last_name": {
          "type": "string"
        },
        "check_in_date": {
          "format": "date-time",
          "type": "string"
        },
        "check_out_date": {
          "format": "date-time",
          "type": "string"
        },
        "check_in_date_ms": {
          "format": "int64",
          "type": "integer"
        },
        "check_out_date_ms": {
          "format": "int64",
          "type": "integer"
        },
        "room_number": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Unknown",
            "Pending",
            "Verified",
            "CheckedOut"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.User.FavoriteModel": {
      "title": "favorite",
      "type": "object",
      "properties": {
        "menu_item": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Menu.Item.MenuItemBaseModel"
        },
        "place": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Place.PlaceHackBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The favorite ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.User.PersonalDeviceModel": {
      "title": "personal_device",
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "model": {
          "$ref": "#/definitions/MonsciergeAPI.Models.PersonalDevice.PersonalDeviceModelModel"
        },
        "validated": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "description": "The personal device ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ReachRole.ReachRoleModel": {
      "title": "reach_role",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/MonsciergeAPI.Models.ReachRole.ReachRolePermissionsModel"
        },
        "id": {
          "format": "int32",
          "description": "The reach role ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.ReachRole.ReachRolePermissionsModel": {
      "title": "reach_role_permissions",
      "type": "object",
      "properties": {
        "can_invite_new_managers": {
          "type": "boolean"
        },
        "can_edit_logo": {
          "type": "boolean"
        },
        "can_edit_background": {
          "type": "boolean"
        },
        "can_edit_device_content": {
          "type": "boolean"
        },
        "can_change_device_name": {
          "type": "boolean"
        },
        "can_change_device_grouping": {
          "type": "boolean"
        },
        "can_view_analytics": {
          "type": "boolean"
        },
        "can_edit_orbs": {
          "type": "boolean"
        },
        "can_view_all_ads": {
          "type": "boolean"
        },
        "can_manage_sub_devices": {
          "type": "boolean"
        },
        "can_view_all_groups": {
          "type": "boolean"
        },
        "can_set_ad_jump_to_state": {
          "type": "boolean"
        },
        "can_edit_mobile_preview": {
          "type": "boolean"
        },
        "can_edit_configuration": {
          "type": "boolean"
        },
        "merchant_is_visible": {
          "type": "boolean"
        },
        "can_manage_hotel_brands": {
          "type": "boolean"
        },
        "can_manage_assigned_events": {
          "type": "boolean"
        },
        "can_manage_assigned_campaigns": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.User.UserPlaceModel": {
      "title": "user_place",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_active_ms": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "description": "The {0} ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.LastKnown.LastKnownRequestModel": {
      "title": "last_known_request",
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestModel"
        },
        "last_known_request_action_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestModel": {
      "title": "request",
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Action.RequestActionModel"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
          }
        },
        "created_ms": {
          "format": "int64",
          "description": "The time the request was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "eta_ms": {
          "format": "int64",
          "description": "The ETA the request should be completed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "following": {
          "description": "Whether or not the user is following the request. <code>True</code> for following, <code>false</code> if not.",
          "type": "boolean"
        },
        "latest_action_ms": {
          "format": "int64",
          "description": "The time the last action was created on the request as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "requester_user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
        },
        "status": {
          "description": "The status of the request.",
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
        },
        "unread": {
          "description": "Whether or not the request is unread. <code>True</code> for unread, <code>false</code> if not.",
          "type": "boolean"
        },
        "visible": {
          "description": "Whether or not the request is visible. <code>True</code> for visible, <code>false</code> if not.",
          "type": "boolean"
        },
        "room_number": {
          "description": "The room number for the request",
          "type": "string"
        },
        "can_send_message": {
          "type": "boolean"
        },
        "requested_for": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Action.RequestActionModel": {
      "title": "request_action",
      "type": "object",
      "properties": {
        "added_follower": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "created_ms": {
          "format": "int64",
          "description": "The time the request action was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "eta_ms": {
          "format": "int64",
          "description": "The estimated time the request should be completed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "message": {
          "description": "The message body for the action.",
          "default": "I would really appreciate some new towels.\r\nI seem to have lost the others...",
          "type": "string"
        },
        "message_private": {
          "description": "Whether or not the message is private. <code>True</code> for private, <code>false</code> if not.",
          "type": "boolean"
        },
        "old_eta_ms": {
          "format": "int64",
          "description": "The previous estimated time the request action should be completed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "old_group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "old_relation": {
          "enum": [
            "Reciprocal",
            "ParentOf",
            "ChildOf"
          ],
          "type": "string"
        },
        "old_status": {
          "description": "The previous status for the request.",
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "related_request_id": {
          "format": "int32",
          "type": "integer"
        },
        "relation": {
          "enum": [
            "Reciprocal",
            "ParentOf",
            "ChildOf"
          ],
          "type": "string"
        },
        "is_staff": {
          "type": "boolean"
        },
        "removed_follower": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "request_id": {
          "format": "int32",
          "description": "The request ID the action belongs to.",
          "type": "integer"
        },
        "status": {
          "description": "The current status of the request.",
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserBaseModel"
        },
        "id": {
          "format": "int32",
          "description": "The request action ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Request.Action.RequestActionCommonModel": {
      "title": "request_action_common",
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.Action.RequestActionModel"
          }
        },
        "additional_info": {
          "type": "string"
        },
        "created_date": {
          "format": "int64",
          "type": "integer"
        },
        "group_name": {
          "type": "string"
        },
        "last_known_action_id": {
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
          }
        },
        "request_status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "request_template_name": {
          "type": "string"
        },
        "visible": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.Request.RequestCommonModel": {
      "title": "request_common",
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Request.RequestOptionValueModel"
          }
        },
        "created_ms": {
          "format": "int64",
          "description": "The time the request was created as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "eta_ms": {
          "format": "int64",
          "description": "The ETA the request should be completed as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "group": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Group.RequestGroupBaseModel"
        },
        "following": {
          "description": "Whether or not the user is following the request. <code>True</code> for following, <code>false</code> if not.",
          "type": "boolean"
        },
        "latest_action_ms": {
          "format": "int64",
          "description": "The time the last action was created on the request as a unix timestamp in milliseconds.",
          "default": 1432717500000,
          "type": "integer"
        },
        "requester_user": {
          "$ref": "#/definitions/MonsciergeAPI.Models.User.UserModel"
        },
        "status": {
          "description": "The status of the request.",
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/MonsciergeAPI.Models.Request.Template.RequestTemplateBaseModel"
        },
        "unread": {
          "description": "Whether or not the request is unread. <code>True</code> for unread, <code>false</code> if not.",
          "type": "boolean"
        },
        "visible": {
          "description": "Whether or not the request is visible. <code>True</code> for visible, <code>false</code> if not.",
          "type": "boolean"
        },
        "room_number": {
          "description": "The room number for the request",
          "type": "string"
        },
        "can_send_message": {
          "type": "boolean"
        },
        "requested_for": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "description": "The request ID.",
          "default": 42,
          "type": "integer"
        },
        "r_efid": {
          "default": "7267E21B-E9EE-40E9-98A3-80DC7F05CFCB",
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.Base.CountModel": {
      "title": "count",
      "type": "object",
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Models.Place.PlaceStatusModel": {
      "type": "object",
      "properties": {
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "room_number": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "checkin_ms": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "checkout_ms": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Integrations.Base.Models.Password.NewPasswordModel": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string"
        },
        "new_password": {
          "type": "string"
        },
        "validations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MonsciergeIDK.Integrations.Base.Models.Common.AdditionalInfoModel"
          }
        }
      }
    },
    "MonsciergeIDK.Models.ReachGroup.ReachGroupModel": {
      "type": "object",
      "properties": {
        "parent_id": {
          "format": "int32",
          "type": "integer"
        },
        "role_name": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.ReachGroup.ReachGroupModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "image_path": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "parent_reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "has_children": {
          "type": "boolean"
        },
        "has_multiple_hotels": {
          "type": "boolean"
        },
        "ordinal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.ReachGroup.ReachUserGroupMapModel": {
      "title": "reach_user_group_map",
      "type": "object",
      "properties": {
        "reach_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "reach_group": {
          "type": "string"
        },
        "reach_role_id": {
          "format": "int32",
          "type": "integer"
        },
        "reach_role": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.Models.User.UserReachGroupModel": {
      "type": "object",
      "properties": {
        "total_count": {
          "format": "int32",
          "type": "integer"
        },
        "user_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "reach_group_role": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.Models.User.ReachGroupAndRoleModel"
          }
        },
        "device_ids": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "contact_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "user_id": {
          "format": "int32",
          "type": "integer"
        },
        "children_count": {
          "format": "int32",
          "type": "integer"
        },
        "last_active_time": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.Models.User.ReachGroupAndRoleModel": {
      "type": "object",
      "properties": {
        "reach_group": {
          "type": "string"
        },
        "reach_role": {
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestCategoryResourceModel": {
      "title": "request_category_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceListModel": {
      "title": "request_template_resource_list",
      "type": "object",
      "properties": {
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "localized_description": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestEtaActionResourceModel": {
      "title": "request_eta_action_resource",
      "type": "object",
      "properties": {
        "action": {
          "enum": [
            "SetNewEta",
            "NotifyGuest",
            "NotifyStaff",
            "AddUser",
            "ChangeGroup",
            "EmailStaff"
          ],
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "from_eta_ms": {
          "format": "int64",
          "type": "integer"
        },
        "new_eta_ms": {
          "format": "int64",
          "type": "integer"
        },
        "guest_message": {
          "type": "string"
        },
        "guest_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "email_subject": {
          "type": "string"
        },
        "resolved_email_subject": {
          "type": "string"
        },
        "email_message": {
          "type": "string"
        },
        "resolved_email_message": {
          "type": "string"
        },
        "staff_message": {
          "type": "string"
        },
        "staff_message_user_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestGroupExceptionResourceModel": {
      "title": "request_group_exception_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "end_time_ms": {
          "format": "double",
          "type": "number"
        },
        "start_time_ms": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestOptionChoiceResourceModel": {
      "title": "request_option_choice_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "option_id": {
          "format": "int32",
          "type": "integer"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Default"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestOptionResourceModel": {
      "title": "request_option_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "default": {
          "type": "string"
        },
        "max": {
          "type": "string"
        },
        "min": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "watermark": {
          "type": "string"
        },
        "localized_watermark": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "field_type": {
          "enum": [
            "Unknown",
            "Number",
            "DateTime",
            "Text",
            "Message",
            "Boolean",
            "Picklist"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestStockResponseResourceModel": {
      "title": "request_stock_response_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "eta": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "user_for_accept": {
          "type": "boolean"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestTriggerResourceModel": {
      "title": "request_trigger_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "template_id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "old_status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "new_status": {
          "enum": [
            "NEW",
            "ACK",
            "CLOSED",
            "ARCHIVED",
            "DELETED",
            "PENDING_APPROVAL"
          ],
          "type": "string"
        },
        "printer_id": {
          "format": "int32",
          "type": "integer"
        },
        "old_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "new_request_type": {
          "format": "int32",
          "type": "integer"
        },
        "new_group_id": {
          "format": "int32",
          "type": "integer"
        },
        "staff_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "staff_message": {
          "type": "string"
        },
        "email_subject": {
          "type": "string"
        },
        "email_message": {
          "type": "string"
        },
        "guest_message_user_id": {
          "format": "int32",
          "type": "integer"
        },
        "guest_message": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "trigger": {
          "enum": [
            "Created",
            "Validated",
            "StatusChanged",
            "EtaChanged",
            "StaffSentMessage",
            "GuestSentMessage",
            "AssignedToGroup",
            "UserAdded",
            "UserRemoved",
            "TemplateChanged"
          ],
          "type": "string"
        },
        "action": {
          "enum": [
            "NotifyGuest",
            "NotifyStaff",
            "SendEmail",
            "SentToPrinter"
          ],
          "type": "string"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestTemplateResourceModel": {
      "title": "request_template_resource",
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "eta": {
          "format": "int32",
          "type": "integer"
        },
        "validation": {
          "type": "boolean"
        },
        "ref_id": {
          "type": "string"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "category": {
          "$ref": "#/definitions/MonsciergeIDK.RequestTemplates.Models.RequestCategoryModel"
        },
        "sms_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.SmsNumbers.Models.SmsNumberModel"
          }
        },
        "url": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "place": {
          "type": "string"
        },
        "is_staff": {
          "type": "boolean"
        },
        "voice_number": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "localized_description": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.RequestTemplates.Models.RequestCategoryModel": {
      "type": "object",
      "properties": {
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeIDK.SmsNumbers.Models.SmsNumberModel": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "phone_number": {
          "type": "string"
        },
        "request_template_id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        }
      }
    },
    "MonsciergeIDK.RequestTemplates.Models.RequestTemplateModel": {
      "type": "object",
      "properties": {
        "group_id": {
          "format": "int32",
          "type": "integer"
        },
        "eta": {
          "format": "int32",
          "type": "integer"
        },
        "validation": {
          "type": "boolean"
        },
        "ref_id": {
          "type": "string"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "category": {
          "$ref": "#/definitions/MonsciergeIDK.RequestTemplates.Models.RequestCategoryModel"
        },
        "sms_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeIDK.SmsNumbers.Models.SmsNumberModel"
          }
        },
        "url": {
          "type": "string"
        },
        "hotel_id": {
          "format": "int32",
          "type": "integer"
        },
        "place": {
          "type": "string"
        },
        "is_staff": {
          "type": "boolean"
        },
        "voice_number": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "localized_description": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MonsciergeAPI.Models.RequestTemplates.RequestTemplateSortingResourceModel": {
      "title": "request_template_sorting_resource",
      "type": "object",
      "properties": {
        "image_path": {
          "type": "string"
        },
        "is_category": {
          "type": "boolean"
        },
        "translated_name": {
          "type": "string"
        },
        "translated_description": {
          "type": "string"
        },
        "category_id": {
          "format": "int32",
          "type": "integer"
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonsciergeAPI.Models.Base.BaseUriModel"
          }
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ref_id": {
          "type": "string"
        },
        "place_id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "localized_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "localized_description": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/MonsciergeIDK.Models.ImageListModel"
        },
        "template_type": {
          "enum": [
            "Default",
            "Private",
            "Public",
            "Staff",
            "Feedback"
          ],
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant",
      "flow": "implicit",
      "authorizationUrl": "https://test.monscierge.com/auth/oauth/authorize",
      "tokenUrl": "https://test.monscierge.com/auth/oauth/token",
      "scopes": {
        "Connect": "Access to Connect account"
      }
    }
  }
}